
BattleBot_B0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007164  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080072f8  080072f8  000172f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007358  08007358  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  08007358  08007358  00017358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007360  08007360  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007360  08007360  00017360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007364  08007364  00017364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  08007368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c80  2000015c  080074c4  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ddc  080074c4  00021ddc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011405  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ddd  00000000  00000000  00031591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  00034370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  00035198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a45  00000000  00000000  00035e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000134a7  00000000  00000000  0004e8c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008908a  00000000  00000000  00061d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eadf6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039c4  00000000  00000000  000eae48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000015c 	.word	0x2000015c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080072e0 	.word	0x080072e0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000160 	.word	0x20000160
 80001d0:	080072e0 	.word	0x080072e0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 faa9 	bl	8000a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f857 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f8ef 	bl	80006c8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004ea:	f006 f9d9 	bl	80068a0 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 80004ee:	f000 f8bd 	bl	800066c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  for(int i = 0; i < 3; i++)
 80004f2:	2300      	movs	r3, #0
 80004f4:	607b      	str	r3, [r7, #4]
 80004f6:	e036      	b.n	8000566 <main+0x8e>
  {
	  /* Forward right motor test control */
	  	  motor_enable(&FW_RIGHT);
 80004f8:	4821      	ldr	r0, [pc, #132]	; (8000580 <main+0xa8>)
 80004fa:	f000 f962 	bl	80007c2 <motor_enable>
	  	  motor_enable(&BW_RIGHT);
 80004fe:	4821      	ldr	r0, [pc, #132]	; (8000584 <main+0xac>)
 8000500:	f000 f95f 	bl	80007c2 <motor_enable>
	  	  motor_enable(&FW_LEFT);
 8000504:	4820      	ldr	r0, [pc, #128]	; (8000588 <main+0xb0>)
 8000506:	f000 f95c 	bl	80007c2 <motor_enable>
	  	  motor_enable(&BW_LEFT);
 800050a:	4820      	ldr	r0, [pc, #128]	; (800058c <main+0xb4>)
 800050c:	f000 f959 	bl	80007c2 <motor_enable>

	  	  motor_move(&FW_RIGHT, FW_R_FW, 100);
 8000510:	2264      	movs	r2, #100	; 0x64
 8000512:	2101      	movs	r1, #1
 8000514:	481a      	ldr	r0, [pc, #104]	; (8000580 <main+0xa8>)
 8000516:	f000 f964 	bl	80007e2 <motor_move>
	  	  motor_move(&BW_RIGHT, BW_R_FW, 100);
 800051a:	2264      	movs	r2, #100	; 0x64
 800051c:	2100      	movs	r1, #0
 800051e:	4819      	ldr	r0, [pc, #100]	; (8000584 <main+0xac>)
 8000520:	f000 f95f 	bl	80007e2 <motor_move>
	  	  motor_move(&FW_LEFT, FW_L_FW, 100);
 8000524:	2264      	movs	r2, #100	; 0x64
 8000526:	2101      	movs	r1, #1
 8000528:	4817      	ldr	r0, [pc, #92]	; (8000588 <main+0xb0>)
 800052a:	f000 f95a 	bl	80007e2 <motor_move>
	  	  motor_move(&BW_LEFT, BW_L_FW, 100);
 800052e:	2264      	movs	r2, #100	; 0x64
 8000530:	2100      	movs	r1, #0
 8000532:	4816      	ldr	r0, [pc, #88]	; (800058c <main+0xb4>)
 8000534:	f000 f955 	bl	80007e2 <motor_move>

	  	  HAL_Delay(TEST_DELAY);
 8000538:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800053c:	f000 faec 	bl	8000b18 <HAL_Delay>

	  	  motor_stop(&FW_RIGHT);
 8000540:	480f      	ldr	r0, [pc, #60]	; (8000580 <main+0xa8>)
 8000542:	f000 f97f 	bl	8000844 <motor_stop>
	  	  motor_stop(&BW_RIGHT);
 8000546:	480f      	ldr	r0, [pc, #60]	; (8000584 <main+0xac>)
 8000548:	f000 f97c 	bl	8000844 <motor_stop>
	  	  motor_stop(&FW_LEFT);
 800054c:	480e      	ldr	r0, [pc, #56]	; (8000588 <main+0xb0>)
 800054e:	f000 f979 	bl	8000844 <motor_stop>
	  	  motor_stop(&BW_LEFT);
 8000552:	480e      	ldr	r0, [pc, #56]	; (800058c <main+0xb4>)
 8000554:	f000 f976 	bl	8000844 <motor_stop>

	  	  HAL_Delay(TEST_DELAY);
 8000558:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800055c:	f000 fadc 	bl	8000b18 <HAL_Delay>
  for(int i = 0; i < 3; i++)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	3301      	adds	r3, #1
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2b02      	cmp	r3, #2
 800056a:	ddc5      	ble.n	80004f8 <main+0x20>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800056c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000570:	4807      	ldr	r0, [pc, #28]	; (8000590 <main+0xb8>)
 8000572:	f000 fda4 	bl	80010be <HAL_GPIO_TogglePin>

	  HAL_Delay(500);
 8000576:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800057a:	f000 facd 	bl	8000b18 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800057e:	e7f5      	b.n	800056c <main+0x94>
 8000580:	20000000 	.word	0x20000000
 8000584:	20000018 	.word	0x20000018
 8000588:	20000030 	.word	0x20000030
 800058c:	20000048 	.word	0x20000048
 8000590:	40020800 	.word	0x40020800

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	; 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	2230      	movs	r2, #48	; 0x30
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f006 fe94 	bl	80072d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	4b29      	ldr	r3, [pc, #164]	; (8000664 <SystemClock_Config+0xd0>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	4a28      	ldr	r2, [pc, #160]	; (8000664 <SystemClock_Config+0xd0>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	; 0x40
 80005c8:	4b26      	ldr	r3, [pc, #152]	; (8000664 <SystemClock_Config+0xd0>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	4b23      	ldr	r3, [pc, #140]	; (8000668 <SystemClock_Config+0xd4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005e0:	4a21      	ldr	r2, [pc, #132]	; (8000668 <SystemClock_Config+0xd4>)
 80005e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <SystemClock_Config+0xd4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f4:	2301      	movs	r3, #1
 80005f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	2302      	movs	r3, #2
 8000600:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000602:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000608:	2319      	movs	r3, #25
 800060a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800060c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000610:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000612:	2304      	movs	r3, #4
 8000614:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000616:	2307      	movs	r3, #7
 8000618:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	4618      	mov	r0, r3
 8000620:	f002 f92a 	bl	8002878 <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800062a:	f000 f8c5 	bl	80007b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2302      	movs	r3, #2
 8000634:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800063a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2102      	movs	r1, #2
 800064a:	4618      	mov	r0, r3
 800064c:	f002 fb8c 	bl	8002d68 <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000656:	f000 f8af 	bl	80007b8 <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3750      	adds	r7, #80	; 0x50
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_I2C1_Init+0x50>)
 8000672:	4a13      	ldr	r2, [pc, #76]	; (80006c0 <MX_I2C1_Init+0x54>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_I2C1_Init+0x50>)
 8000678:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <MX_I2C1_Init+0x58>)
 800067a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_I2C1_Init+0x50>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_I2C1_Init+0x50>)
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_I2C1_Init+0x50>)
 800068a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800068e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000690:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <MX_I2C1_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_I2C1_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <MX_I2C1_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_I2C1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_I2C1_Init+0x50>)
 80006aa:	f000 fd23 	bl	80010f4 <HAL_I2C_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b4:	f000 f880 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000178 	.word	0x20000178
 80006c0:	40005400 	.word	0x40005400
 80006c4:	000186a0 	.word	0x000186a0

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	4b32      	ldr	r3, [pc, #200]	; (80007ac <MX_GPIO_Init+0xe4>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a31      	ldr	r2, [pc, #196]	; (80007ac <MX_GPIO_Init+0xe4>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b2f      	ldr	r3, [pc, #188]	; (80007ac <MX_GPIO_Init+0xe4>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	4b2b      	ldr	r3, [pc, #172]	; (80007ac <MX_GPIO_Init+0xe4>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a2a      	ldr	r2, [pc, #168]	; (80007ac <MX_GPIO_Init+0xe4>)
 8000704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b28      	ldr	r3, [pc, #160]	; (80007ac <MX_GPIO_Init+0xe4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	4b24      	ldr	r3, [pc, #144]	; (80007ac <MX_GPIO_Init+0xe4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a23      	ldr	r2, [pc, #140]	; (80007ac <MX_GPIO_Init+0xe4>)
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b21      	ldr	r3, [pc, #132]	; (80007ac <MX_GPIO_Init+0xe4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <MX_GPIO_Init+0xe4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a1c      	ldr	r2, [pc, #112]	; (80007ac <MX_GPIO_Init+0xe4>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <MX_GPIO_Init+0xe4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000754:	4816      	ldr	r0, [pc, #88]	; (80007b0 <MX_GPIO_Init+0xe8>)
 8000756:	f000 fc99 	bl	800108c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BW_RIGHT_B_Pin|BW_RIGHT_A_Pin|FW_RIGHT_B_Pin|FW_RIGHT_A_Pin
 800075a:	2200      	movs	r2, #0
 800075c:	f24f 7137 	movw	r1, #63287	; 0xf737
 8000760:	4814      	ldr	r0, [pc, #80]	; (80007b4 <MX_GPIO_Init+0xec>)
 8000762:	f000 fc93 	bl	800108c <HAL_GPIO_WritePin>
                          |FW_LEFT_A_Pin|FW_LEFT_B_Pin|BW_LEFT_A_Pin|BW_LEFT_B_Pin
                          |FW_LEFT_EN_Pin|FW_RIGHT_EN_Pin|BW_RIGHT_EN_Pin|BW_LEFT_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076c:	2301      	movs	r3, #1
 800076e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4619      	mov	r1, r3
 800077e:	480c      	ldr	r0, [pc, #48]	; (80007b0 <MX_GPIO_Init+0xe8>)
 8000780:	f000 fb00 	bl	8000d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : BW_RIGHT_B_Pin BW_RIGHT_A_Pin FW_RIGHT_B_Pin FW_RIGHT_A_Pin
                           FW_LEFT_A_Pin FW_LEFT_B_Pin BW_LEFT_A_Pin BW_LEFT_B_Pin
                           FW_LEFT_EN_Pin FW_RIGHT_EN_Pin BW_RIGHT_EN_Pin BW_LEFT_EN_Pin */
  GPIO_InitStruct.Pin = BW_RIGHT_B_Pin|BW_RIGHT_A_Pin|FW_RIGHT_B_Pin|FW_RIGHT_A_Pin
 8000784:	f24f 7337 	movw	r3, #63287	; 0xf737
 8000788:	617b      	str	r3, [r7, #20]
                          |FW_LEFT_A_Pin|FW_LEFT_B_Pin|BW_LEFT_A_Pin|BW_LEFT_B_Pin
                          |FW_LEFT_EN_Pin|FW_RIGHT_EN_Pin|BW_RIGHT_EN_Pin|BW_LEFT_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2301      	movs	r3, #1
 800078c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_GPIO_Init+0xec>)
 800079e:	f000 faf1 	bl	8000d84 <HAL_GPIO_Init>

}
 80007a2:	bf00      	nop
 80007a4:	3728      	adds	r7, #40	; 0x28
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40020800 	.word	0x40020800
 80007b4:	40020400 	.word	0x40020400

080007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
}
 80007be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <Error_Handler+0x8>

080007c2 <motor_enable>:
};

/* Implementing declared functions */

/* Enable motor */
void motor_enable(struct motor *mot) {
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(mot->motor_en_gpio_port, mot->motor_en_pin, HIGH);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6818      	ldr	r0, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	889b      	ldrh	r3, [r3, #4]
 80007d2:	2201      	movs	r2, #1
 80007d4:	4619      	mov	r1, r3
 80007d6:	f000 fc59 	bl	800108c <HAL_GPIO_WritePin>

}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <motor_move>:
void motor_disable(struct motor *mot) {
	HAL_GPIO_WritePin(mot->motor_en_gpio_port, mot->motor_en_pin, LOW);
}

/* Directional motor control */
void motor_move(struct motor *mot, int dir, int speed) {
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b084      	sub	sp, #16
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	60f8      	str	r0, [r7, #12]
 80007ea:	60b9      	str	r1, [r7, #8]
 80007ec:	607a      	str	r2, [r7, #4]
	if (dir == 0) {
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d110      	bne.n	8000816 <motor_move+0x34>
		HAL_GPIO_WritePin(mot->motor_A_dir_gpio_port, mot->motor_A_dir_pin,
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	6898      	ldr	r0, [r3, #8]
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	899b      	ldrh	r3, [r3, #12]
 80007fc:	2201      	movs	r2, #1
 80007fe:	4619      	mov	r1, r3
 8000800:	f000 fc44 	bl	800108c <HAL_GPIO_WritePin>
				HIGH);

		HAL_GPIO_WritePin(mot->motor_B_dir_gpio_port, mot->motor_B_dir_pin,
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	6918      	ldr	r0, [r3, #16]
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	8a9b      	ldrh	r3, [r3, #20]
 800080c:	2200      	movs	r2, #0
 800080e:	4619      	mov	r1, r3
 8000810:	f000 fc3c 	bl	800108c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(mot->motor_A_dir_gpio_port, mot->motor_A_dir_pin,
				LOW);
	}

}
 8000814:	e012      	b.n	800083c <motor_move+0x5a>
	} else if (dir == 1) {
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d10f      	bne.n	800083c <motor_move+0x5a>
		HAL_GPIO_WritePin(mot->motor_B_dir_gpio_port, mot->motor_B_dir_pin,
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	6918      	ldr	r0, [r3, #16]
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	8a9b      	ldrh	r3, [r3, #20]
 8000824:	2201      	movs	r2, #1
 8000826:	4619      	mov	r1, r3
 8000828:	f000 fc30 	bl	800108c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mot->motor_A_dir_gpio_port, mot->motor_A_dir_pin,
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	6898      	ldr	r0, [r3, #8]
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	899b      	ldrh	r3, [r3, #12]
 8000834:	2200      	movs	r2, #0
 8000836:	4619      	mov	r1, r3
 8000838:	f000 fc28 	bl	800108c <HAL_GPIO_WritePin>
}
 800083c:	bf00      	nop
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <motor_stop>:

/* Stop motor movement */
void motor_stop(struct motor *mot) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(mot->motor_B_dir_gpio_port, mot->motor_B_dir_pin, LOW);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6918      	ldr	r0, [r3, #16]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	8a9b      	ldrh	r3, [r3, #20]
 8000854:	2200      	movs	r2, #0
 8000856:	4619      	mov	r1, r3
 8000858:	f000 fc18 	bl	800108c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(mot->motor_A_dir_gpio_port, mot->motor_A_dir_pin, LOW);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6898      	ldr	r0, [r3, #8]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	899b      	ldrh	r3, [r3, #12]
 8000864:	2200      	movs	r2, #0
 8000866:	4619      	mov	r1, r3
 8000868:	f000 fc10 	bl	800108c <HAL_GPIO_WritePin>
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <HAL_MspInit+0x4c>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	4a0f      	ldr	r2, [pc, #60]	; (80008c0 <HAL_MspInit+0x4c>)
 8000884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000888:	6453      	str	r3, [r2, #68]	; 0x44
 800088a:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <HAL_MspInit+0x4c>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <HAL_MspInit+0x4c>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <HAL_MspInit+0x4c>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a4:	6413      	str	r3, [r2, #64]	; 0x40
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_MspInit+0x4c>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800

080008c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	; 0x28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a19      	ldr	r2, [pc, #100]	; (8000948 <HAL_I2C_MspInit+0x84>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d12b      	bne.n	800093e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <HAL_I2C_MspInit+0x88>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a17      	ldr	r2, [pc, #92]	; (800094c <HAL_I2C_MspInit+0x88>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <HAL_I2C_MspInit+0x88>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000902:	23c0      	movs	r3, #192	; 0xc0
 8000904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000906:	2312      	movs	r3, #18
 8000908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090e:	2303      	movs	r3, #3
 8000910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000912:	2304      	movs	r3, #4
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	4619      	mov	r1, r3
 800091c:	480c      	ldr	r0, [pc, #48]	; (8000950 <HAL_I2C_MspInit+0x8c>)
 800091e:	f000 fa31 	bl	8000d84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <HAL_I2C_MspInit+0x88>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	4a08      	ldr	r2, [pc, #32]	; (800094c <HAL_I2C_MspInit+0x88>)
 800092c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000930:	6413      	str	r3, [r2, #64]	; 0x40
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <HAL_I2C_MspInit+0x88>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800093e:	bf00      	nop
 8000940:	3728      	adds	r7, #40	; 0x28
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40005400 	.word	0x40005400
 800094c:	40023800 	.word	0x40023800
 8000950:	40020400 	.word	0x40020400

08000954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <NMI_Handler+0x4>

0800095a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <HardFault_Handler+0x4>

08000960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <MemManage_Handler+0x4>

08000966 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <BusFault_Handler+0x4>

0800096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <UsageFault_Handler+0x4>

08000972 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a0:	f000 f89a 	bl	8000ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009ac:	4802      	ldr	r0, [pc, #8]	; (80009b8 <OTG_FS_IRQHandler+0x10>)
 80009ae:	f000 fe35 	bl	800161c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200016b0 	.word	0x200016b0

080009bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <SystemInit+0x20>)
 80009c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c6:	4a05      	ldr	r2, [pc, #20]	; (80009dc <SystemInit+0x20>)
 80009c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009e4:	480d      	ldr	r0, [pc, #52]	; (8000a1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009e6:	490e      	ldr	r1, [pc, #56]	; (8000a20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009e8:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ec:	e002      	b.n	80009f4 <LoopCopyDataInit>

080009ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f2:	3304      	adds	r3, #4

080009f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f8:	d3f9      	bcc.n	80009ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fa:	4a0b      	ldr	r2, [pc, #44]	; (8000a28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009fc:	4c0b      	ldr	r4, [pc, #44]	; (8000a2c <LoopFillZerobss+0x26>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a00:	e001      	b.n	8000a06 <LoopFillZerobss>

08000a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a04:	3204      	adds	r2, #4

08000a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a08:	d3fb      	bcc.n	8000a02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a0a:	f7ff ffd7 	bl	80009bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a0e:	f006 fc3b 	bl	8007288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a12:	f7ff fd61 	bl	80004d8 <main>
  bx  lr    
 8000a16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a18:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a20:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8000a24:	08007368 	.word	0x08007368
  ldr r2, =_sbss
 8000a28:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8000a2c:	20001ddc 	.word	0x20001ddc

08000a30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a30:	e7fe      	b.n	8000a30 <ADC_IRQHandler>
	...

08000a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a38:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <HAL_Init+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	; (8000a74 <HAL_Init+0x40>)
 8000a3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a44:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <HAL_Init+0x40>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <HAL_Init+0x40>)
 8000a4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <HAL_Init+0x40>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a07      	ldr	r2, [pc, #28]	; (8000a74 <HAL_Init+0x40>)
 8000a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f000 f94f 	bl	8000d00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a62:	200f      	movs	r0, #15
 8000a64:	f000 f808 	bl	8000a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a68:	f7ff ff04 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023c00 	.word	0x40023c00

08000a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <HAL_InitTick+0x54>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_InitTick+0x58>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 f967 	bl	8000d6a <HAL_SYSTICK_Config>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e00e      	b.n	8000ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b0f      	cmp	r3, #15
 8000aaa:	d80a      	bhi.n	8000ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aac:	2200      	movs	r2, #0
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ab4:	f000 f92f 	bl	8000d16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab8:	4a06      	ldr	r2, [pc, #24]	; (8000ad4 <HAL_InitTick+0x5c>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e000      	b.n	8000ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000060 	.word	0x20000060
 8000ad0:	20000068 	.word	0x20000068
 8000ad4:	20000064 	.word	0x20000064

08000ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_IncTick+0x20>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_IncTick+0x24>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	4a04      	ldr	r2, [pc, #16]	; (8000afc <HAL_IncTick+0x24>)
 8000aea:	6013      	str	r3, [r2, #0]
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000068 	.word	0x20000068
 8000afc:	200001cc 	.word	0x200001cc

08000b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return uwTick;
 8000b04:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <HAL_GetTick+0x14>)
 8000b06:	681b      	ldr	r3, [r3, #0]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	200001cc 	.word	0x200001cc

08000b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b20:	f7ff ffee 	bl	8000b00 <HAL_GetTick>
 8000b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b30:	d005      	beq.n	8000b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_Delay+0x44>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b3e:	bf00      	nop
 8000b40:	f7ff ffde 	bl	8000b00 <HAL_GetTick>
 8000b44:	4602      	mov	r2, r0
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d8f7      	bhi.n	8000b40 <HAL_Delay+0x28>
  {
  }
}
 8000b50:	bf00      	nop
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000068 	.word	0x20000068

08000b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b92:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	60d3      	str	r3, [r2, #12]
}
 8000b98:	bf00      	nop
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bac:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	f003 0307 	and.w	r3, r3, #7
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	db0b      	blt.n	8000bee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	f003 021f 	and.w	r2, r3, #31
 8000bdc:	4907      	ldr	r1, [pc, #28]	; (8000bfc <__NVIC_EnableIRQ+0x38>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	095b      	lsrs	r3, r3, #5
 8000be4:	2001      	movs	r0, #1
 8000be6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000e100 	.word	0xe000e100

08000c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db0a      	blt.n	8000c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	490c      	ldr	r1, [pc, #48]	; (8000c4c <__NVIC_SetPriority+0x4c>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	0112      	lsls	r2, r2, #4
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	440b      	add	r3, r1
 8000c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c28:	e00a      	b.n	8000c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4908      	ldr	r1, [pc, #32]	; (8000c50 <__NVIC_SetPriority+0x50>)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	3b04      	subs	r3, #4
 8000c38:	0112      	lsls	r2, r2, #4
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	761a      	strb	r2, [r3, #24]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000e100 	.word	0xe000e100
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	; 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f1c3 0307 	rsb	r3, r3, #7
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	bf28      	it	cs
 8000c72:	2304      	movcs	r3, #4
 8000c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d902      	bls.n	8000c84 <NVIC_EncodePriority+0x30>
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3b03      	subs	r3, #3
 8000c82:	e000      	b.n	8000c86 <NVIC_EncodePriority+0x32>
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43da      	mvns	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	401a      	ands	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	43d9      	mvns	r1, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	4313      	orrs	r3, r2
         );
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3724      	adds	r7, #36	; 0x24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
	...

08000cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ccc:	d301      	bcc.n	8000cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e00f      	b.n	8000cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <SysTick_Config+0x40>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cda:	210f      	movs	r1, #15
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ce0:	f7ff ff8e 	bl	8000c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <SysTick_Config+0x40>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cea:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <SysTick_Config+0x40>)
 8000cec:	2207      	movs	r2, #7
 8000cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	e000e010 	.word	0xe000e010

08000d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff ff29 	bl	8000b60 <__NVIC_SetPriorityGrouping>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b086      	sub	sp, #24
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
 8000d22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d28:	f7ff ff3e 	bl	8000ba8 <__NVIC_GetPriorityGrouping>
 8000d2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	68b9      	ldr	r1, [r7, #8]
 8000d32:	6978      	ldr	r0, [r7, #20]
 8000d34:	f7ff ff8e 	bl	8000c54 <NVIC_EncodePriority>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3e:	4611      	mov	r1, r2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff5d 	bl	8000c00 <__NVIC_SetPriority>
}
 8000d46:	bf00      	nop
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	4603      	mov	r3, r0
 8000d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff31 	bl	8000bc4 <__NVIC_EnableIRQ>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ffa2 	bl	8000cbc <SysTick_Config>
 8000d78:	4603      	mov	r3, r0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b089      	sub	sp, #36	; 0x24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
 8000d9e:	e159      	b.n	8001054 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000da0:	2201      	movs	r2, #1
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	f040 8148 	bne.w	800104e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 0303 	and.w	r3, r3, #3
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d005      	beq.n	8000dd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d130      	bne.n	8000e38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	2203      	movs	r2, #3
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	68da      	ldr	r2, [r3, #12]
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	091b      	lsrs	r3, r3, #4
 8000e22:	f003 0201 	and.w	r2, r3, #1
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d017      	beq.n	8000e74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d123      	bne.n	8000ec8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	08da      	lsrs	r2, r3, #3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3208      	adds	r2, #8
 8000e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	f003 0307 	and.w	r3, r3, #7
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	220f      	movs	r2, #15
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	691a      	ldr	r2, [r3, #16]
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	08da      	lsrs	r2, r3, #3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3208      	adds	r2, #8
 8000ec2:	69b9      	ldr	r1, [r7, #24]
 8000ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0203 	and.w	r2, r3, #3
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f000 80a2 	beq.w	800104e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	4b57      	ldr	r3, [pc, #348]	; (800106c <HAL_GPIO_Init+0x2e8>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	4a56      	ldr	r2, [pc, #344]	; (800106c <HAL_GPIO_Init+0x2e8>)
 8000f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f18:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1a:	4b54      	ldr	r3, [pc, #336]	; (800106c <HAL_GPIO_Init+0x2e8>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f26:	4a52      	ldr	r2, [pc, #328]	; (8001070 <HAL_GPIO_Init+0x2ec>)
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	089b      	lsrs	r3, r3, #2
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	220f      	movs	r2, #15
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a49      	ldr	r2, [pc, #292]	; (8001074 <HAL_GPIO_Init+0x2f0>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d019      	beq.n	8000f86 <HAL_GPIO_Init+0x202>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a48      	ldr	r2, [pc, #288]	; (8001078 <HAL_GPIO_Init+0x2f4>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d013      	beq.n	8000f82 <HAL_GPIO_Init+0x1fe>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a47      	ldr	r2, [pc, #284]	; (800107c <HAL_GPIO_Init+0x2f8>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d00d      	beq.n	8000f7e <HAL_GPIO_Init+0x1fa>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a46      	ldr	r2, [pc, #280]	; (8001080 <HAL_GPIO_Init+0x2fc>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d007      	beq.n	8000f7a <HAL_GPIO_Init+0x1f6>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a45      	ldr	r2, [pc, #276]	; (8001084 <HAL_GPIO_Init+0x300>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d101      	bne.n	8000f76 <HAL_GPIO_Init+0x1f2>
 8000f72:	2304      	movs	r3, #4
 8000f74:	e008      	b.n	8000f88 <HAL_GPIO_Init+0x204>
 8000f76:	2307      	movs	r3, #7
 8000f78:	e006      	b.n	8000f88 <HAL_GPIO_Init+0x204>
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e004      	b.n	8000f88 <HAL_GPIO_Init+0x204>
 8000f7e:	2302      	movs	r3, #2
 8000f80:	e002      	b.n	8000f88 <HAL_GPIO_Init+0x204>
 8000f82:	2301      	movs	r3, #1
 8000f84:	e000      	b.n	8000f88 <HAL_GPIO_Init+0x204>
 8000f86:	2300      	movs	r3, #0
 8000f88:	69fa      	ldr	r2, [r7, #28]
 8000f8a:	f002 0203 	and.w	r2, r2, #3
 8000f8e:	0092      	lsls	r2, r2, #2
 8000f90:	4093      	lsls	r3, r2
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f98:	4935      	ldr	r1, [pc, #212]	; (8001070 <HAL_GPIO_Init+0x2ec>)
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	089b      	lsrs	r3, r3, #2
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fa6:	4b38      	ldr	r3, [pc, #224]	; (8001088 <HAL_GPIO_Init+0x304>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fca:	4a2f      	ldr	r2, [pc, #188]	; (8001088 <HAL_GPIO_Init+0x304>)
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fd0:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <HAL_GPIO_Init+0x304>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ff4:	4a24      	ldr	r2, [pc, #144]	; (8001088 <HAL_GPIO_Init+0x304>)
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ffa:	4b23      	ldr	r3, [pc, #140]	; (8001088 <HAL_GPIO_Init+0x304>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	43db      	mvns	r3, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4013      	ands	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800101e:	4a1a      	ldr	r2, [pc, #104]	; (8001088 <HAL_GPIO_Init+0x304>)
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <HAL_GPIO_Init+0x304>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001048:	4a0f      	ldr	r2, [pc, #60]	; (8001088 <HAL_GPIO_Init+0x304>)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3301      	adds	r3, #1
 8001052:	61fb      	str	r3, [r7, #28]
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	2b0f      	cmp	r3, #15
 8001058:	f67f aea2 	bls.w	8000da0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3724      	adds	r7, #36	; 0x24
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800
 8001070:	40013800 	.word	0x40013800
 8001074:	40020000 	.word	0x40020000
 8001078:	40020400 	.word	0x40020400
 800107c:	40020800 	.word	0x40020800
 8001080:	40020c00 	.word	0x40020c00
 8001084:	40021000 	.word	0x40021000
 8001088:	40013c00 	.word	0x40013c00

0800108c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
 8001098:	4613      	mov	r3, r2
 800109a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800109c:	787b      	ldrb	r3, [r7, #1]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010a2:	887a      	ldrh	r2, [r7, #2]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010a8:	e003      	b.n	80010b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010aa:	887b      	ldrh	r3, [r7, #2]
 80010ac:	041a      	lsls	r2, r3, #16
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	619a      	str	r2, [r3, #24]
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010be:	b480      	push	{r7}
 80010c0:	b085      	sub	sp, #20
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	460b      	mov	r3, r1
 80010c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010d0:	887a      	ldrh	r2, [r7, #2]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4013      	ands	r3, r2
 80010d6:	041a      	lsls	r2, r3, #16
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	43d9      	mvns	r1, r3
 80010dc:	887b      	ldrh	r3, [r7, #2]
 80010de:	400b      	ands	r3, r1
 80010e0:	431a      	orrs	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	619a      	str	r2, [r3, #24]
}
 80010e6:	bf00      	nop
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e12b      	b.n	800135e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	d106      	bne.n	8001120 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff fbd2 	bl	80008c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2224      	movs	r2, #36	; 0x24
 8001124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 0201 	bic.w	r2, r2, #1
 8001136:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001146:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001156:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001158:	f001 ffbe 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 800115c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	4a81      	ldr	r2, [pc, #516]	; (8001368 <HAL_I2C_Init+0x274>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d807      	bhi.n	8001178 <HAL_I2C_Init+0x84>
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4a80      	ldr	r2, [pc, #512]	; (800136c <HAL_I2C_Init+0x278>)
 800116c:	4293      	cmp	r3, r2
 800116e:	bf94      	ite	ls
 8001170:	2301      	movls	r3, #1
 8001172:	2300      	movhi	r3, #0
 8001174:	b2db      	uxtb	r3, r3
 8001176:	e006      	b.n	8001186 <HAL_I2C_Init+0x92>
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4a7d      	ldr	r2, [pc, #500]	; (8001370 <HAL_I2C_Init+0x27c>)
 800117c:	4293      	cmp	r3, r2
 800117e:	bf94      	ite	ls
 8001180:	2301      	movls	r3, #1
 8001182:	2300      	movhi	r3, #0
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e0e7      	b.n	800135e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4a78      	ldr	r2, [pc, #480]	; (8001374 <HAL_I2C_Init+0x280>)
 8001192:	fba2 2303 	umull	r2, r3, r2, r3
 8001196:	0c9b      	lsrs	r3, r3, #18
 8001198:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	68ba      	ldr	r2, [r7, #8]
 80011aa:	430a      	orrs	r2, r1
 80011ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	4a6a      	ldr	r2, [pc, #424]	; (8001368 <HAL_I2C_Init+0x274>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d802      	bhi.n	80011c8 <HAL_I2C_Init+0xd4>
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	3301      	adds	r3, #1
 80011c6:	e009      	b.n	80011dc <HAL_I2C_Init+0xe8>
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011ce:	fb02 f303 	mul.w	r3, r2, r3
 80011d2:	4a69      	ldr	r2, [pc, #420]	; (8001378 <HAL_I2C_Init+0x284>)
 80011d4:	fba2 2303 	umull	r2, r3, r2, r3
 80011d8:	099b      	lsrs	r3, r3, #6
 80011da:	3301      	adds	r3, #1
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	6812      	ldr	r2, [r2, #0]
 80011e0:	430b      	orrs	r3, r1
 80011e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80011ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	495c      	ldr	r1, [pc, #368]	; (8001368 <HAL_I2C_Init+0x274>)
 80011f8:	428b      	cmp	r3, r1
 80011fa:	d819      	bhi.n	8001230 <HAL_I2C_Init+0x13c>
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	1e59      	subs	r1, r3, #1
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	fbb1 f3f3 	udiv	r3, r1, r3
 800120a:	1c59      	adds	r1, r3, #1
 800120c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001210:	400b      	ands	r3, r1
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00a      	beq.n	800122c <HAL_I2C_Init+0x138>
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	1e59      	subs	r1, r3, #1
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fbb1 f3f3 	udiv	r3, r1, r3
 8001224:	3301      	adds	r3, #1
 8001226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800122a:	e051      	b.n	80012d0 <HAL_I2C_Init+0x1dc>
 800122c:	2304      	movs	r3, #4
 800122e:	e04f      	b.n	80012d0 <HAL_I2C_Init+0x1dc>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d111      	bne.n	800125c <HAL_I2C_Init+0x168>
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	1e58      	subs	r0, r3, #1
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6859      	ldr	r1, [r3, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	440b      	add	r3, r1
 8001246:	fbb0 f3f3 	udiv	r3, r0, r3
 800124a:	3301      	adds	r3, #1
 800124c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001250:	2b00      	cmp	r3, #0
 8001252:	bf0c      	ite	eq
 8001254:	2301      	moveq	r3, #1
 8001256:	2300      	movne	r3, #0
 8001258:	b2db      	uxtb	r3, r3
 800125a:	e012      	b.n	8001282 <HAL_I2C_Init+0x18e>
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	1e58      	subs	r0, r3, #1
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6859      	ldr	r1, [r3, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	440b      	add	r3, r1
 800126a:	0099      	lsls	r1, r3, #2
 800126c:	440b      	add	r3, r1
 800126e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001272:	3301      	adds	r3, #1
 8001274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001278:	2b00      	cmp	r3, #0
 800127a:	bf0c      	ite	eq
 800127c:	2301      	moveq	r3, #1
 800127e:	2300      	movne	r3, #0
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_I2C_Init+0x196>
 8001286:	2301      	movs	r3, #1
 8001288:	e022      	b.n	80012d0 <HAL_I2C_Init+0x1dc>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10e      	bne.n	80012b0 <HAL_I2C_Init+0x1bc>
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	1e58      	subs	r0, r3, #1
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6859      	ldr	r1, [r3, #4]
 800129a:	460b      	mov	r3, r1
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	440b      	add	r3, r1
 80012a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80012a4:	3301      	adds	r3, #1
 80012a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ae:	e00f      	b.n	80012d0 <HAL_I2C_Init+0x1dc>
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	1e58      	subs	r0, r3, #1
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6859      	ldr	r1, [r3, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	440b      	add	r3, r1
 80012be:	0099      	lsls	r1, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80012c6:	3301      	adds	r3, #1
 80012c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	6809      	ldr	r1, [r1, #0]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69da      	ldr	r2, [r3, #28]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a1b      	ldr	r3, [r3, #32]
 80012ea:	431a      	orrs	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80012fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	6911      	ldr	r1, [r2, #16]
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	68d2      	ldr	r2, [r2, #12]
 800130a:	4311      	orrs	r1, r2
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	6812      	ldr	r2, [r2, #0]
 8001310:	430b      	orrs	r3, r1
 8001312:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	695a      	ldr	r2, [r3, #20]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	431a      	orrs	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	430a      	orrs	r2, r1
 800132e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f042 0201 	orr.w	r2, r2, #1
 800133e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2220      	movs	r2, #32
 800134a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	000186a0 	.word	0x000186a0
 800136c:	001e847f 	.word	0x001e847f
 8001370:	003d08ff 	.word	0x003d08ff
 8001374:	431bde83 	.word	0x431bde83
 8001378:	10624dd3 	.word	0x10624dd3

0800137c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800137c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137e:	b08f      	sub	sp, #60	; 0x3c
 8001380:	af0a      	add	r7, sp, #40	; 0x28
 8001382:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e10f      	b.n	80015ae <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b00      	cmp	r3, #0
 800139e:	d106      	bne.n	80013ae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f005 fc59 	bl	8006c60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2203      	movs	r2, #3
 80013b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d102      	bne.n	80013c8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f001 ffac 	bl	800332a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	687e      	ldr	r6, [r7, #4]
 80013da:	466d      	mov	r5, sp
 80013dc:	f106 0410 	add.w	r4, r6, #16
 80013e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80013f0:	1d33      	adds	r3, r6, #4
 80013f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013f4:	6838      	ldr	r0, [r7, #0]
 80013f6:	f001 fe83 	bl	8003100 <USB_CoreInit>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d005      	beq.n	800140c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2202      	movs	r2, #2
 8001404:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e0d0      	b.n	80015ae <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f001 ff9a 	bl	800334c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001418:	2300      	movs	r3, #0
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	e04a      	b.n	80014b4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800141e:	7bfa      	ldrb	r2, [r7, #15]
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	4613      	mov	r3, r2
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	4413      	add	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	440b      	add	r3, r1
 800142c:	333d      	adds	r3, #61	; 0x3d
 800142e:	2201      	movs	r2, #1
 8001430:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001432:	7bfa      	ldrb	r2, [r7, #15]
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	4613      	mov	r3, r2
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	4413      	add	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	333c      	adds	r3, #60	; 0x3c
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001446:	7bfa      	ldrb	r2, [r7, #15]
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	b298      	uxth	r0, r3
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	4613      	mov	r3, r2
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	4413      	add	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	440b      	add	r3, r1
 8001458:	3344      	adds	r3, #68	; 0x44
 800145a:	4602      	mov	r2, r0
 800145c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800145e:	7bfa      	ldrb	r2, [r7, #15]
 8001460:	6879      	ldr	r1, [r7, #4]
 8001462:	4613      	mov	r3, r2
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4413      	add	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	440b      	add	r3, r1
 800146c:	3340      	adds	r3, #64	; 0x40
 800146e:	2200      	movs	r2, #0
 8001470:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001472:	7bfa      	ldrb	r2, [r7, #15]
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	4613      	mov	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	4413      	add	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	440b      	add	r3, r1
 8001480:	3348      	adds	r3, #72	; 0x48
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001486:	7bfa      	ldrb	r2, [r7, #15]
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	4413      	add	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	440b      	add	r3, r1
 8001494:	334c      	adds	r3, #76	; 0x4c
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800149a:	7bfa      	ldrb	r2, [r7, #15]
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	4413      	add	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	440b      	add	r3, r1
 80014a8:	3354      	adds	r3, #84	; 0x54
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	3301      	adds	r3, #1
 80014b2:	73fb      	strb	r3, [r7, #15]
 80014b4:	7bfa      	ldrb	r2, [r7, #15]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d3af      	bcc.n	800141e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014be:	2300      	movs	r3, #0
 80014c0:	73fb      	strb	r3, [r7, #15]
 80014c2:	e044      	b.n	800154e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014c4:	7bfa      	ldrb	r2, [r7, #15]
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	4413      	add	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014da:	7bfa      	ldrb	r2, [r7, #15]
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	4413      	add	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	440b      	add	r3, r1
 80014e8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80014ec:	7bfa      	ldrb	r2, [r7, #15]
 80014ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	4413      	add	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001506:	7bfa      	ldrb	r2, [r7, #15]
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	4413      	add	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	440b      	add	r3, r1
 8001514:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800151c:	7bfa      	ldrb	r2, [r7, #15]
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	4613      	mov	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	4413      	add	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001532:	7bfa      	ldrb	r2, [r7, #15]
 8001534:	6879      	ldr	r1, [r7, #4]
 8001536:	4613      	mov	r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	4413      	add	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	440b      	add	r3, r1
 8001540:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001548:	7bfb      	ldrb	r3, [r7, #15]
 800154a:	3301      	adds	r3, #1
 800154c:	73fb      	strb	r3, [r7, #15]
 800154e:	7bfa      	ldrb	r2, [r7, #15]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	429a      	cmp	r2, r3
 8001556:	d3b5      	bcc.n	80014c4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	603b      	str	r3, [r7, #0]
 800155e:	687e      	ldr	r6, [r7, #4]
 8001560:	466d      	mov	r5, sp
 8001562:	f106 0410 	add.w	r4, r6, #16
 8001566:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001568:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800156a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800156c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800156e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001572:	e885 0003 	stmia.w	r5, {r0, r1}
 8001576:	1d33      	adds	r3, r6, #4
 8001578:	cb0e      	ldmia	r3, {r1, r2, r3}
 800157a:	6838      	ldr	r0, [r7, #0]
 800157c:	f001 ff32 	bl	80033e4 <USB_DevInit>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d005      	beq.n	8001592 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2202      	movs	r2, #2
 800158a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e00d      	b.n	80015ae <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2201      	movs	r2, #1
 800159e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f003 f881 	bl	80046ae <USB_DevDisconnect>

  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015b6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b084      	sub	sp, #16
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d101      	bne.n	80015d2 <HAL_PCD_Start+0x1c>
 80015ce:	2302      	movs	r3, #2
 80015d0:	e020      	b.n	8001614 <HAL_PCD_Start+0x5e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d109      	bne.n	80015f6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d005      	beq.n	80015f6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f001 fe84 	bl	8003308 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f003 f831 	bl	800466c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b08d      	sub	sp, #52	; 0x34
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800162a:	6a3b      	ldr	r3, [r7, #32]
 800162c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f003 f8ef 	bl	8004816 <USB_GetMode>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	f040 848a 	bne.w	8001f54 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f003 f853 	bl	80046f0 <USB_ReadInterrupts>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 8480 	beq.w	8001f52 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	0a1b      	lsrs	r3, r3, #8
 800165c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f003 f840 	bl	80046f0 <USB_ReadInterrupts>
 8001670:	4603      	mov	r3, r0
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b02      	cmp	r3, #2
 8001678:	d107      	bne.n	800168a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	695a      	ldr	r2, [r3, #20]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f002 0202 	and.w	r2, r2, #2
 8001688:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f003 f82e 	bl	80046f0 <USB_ReadInterrupts>
 8001694:	4603      	mov	r3, r0
 8001696:	f003 0310 	and.w	r3, r3, #16
 800169a:	2b10      	cmp	r3, #16
 800169c:	d161      	bne.n	8001762 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	699a      	ldr	r2, [r3, #24]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0210 	bic.w	r2, r2, #16
 80016ac:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80016ae:	6a3b      	ldr	r3, [r7, #32]
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	f003 020f 	and.w	r2, r3, #15
 80016ba:	4613      	mov	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	4413      	add	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	3304      	adds	r3, #4
 80016cc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	0c5b      	lsrs	r3, r3, #17
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d124      	bne.n	8001724 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d035      	beq.n	8001752 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	091b      	lsrs	r3, r3, #4
 80016ee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	461a      	mov	r2, r3
 80016f8:	6a38      	ldr	r0, [r7, #32]
 80016fa:	f002 fe65 	bl	80043c8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	691a      	ldr	r2, [r3, #16]
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	091b      	lsrs	r3, r3, #4
 8001706:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800170a:	441a      	add	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	6a1a      	ldr	r2, [r3, #32]
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	091b      	lsrs	r3, r3, #4
 8001718:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800171c:	441a      	add	r2, r3
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	621a      	str	r2, [r3, #32]
 8001722:	e016      	b.n	8001752 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	0c5b      	lsrs	r3, r3, #17
 8001728:	f003 030f 	and.w	r3, r3, #15
 800172c:	2b06      	cmp	r3, #6
 800172e:	d110      	bne.n	8001752 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001736:	2208      	movs	r2, #8
 8001738:	4619      	mov	r1, r3
 800173a:	6a38      	ldr	r0, [r7, #32]
 800173c:	f002 fe44 	bl	80043c8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	6a1a      	ldr	r2, [r3, #32]
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	091b      	lsrs	r3, r3, #4
 8001748:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800174c:	441a      	add	r2, r3
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	699a      	ldr	r2, [r3, #24]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f042 0210 	orr.w	r2, r2, #16
 8001760:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f002 ffc2 	bl	80046f0 <USB_ReadInterrupts>
 800176c:	4603      	mov	r3, r0
 800176e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001772:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001776:	f040 80a7 	bne.w	80018c8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800177a:	2300      	movs	r3, #0
 800177c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f002 ffc7 	bl	8004716 <USB_ReadDevAllOutEpInterrupt>
 8001788:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800178a:	e099      	b.n	80018c0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800178c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 808e 	beq.w	80018b4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	4611      	mov	r1, r2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f002 ffeb 	bl	800477e <USB_ReadDevOutEPInterrupt>
 80017a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00c      	beq.n	80017ce <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	015a      	lsls	r2, r3, #5
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	4413      	add	r3, r2
 80017bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017c0:	461a      	mov	r2, r3
 80017c2:	2301      	movs	r3, #1
 80017c4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80017c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 fec3 	bl	8002554 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	f003 0308 	and.w	r3, r3, #8
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00c      	beq.n	80017f2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	015a      	lsls	r2, r3, #5
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	4413      	add	r3, r2
 80017e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017e4:	461a      	mov	r2, r3
 80017e6:	2308      	movs	r3, #8
 80017e8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80017ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 ff99 	bl	8002724 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	f003 0310 	and.w	r3, r3, #16
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d008      	beq.n	800180e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	015a      	lsls	r2, r3, #5
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	4413      	add	r3, r2
 8001804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001808:	461a      	mov	r2, r3
 800180a:	2310      	movs	r3, #16
 800180c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d030      	beq.n	800187a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001818:	6a3b      	ldr	r3, [r7, #32]
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001820:	2b80      	cmp	r3, #128	; 0x80
 8001822:	d109      	bne.n	8001838 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	69fa      	ldr	r2, [r7, #28]
 800182e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001832:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001836:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800183a:	4613      	mov	r3, r2
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	4413      	add	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	3304      	adds	r3, #4
 800184c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	78db      	ldrb	r3, [r3, #3]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d108      	bne.n	8001868 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	2200      	movs	r2, #0
 800185a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	b2db      	uxtb	r3, r3
 8001860:	4619      	mov	r1, r3
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f005 fb02 	bl	8006e6c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	015a      	lsls	r2, r3, #5
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	4413      	add	r3, r2
 8001870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001874:	461a      	mov	r2, r3
 8001876:	2302      	movs	r3, #2
 8001878:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	f003 0320 	and.w	r3, r3, #32
 8001880:	2b00      	cmp	r3, #0
 8001882:	d008      	beq.n	8001896 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	015a      	lsls	r2, r3, #5
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	4413      	add	r3, r2
 800188c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001890:	461a      	mov	r2, r3
 8001892:	2320      	movs	r3, #32
 8001894:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d009      	beq.n	80018b4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	015a      	lsls	r2, r3, #5
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	4413      	add	r3, r2
 80018a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018ac:	461a      	mov	r2, r3
 80018ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018b2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	3301      	adds	r3, #1
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80018ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018bc:	085b      	lsrs	r3, r3, #1
 80018be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80018c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f47f af62 	bne.w	800178c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f002 ff0f 	bl	80046f0 <USB_ReadInterrupts>
 80018d2:	4603      	mov	r3, r0
 80018d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80018dc:	f040 80db 	bne.w	8001a96 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f002 ff30 	bl	800474a <USB_ReadDevAllInEpInterrupt>
 80018ea:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80018f0:	e0cd      	b.n	8001a8e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80018f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 80c2 	beq.w	8001a82 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f002 ff56 	bl	80047ba <USB_ReadDevInEPInterrupt>
 800190e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b00      	cmp	r3, #0
 8001918:	d057      	beq.n	80019ca <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	f003 030f 	and.w	r3, r3, #15
 8001920:	2201      	movs	r2, #1
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800192e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	43db      	mvns	r3, r3
 8001934:	69f9      	ldr	r1, [r7, #28]
 8001936:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800193a:	4013      	ands	r3, r2
 800193c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	015a      	lsls	r2, r3, #5
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	4413      	add	r3, r2
 8001946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800194a:	461a      	mov	r2, r3
 800194c:	2301      	movs	r3, #1
 800194e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d132      	bne.n	80019be <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800195c:	4613      	mov	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	4413      	add	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	334c      	adds	r3, #76	; 0x4c
 8001968:	6819      	ldr	r1, [r3, #0]
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196e:	4613      	mov	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4413      	add	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4403      	add	r3, r0
 8001978:	3348      	adds	r3, #72	; 0x48
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4419      	add	r1, r3
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001982:	4613      	mov	r3, r2
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	4413      	add	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4403      	add	r3, r0
 800198c:	334c      	adds	r3, #76	; 0x4c
 800198e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	2b00      	cmp	r3, #0
 8001994:	d113      	bne.n	80019be <HAL_PCD_IRQHandler+0x3a2>
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800199a:	4613      	mov	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	4413      	add	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	440b      	add	r3, r1
 80019a4:	3354      	adds	r3, #84	; 0x54
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d108      	bne.n	80019be <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6818      	ldr	r0, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80019b6:	461a      	mov	r2, r3
 80019b8:	2101      	movs	r1, #1
 80019ba:	f002 ff5d 	bl	8004878 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	4619      	mov	r1, r3
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f005 f9cc 	bl	8006d62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	f003 0308 	and.w	r3, r3, #8
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d008      	beq.n	80019e6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	015a      	lsls	r2, r3, #5
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	4413      	add	r3, r2
 80019dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019e0:	461a      	mov	r2, r3
 80019e2:	2308      	movs	r3, #8
 80019e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	f003 0310 	and.w	r3, r3, #16
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d008      	beq.n	8001a02 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	015a      	lsls	r2, r3, #5
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	4413      	add	r3, r2
 80019f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019fc:	461a      	mov	r2, r3
 80019fe:	2310      	movs	r3, #16
 8001a00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d008      	beq.n	8001a1e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	015a      	lsls	r2, r3, #5
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	4413      	add	r3, r2
 8001a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a18:	461a      	mov	r2, r3
 8001a1a:	2340      	movs	r3, #64	; 0x40
 8001a1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d023      	beq.n	8001a70 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001a28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a2a:	6a38      	ldr	r0, [r7, #32]
 8001a2c:	f001 fe3e 	bl	80036ac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a32:	4613      	mov	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	4413      	add	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	3338      	adds	r3, #56	; 0x38
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	4413      	add	r3, r2
 8001a40:	3304      	adds	r3, #4
 8001a42:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	78db      	ldrb	r3, [r3, #3]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d108      	bne.n	8001a5e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	4619      	mov	r1, r3
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f005 fa19 	bl	8006e90 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	015a      	lsls	r2, r3, #5
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	4413      	add	r3, r2
 8001a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001a7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 fcdb 	bl	8002438 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	3301      	adds	r3, #1
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8a:	085b      	lsrs	r3, r3, #1
 8001a8c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f47f af2e 	bne.w	80018f2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f002 fe28 	bl	80046f0 <USB_ReadInterrupts>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001aa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001aaa:	d122      	bne.n	8001af2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	69fa      	ldr	r2, [r7, #28]
 8001ab6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001aba:	f023 0301 	bic.w	r3, r3, #1
 8001abe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d108      	bne.n	8001adc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 fec3 	bl	8002860 <HAL_PCDEx_LPM_Callback>
 8001ada:	e002      	b.n	8001ae2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f005 f9b7 	bl	8006e50 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	695a      	ldr	r2, [r3, #20]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001af0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f002 fdfa 	bl	80046f0 <USB_ReadInterrupts>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b06:	d112      	bne.n	8001b2e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d102      	bne.n	8001b1e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f005 f973 	bl	8006e04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	695a      	ldr	r2, [r3, #20]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001b2c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f002 fddc 	bl	80046f0 <USB_ReadInterrupts>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b42:	f040 80b7 	bne.w	8001cb4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	69fa      	ldr	r2, [r7, #28]
 8001b50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b54:	f023 0301 	bic.w	r3, r3, #1
 8001b58:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2110      	movs	r1, #16
 8001b60:	4618      	mov	r0, r3
 8001b62:	f001 fda3 	bl	80036ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b66:	2300      	movs	r3, #0
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b6a:	e046      	b.n	8001bfa <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b6e:	015a      	lsls	r2, r3, #5
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	4413      	add	r3, r2
 8001b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b78:	461a      	mov	r2, r3
 8001b7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b7e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b82:	015a      	lsls	r2, r3, #5
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	4413      	add	r3, r2
 8001b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b90:	0151      	lsls	r1, r2, #5
 8001b92:	69fa      	ldr	r2, [r7, #28]
 8001b94:	440a      	add	r2, r1
 8001b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b9e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba2:	015a      	lsls	r2, r3, #5
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bac:	461a      	mov	r2, r3
 8001bae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001bb2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb6:	015a      	lsls	r2, r3, #5
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	4413      	add	r3, r2
 8001bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bc4:	0151      	lsls	r1, r2, #5
 8001bc6:	69fa      	ldr	r2, [r7, #28]
 8001bc8:	440a      	add	r2, r1
 8001bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001bce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001bd2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd6:	015a      	lsls	r2, r3, #5
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	4413      	add	r3, r2
 8001bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001be4:	0151      	lsls	r1, r2, #5
 8001be6:	69fa      	ldr	r2, [r7, #28]
 8001be8:	440a      	add	r2, r1
 8001bea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001bee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001bf2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d3b3      	bcc.n	8001b6c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	69fa      	ldr	r2, [r7, #28]
 8001c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c12:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c16:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d016      	beq.n	8001c4e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c2a:	69fa      	ldr	r2, [r7, #28]
 8001c2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c30:	f043 030b 	orr.w	r3, r3, #11
 8001c34:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c40:	69fa      	ldr	r2, [r7, #28]
 8001c42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c46:	f043 030b 	orr.w	r3, r3, #11
 8001c4a:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4c:	e015      	b.n	8001c7a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	69fa      	ldr	r2, [r7, #28]
 8001c58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c60:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001c64:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	69fa      	ldr	r2, [r7, #28]
 8001c70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c74:	f043 030b 	orr.w	r3, r3, #11
 8001c78:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	69fa      	ldr	r2, [r7, #28]
 8001c84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c88:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c8c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6818      	ldr	r0, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	f002 fdea 	bl	8004878 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	695a      	ldr	r2, [r3, #20]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001cb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f002 fd19 	bl	80046f0 <USB_ReadInterrupts>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cc8:	d124      	bne.n	8001d14 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f002 fdaf 	bl	8004832 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f001 fd64 	bl	80037a6 <USB_GetDevSpeed>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681c      	ldr	r4, [r3, #0]
 8001cea:	f001 f9e9 	bl	80030c0 <HAL_RCC_GetHCLKFreq>
 8001cee:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	f001 fa63 	bl	80031c4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f005 f857 	bl	8006db2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	695a      	ldr	r2, [r3, #20]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d12:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f002 fce9 	bl	80046f0 <USB_ReadInterrupts>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d10a      	bne.n	8001d3e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f005 f834 	bl	8006d96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	695a      	ldr	r2, [r3, #20]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f002 0208 	and.w	r2, r2, #8
 8001d3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f002 fcd4 	bl	80046f0 <USB_ReadInterrupts>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d4e:	2b80      	cmp	r3, #128	; 0x80
 8001d50:	d122      	bne.n	8001d98 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d5a:	6a3b      	ldr	r3, [r7, #32]
 8001d5c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d5e:	2301      	movs	r3, #1
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
 8001d62:	e014      	b.n	8001d8e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d68:	4613      	mov	r3, r2
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	4413      	add	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d105      	bne.n	8001d88 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	4619      	mov	r1, r3
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 fb27 	bl	80023d6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d3e5      	bcc.n	8001d64 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f002 fca7 	bl	80046f0 <USB_ReadInterrupts>
 8001da2:	4603      	mov	r3, r0
 8001da4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dac:	d13b      	bne.n	8001e26 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dae:	2301      	movs	r3, #1
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
 8001db2:	e02b      	b.n	8001e0c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	015a      	lsls	r2, r3, #5
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	4413      	add	r3, r2
 8001dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc8:	4613      	mov	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	3340      	adds	r3, #64	; 0x40
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d115      	bne.n	8001e06 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001dda:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	da12      	bge.n	8001e06 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de4:	4613      	mov	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4413      	add	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	333f      	adds	r3, #63	; 0x3f
 8001df0:	2201      	movs	r2, #1
 8001df2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	4619      	mov	r1, r3
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 fae8 	bl	80023d6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	3301      	adds	r3, #1
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d3ce      	bcc.n	8001db4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	695a      	ldr	r2, [r3, #20]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001e24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f002 fc60 	bl	80046f0 <USB_ReadInterrupts>
 8001e30:	4603      	mov	r3, r0
 8001e32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e3a:	d155      	bne.n	8001ee8 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e40:	e045      	b.n	8001ece <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	015a      	lsls	r2, r3, #5
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	4413      	add	r3, r2
 8001e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e56:	4613      	mov	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	4413      	add	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	440b      	add	r3, r1
 8001e60:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d12e      	bne.n	8001ec8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e6a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	da2b      	bge.n	8001ec8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001e7c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d121      	bne.n	8001ec8 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001e84:	6879      	ldr	r1, [r7, #4]
 8001e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e88:	4613      	mov	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001e96:	2201      	movs	r2, #1
 8001e98:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001e9a:	6a3b      	ldr	r3, [r7, #32]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001ea6:	6a3b      	ldr	r3, [r7, #32]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10a      	bne.n	8001ec8 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	69fa      	ldr	r2, [r7, #28]
 8001ebc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ec0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ec4:	6053      	str	r3, [r2, #4]
            break;
 8001ec6:	e007      	b.n	8001ed8 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	3301      	adds	r3, #1
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d3b4      	bcc.n	8001e42 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	695a      	ldr	r2, [r3, #20]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001ee6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f002 fbff 	bl	80046f0 <USB_ReadInterrupts>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001efc:	d10a      	bne.n	8001f14 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f004 ffd8 	bl	8006eb4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	695a      	ldr	r2, [r3, #20]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001f12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f002 fbe9 	bl	80046f0 <USB_ReadInterrupts>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	d115      	bne.n	8001f54 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	f003 0304 	and.w	r3, r3, #4
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d002      	beq.n	8001f40 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f004 ffc8 	bl	8006ed0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6859      	ldr	r1, [r3, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	605a      	str	r2, [r3, #4]
 8001f50:	e000      	b.n	8001f54 <HAL_PCD_IRQHandler+0x938>
      return;
 8001f52:	bf00      	nop
    }
  }
}
 8001f54:	3734      	adds	r7, #52	; 0x34
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd90      	pop	{r4, r7, pc}

08001f5a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	460b      	mov	r3, r1
 8001f64:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_PCD_SetAddress+0x1a>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e013      	b.n	8001f9c <HAL_PCD_SetAddress+0x42>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	78fa      	ldrb	r2, [r7, #3]
 8001f80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	78fa      	ldrb	r2, [r7, #3]
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f002 fb47 	bl	8004620 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	4608      	mov	r0, r1
 8001fae:	4611      	mov	r1, r2
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	70fb      	strb	r3, [r7, #3]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	803b      	strh	r3, [r7, #0]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	da0f      	bge.n	8001fea <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fca:	78fb      	ldrb	r3, [r7, #3]
 8001fcc:	f003 020f 	and.w	r2, r3, #15
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	3338      	adds	r3, #56	; 0x38
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	4413      	add	r3, r2
 8001fde:	3304      	adds	r3, #4
 8001fe0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	705a      	strb	r2, [r3, #1]
 8001fe8:	e00f      	b.n	800200a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fea:	78fb      	ldrb	r3, [r7, #3]
 8001fec:	f003 020f 	and.w	r2, r3, #15
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	4413      	add	r3, r2
 8002000:	3304      	adds	r3, #4
 8002002:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800200a:	78fb      	ldrb	r3, [r7, #3]
 800200c:	f003 030f 	and.w	r3, r3, #15
 8002010:	b2da      	uxtb	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002016:	883a      	ldrh	r2, [r7, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	78ba      	ldrb	r2, [r7, #2]
 8002020:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	785b      	ldrb	r3, [r3, #1]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d004      	beq.n	8002034 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	b29a      	uxth	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002034:	78bb      	ldrb	r3, [r7, #2]
 8002036:	2b02      	cmp	r3, #2
 8002038:	d102      	bne.n	8002040 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002046:	2b01      	cmp	r3, #1
 8002048:	d101      	bne.n	800204e <HAL_PCD_EP_Open+0xaa>
 800204a:	2302      	movs	r3, #2
 800204c:	e00e      	b.n	800206c <HAL_PCD_EP_Open+0xc8>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68f9      	ldr	r1, [r7, #12]
 800205c:	4618      	mov	r0, r3
 800205e:	f001 fbc7 	bl	80037f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800206a:	7afb      	ldrb	r3, [r7, #11]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002080:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002084:	2b00      	cmp	r3, #0
 8002086:	da0f      	bge.n	80020a8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	f003 020f 	and.w	r2, r3, #15
 800208e:	4613      	mov	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	4413      	add	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	3338      	adds	r3, #56	; 0x38
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	4413      	add	r3, r2
 800209c:	3304      	adds	r3, #4
 800209e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2201      	movs	r2, #1
 80020a4:	705a      	strb	r2, [r3, #1]
 80020a6:	e00f      	b.n	80020c8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	f003 020f 	and.w	r2, r3, #15
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	3304      	adds	r3, #4
 80020c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80020c8:	78fb      	ldrb	r3, [r7, #3]
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <HAL_PCD_EP_Close+0x6e>
 80020de:	2302      	movs	r3, #2
 80020e0:	e00e      	b.n	8002100 <HAL_PCD_EP_Close+0x8c>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68f9      	ldr	r1, [r7, #12]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f001 fc05 	bl	8003900 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	607a      	str	r2, [r7, #4]
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	460b      	mov	r3, r1
 8002116:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002118:	7afb      	ldrb	r3, [r7, #11]
 800211a:	f003 020f 	and.w	r2, r3, #15
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4413      	add	r3, r2
 800212e:	3304      	adds	r3, #4
 8002130:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2200      	movs	r2, #0
 8002142:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2200      	movs	r2, #0
 8002148:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800214a:	7afb      	ldrb	r3, [r7, #11]
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	b2da      	uxtb	r2, r3
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d102      	bne.n	8002164 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002164:	7afb      	ldrb	r3, [r7, #11]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	2b00      	cmp	r3, #0
 800216c:	d109      	bne.n	8002182 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6818      	ldr	r0, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	b2db      	uxtb	r3, r3
 8002178:	461a      	mov	r2, r3
 800217a:	6979      	ldr	r1, [r7, #20]
 800217c:	f001 fee4 	bl	8003f48 <USB_EP0StartXfer>
 8002180:	e008      	b.n	8002194 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	461a      	mov	r2, r3
 800218e:	6979      	ldr	r1, [r7, #20]
 8002190:	f001 fc92 	bl	8003ab8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	460b      	mov	r3, r1
 80021a8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	f003 020f 	and.w	r2, r3, #15
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4413      	add	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80021c0:	681b      	ldr	r3, [r3, #0]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b086      	sub	sp, #24
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	60f8      	str	r0, [r7, #12]
 80021d6:	607a      	str	r2, [r7, #4]
 80021d8:	603b      	str	r3, [r7, #0]
 80021da:	460b      	mov	r3, r1
 80021dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021de:	7afb      	ldrb	r3, [r7, #11]
 80021e0:	f003 020f 	and.w	r2, r3, #15
 80021e4:	4613      	mov	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4413      	add	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	3338      	adds	r3, #56	; 0x38
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4413      	add	r3, r2
 80021f2:	3304      	adds	r3, #4
 80021f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2200      	movs	r2, #0
 8002206:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2201      	movs	r2, #1
 800220c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800220e:	7afb      	ldrb	r3, [r7, #11]
 8002210:	f003 030f 	and.w	r3, r3, #15
 8002214:	b2da      	uxtb	r2, r3
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d102      	bne.n	8002228 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002228:	7afb      	ldrb	r3, [r7, #11]
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	2b00      	cmp	r3, #0
 8002230:	d109      	bne.n	8002246 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	b2db      	uxtb	r3, r3
 800223c:	461a      	mov	r2, r3
 800223e:	6979      	ldr	r1, [r7, #20]
 8002240:	f001 fe82 	bl	8003f48 <USB_EP0StartXfer>
 8002244:	e008      	b.n	8002258 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6818      	ldr	r0, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	b2db      	uxtb	r3, r3
 8002250:	461a      	mov	r2, r3
 8002252:	6979      	ldr	r1, [r7, #20]
 8002254:	f001 fc30 	bl	8003ab8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b084      	sub	sp, #16
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	460b      	mov	r3, r1
 800226c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800226e:	78fb      	ldrb	r3, [r7, #3]
 8002270:	f003 020f 	and.w	r2, r3, #15
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	429a      	cmp	r2, r3
 800227a:	d901      	bls.n	8002280 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e050      	b.n	8002322 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002280:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002284:	2b00      	cmp	r3, #0
 8002286:	da0f      	bge.n	80022a8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	f003 020f 	and.w	r2, r3, #15
 800228e:	4613      	mov	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4413      	add	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	3338      	adds	r3, #56	; 0x38
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	4413      	add	r3, r2
 800229c:	3304      	adds	r3, #4
 800229e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2201      	movs	r2, #1
 80022a4:	705a      	strb	r2, [r3, #1]
 80022a6:	e00d      	b.n	80022c4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022a8:	78fa      	ldrb	r2, [r7, #3]
 80022aa:	4613      	mov	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4413      	add	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	4413      	add	r3, r2
 80022ba:	3304      	adds	r3, #4
 80022bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2201      	movs	r2, #1
 80022c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022ca:	78fb      	ldrb	r3, [r7, #3]
 80022cc:	f003 030f 	and.w	r3, r3, #15
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <HAL_PCD_EP_SetStall+0x82>
 80022e0:	2302      	movs	r3, #2
 80022e2:	e01e      	b.n	8002322 <HAL_PCD_EP_SetStall+0xc0>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68f9      	ldr	r1, [r7, #12]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f002 f8c0 	bl	8004478 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022f8:	78fb      	ldrb	r3, [r7, #3]
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10a      	bne.n	8002318 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6818      	ldr	r0, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	b2d9      	uxtb	r1, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002312:	461a      	mov	r2, r3
 8002314:	f002 fab0 	bl	8004878 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	460b      	mov	r3, r1
 8002334:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002336:	78fb      	ldrb	r3, [r7, #3]
 8002338:	f003 020f 	and.w	r2, r3, #15
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	429a      	cmp	r2, r3
 8002342:	d901      	bls.n	8002348 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e042      	b.n	80023ce <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002348:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800234c:	2b00      	cmp	r3, #0
 800234e:	da0f      	bge.n	8002370 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002350:	78fb      	ldrb	r3, [r7, #3]
 8002352:	f003 020f 	and.w	r2, r3, #15
 8002356:	4613      	mov	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4413      	add	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	3338      	adds	r3, #56	; 0x38
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	4413      	add	r3, r2
 8002364:	3304      	adds	r3, #4
 8002366:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2201      	movs	r2, #1
 800236c:	705a      	strb	r2, [r3, #1]
 800236e:	e00f      	b.n	8002390 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	f003 020f 	and.w	r2, r3, #15
 8002376:	4613      	mov	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4413      	add	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	3304      	adds	r3, #4
 8002388:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002396:	78fb      	ldrb	r3, [r7, #3]
 8002398:	f003 030f 	and.w	r3, r3, #15
 800239c:	b2da      	uxtb	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <HAL_PCD_EP_ClrStall+0x86>
 80023ac:	2302      	movs	r3, #2
 80023ae:	e00e      	b.n	80023ce <HAL_PCD_EP_ClrStall+0xa4>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68f9      	ldr	r1, [r7, #12]
 80023be:	4618      	mov	r0, r3
 80023c0:	f002 f8c8 	bl	8004554 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b084      	sub	sp, #16
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	460b      	mov	r3, r1
 80023e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80023e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	da0c      	bge.n	8002404 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	f003 020f 	and.w	r2, r3, #15
 80023f0:	4613      	mov	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4413      	add	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	3338      	adds	r3, #56	; 0x38
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	4413      	add	r3, r2
 80023fe:	3304      	adds	r3, #4
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	e00c      	b.n	800241e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	f003 020f 	and.w	r2, r3, #15
 800240a:	4613      	mov	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	3304      	adds	r3, #4
 800241c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68f9      	ldr	r1, [r7, #12]
 8002424:	4618      	mov	r0, r3
 8002426:	f001 fee7 	bl	80041f8 <USB_EPStopXfer>
 800242a:	4603      	mov	r3, r0
 800242c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800242e:	7afb      	ldrb	r3, [r7, #11]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08a      	sub	sp, #40	; 0x28
 800243c:	af02      	add	r7, sp, #8
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	4613      	mov	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	4413      	add	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	3338      	adds	r3, #56	; 0x38
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	4413      	add	r3, r2
 800245c:	3304      	adds	r3, #4
 800245e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6a1a      	ldr	r2, [r3, #32]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	429a      	cmp	r2, r3
 800246a:	d901      	bls.n	8002470 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e06c      	b.n	800254a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	699a      	ldr	r2, [r3, #24]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	69fa      	ldr	r2, [r7, #28]
 8002482:	429a      	cmp	r2, r3
 8002484:	d902      	bls.n	800248c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	3303      	adds	r3, #3
 8002490:	089b      	lsrs	r3, r3, #2
 8002492:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002494:	e02b      	b.n	80024ee <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	699a      	ldr	r2, [r3, #24]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	69fa      	ldr	r2, [r7, #28]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d902      	bls.n	80024b2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3303      	adds	r3, #3
 80024b6:	089b      	lsrs	r3, r3, #2
 80024b8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6919      	ldr	r1, [r3, #16]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	4603      	mov	r3, r0
 80024d0:	6978      	ldr	r0, [r7, #20]
 80024d2:	f001 ff3b 	bl	800434c <USB_WritePacket>

    ep->xfer_buff  += len;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	691a      	ldr	r2, [r3, #16]
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	441a      	add	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a1a      	ldr	r2, [r3, #32]
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	441a      	add	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	015a      	lsls	r2, r3, #5
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	429a      	cmp	r2, r3
 8002502:	d809      	bhi.n	8002518 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a1a      	ldr	r2, [r3, #32]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800250c:	429a      	cmp	r2, r3
 800250e:	d203      	bcs.n	8002518 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1be      	bne.n	8002496 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	699a      	ldr	r2, [r3, #24]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	429a      	cmp	r2, r3
 8002522:	d811      	bhi.n	8002548 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	2201      	movs	r2, #1
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	43db      	mvns	r3, r3
 800253e:	6939      	ldr	r1, [r7, #16]
 8002540:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002544:	4013      	ands	r3, r2
 8002546:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3720      	adds	r7, #32
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b088      	sub	sp, #32
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	333c      	adds	r3, #60	; 0x3c
 800256c:	3304      	adds	r3, #4
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	015a      	lsls	r2, r3, #5
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	4413      	add	r3, r2
 800257a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d17b      	bne.n	8002682 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	2b00      	cmp	r3, #0
 8002592:	d015      	beq.n	80025c0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	4a61      	ldr	r2, [pc, #388]	; (800271c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	f240 80b9 	bls.w	8002710 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 80b3 	beq.w	8002710 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	015a      	lsls	r2, r3, #5
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	4413      	add	r3, r2
 80025b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025b6:	461a      	mov	r2, r3
 80025b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025bc:	6093      	str	r3, [r2, #8]
 80025be:	e0a7      	b.n	8002710 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	f003 0320 	and.w	r3, r3, #32
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d009      	beq.n	80025de <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	015a      	lsls	r2, r3, #5
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025d6:	461a      	mov	r2, r3
 80025d8:	2320      	movs	r3, #32
 80025da:	6093      	str	r3, [r2, #8]
 80025dc:	e098      	b.n	8002710 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f040 8093 	bne.w	8002710 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	4a4b      	ldr	r2, [pc, #300]	; (800271c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d90f      	bls.n	8002612 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	015a      	lsls	r2, r3, #5
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	4413      	add	r3, r2
 8002604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002608:	461a      	mov	r2, r3
 800260a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800260e:	6093      	str	r3, [r2, #8]
 8002610:	e07e      	b.n	8002710 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	4613      	mov	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4413      	add	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	4413      	add	r3, r2
 8002624:	3304      	adds	r3, #4
 8002626:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	69da      	ldr	r2, [r3, #28]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	0159      	lsls	r1, r3, #5
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	440b      	add	r3, r1
 8002634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800263e:	1ad2      	subs	r2, r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d114      	bne.n	8002674 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d109      	bne.n	8002666 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800265c:	461a      	mov	r2, r3
 800265e:	2101      	movs	r1, #1
 8002660:	f002 f90a 	bl	8004878 <USB_EP0_OutStart>
 8002664:	e006      	b.n	8002674 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	691a      	ldr	r2, [r3, #16]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	441a      	add	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	b2db      	uxtb	r3, r3
 8002678:	4619      	mov	r1, r3
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f004 fb56 	bl	8006d2c <HAL_PCD_DataOutStageCallback>
 8002680:	e046      	b.n	8002710 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	4a26      	ldr	r2, [pc, #152]	; (8002720 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d124      	bne.n	80026d4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00a      	beq.n	80026aa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	4413      	add	r3, r2
 800269c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a0:	461a      	mov	r2, r3
 80026a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026a6:	6093      	str	r3, [r2, #8]
 80026a8:	e032      	b.n	8002710 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	f003 0320 	and.w	r3, r3, #32
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026c0:	461a      	mov	r2, r3
 80026c2:	2320      	movs	r3, #32
 80026c4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	4619      	mov	r1, r3
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f004 fb2d 	bl	8006d2c <HAL_PCD_DataOutStageCallback>
 80026d2:	e01d      	b.n	8002710 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d114      	bne.n	8002704 <PCD_EP_OutXfrComplete_int+0x1b0>
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	4613      	mov	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	4413      	add	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d108      	bne.n	8002704 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6818      	ldr	r0, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026fc:	461a      	mov	r2, r3
 80026fe:	2100      	movs	r1, #0
 8002700:	f002 f8ba 	bl	8004878 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	b2db      	uxtb	r3, r3
 8002708:	4619      	mov	r1, r3
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f004 fb0e 	bl	8006d2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3720      	adds	r7, #32
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	4f54300a 	.word	0x4f54300a
 8002720:	4f54310a 	.word	0x4f54310a

08002724 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	333c      	adds	r3, #60	; 0x3c
 800273c:	3304      	adds	r3, #4
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	015a      	lsls	r2, r3, #5
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4413      	add	r3, r2
 800274a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4a15      	ldr	r2, [pc, #84]	; (80027ac <PCD_EP_OutSetupPacket_int+0x88>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d90e      	bls.n	8002778 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002760:	2b00      	cmp	r3, #0
 8002762:	d009      	beq.n	8002778 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4413      	add	r3, r2
 800276c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002770:	461a      	mov	r2, r3
 8002772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002776:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f004 fac5 	bl	8006d08 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <PCD_EP_OutSetupPacket_int+0x88>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d90c      	bls.n	80027a0 <PCD_EP_OutSetupPacket_int+0x7c>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d108      	bne.n	80027a0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002798:	461a      	mov	r2, r3
 800279a:	2101      	movs	r1, #1
 800279c:	f002 f86c 	bl	8004878 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	4f54300a 	.word	0x4f54300a

080027b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	70fb      	strb	r3, [r7, #3]
 80027bc:	4613      	mov	r3, r2
 80027be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80027c8:	78fb      	ldrb	r3, [r7, #3]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d107      	bne.n	80027de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80027ce:	883b      	ldrh	r3, [r7, #0]
 80027d0:	0419      	lsls	r1, r3, #16
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	430a      	orrs	r2, r1
 80027da:	629a      	str	r2, [r3, #40]	; 0x28
 80027dc:	e028      	b.n	8002830 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	0c1b      	lsrs	r3, r3, #16
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	4413      	add	r3, r2
 80027ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80027ec:	2300      	movs	r3, #0
 80027ee:	73fb      	strb	r3, [r7, #15]
 80027f0:	e00d      	b.n	800280e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	3340      	adds	r3, #64	; 0x40
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	0c1b      	lsrs	r3, r3, #16
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	4413      	add	r3, r2
 8002806:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	3301      	adds	r3, #1
 800280c:	73fb      	strb	r3, [r7, #15]
 800280e:	7bfa      	ldrb	r2, [r7, #15]
 8002810:	78fb      	ldrb	r3, [r7, #3]
 8002812:	3b01      	subs	r3, #1
 8002814:	429a      	cmp	r2, r3
 8002816:	d3ec      	bcc.n	80027f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002818:	883b      	ldrh	r3, [r7, #0]
 800281a:	0418      	lsls	r0, r3, #16
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6819      	ldr	r1, [r3, #0]
 8002820:	78fb      	ldrb	r3, [r7, #3]
 8002822:	3b01      	subs	r3, #1
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	4302      	orrs	r2, r0
 8002828:	3340      	adds	r3, #64	; 0x40
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	460b      	mov	r3, r1
 8002848:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	887a      	ldrh	r2, [r7, #2]
 8002850:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e267      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d075      	beq.n	8002982 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002896:	4b88      	ldr	r3, [pc, #544]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 030c 	and.w	r3, r3, #12
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d00c      	beq.n	80028bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028a2:	4b85      	ldr	r3, [pc, #532]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028aa:	2b08      	cmp	r3, #8
 80028ac:	d112      	bne.n	80028d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ae:	4b82      	ldr	r3, [pc, #520]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ba:	d10b      	bne.n	80028d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028bc:	4b7e      	ldr	r3, [pc, #504]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d05b      	beq.n	8002980 <HAL_RCC_OscConfig+0x108>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d157      	bne.n	8002980 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e242      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028dc:	d106      	bne.n	80028ec <HAL_RCC_OscConfig+0x74>
 80028de:	4b76      	ldr	r3, [pc, #472]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a75      	ldr	r2, [pc, #468]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80028e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	e01d      	b.n	8002928 <HAL_RCC_OscConfig+0xb0>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f4:	d10c      	bne.n	8002910 <HAL_RCC_OscConfig+0x98>
 80028f6:	4b70      	ldr	r3, [pc, #448]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a6f      	ldr	r2, [pc, #444]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80028fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	4b6d      	ldr	r3, [pc, #436]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a6c      	ldr	r2, [pc, #432]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	e00b      	b.n	8002928 <HAL_RCC_OscConfig+0xb0>
 8002910:	4b69      	ldr	r3, [pc, #420]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a68      	ldr	r2, [pc, #416]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	4b66      	ldr	r3, [pc, #408]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a65      	ldr	r2, [pc, #404]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002926:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d013      	beq.n	8002958 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002930:	f7fe f8e6 	bl	8000b00 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002938:	f7fe f8e2 	bl	8000b00 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b64      	cmp	r3, #100	; 0x64
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e207      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294a:	4b5b      	ldr	r3, [pc, #364]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0f0      	beq.n	8002938 <HAL_RCC_OscConfig+0xc0>
 8002956:	e014      	b.n	8002982 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002958:	f7fe f8d2 	bl	8000b00 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002960:	f7fe f8ce 	bl	8000b00 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b64      	cmp	r3, #100	; 0x64
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e1f3      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002972:	4b51      	ldr	r3, [pc, #324]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0xe8>
 800297e:	e000      	b.n	8002982 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d063      	beq.n	8002a56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800298e:	4b4a      	ldr	r3, [pc, #296]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 030c 	and.w	r3, r3, #12
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00b      	beq.n	80029b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800299a:	4b47      	ldr	r3, [pc, #284]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d11c      	bne.n	80029e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029a6:	4b44      	ldr	r3, [pc, #272]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d116      	bne.n	80029e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b2:	4b41      	ldr	r3, [pc, #260]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d005      	beq.n	80029ca <HAL_RCC_OscConfig+0x152>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d001      	beq.n	80029ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e1c7      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ca:	4b3b      	ldr	r3, [pc, #236]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4937      	ldr	r1, [pc, #220]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029de:	e03a      	b.n	8002a56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d020      	beq.n	8002a2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e8:	4b34      	ldr	r3, [pc, #208]	; (8002abc <HAL_RCC_OscConfig+0x244>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ee:	f7fe f887 	bl	8000b00 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029f6:	f7fe f883 	bl	8000b00 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e1a8      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a08:	4b2b      	ldr	r3, [pc, #172]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a14:	4b28      	ldr	r3, [pc, #160]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4925      	ldr	r1, [pc, #148]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	600b      	str	r3, [r1, #0]
 8002a28:	e015      	b.n	8002a56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a2a:	4b24      	ldr	r3, [pc, #144]	; (8002abc <HAL_RCC_OscConfig+0x244>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a30:	f7fe f866 	bl	8000b00 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a38:	f7fe f862 	bl	8000b00 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e187      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4a:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d036      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d016      	beq.n	8002a98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a6a:	4b15      	ldr	r3, [pc, #84]	; (8002ac0 <HAL_RCC_OscConfig+0x248>)
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a70:	f7fe f846 	bl	8000b00 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a78:	f7fe f842 	bl	8000b00 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e167      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8a:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0x200>
 8002a96:	e01b      	b.n	8002ad0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a98:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <HAL_RCC_OscConfig+0x248>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9e:	f7fe f82f 	bl	8000b00 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa4:	e00e      	b.n	8002ac4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa6:	f7fe f82b 	bl	8000b00 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d907      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e150      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	42470000 	.word	0x42470000
 8002ac0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac4:	4b88      	ldr	r3, [pc, #544]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1ea      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 8097 	beq.w	8002c0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ae2:	4b81      	ldr	r3, [pc, #516]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10f      	bne.n	8002b0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	4b7d      	ldr	r3, [pc, #500]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	4a7c      	ldr	r2, [pc, #496]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002afc:	6413      	str	r3, [r2, #64]	; 0x40
 8002afe:	4b7a      	ldr	r3, [pc, #488]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0e:	4b77      	ldr	r3, [pc, #476]	; (8002cec <HAL_RCC_OscConfig+0x474>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d118      	bne.n	8002b4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b1a:	4b74      	ldr	r3, [pc, #464]	; (8002cec <HAL_RCC_OscConfig+0x474>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a73      	ldr	r2, [pc, #460]	; (8002cec <HAL_RCC_OscConfig+0x474>)
 8002b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b26:	f7fd ffeb 	bl	8000b00 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b2e:	f7fd ffe7 	bl	8000b00 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e10c      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b40:	4b6a      	ldr	r3, [pc, #424]	; (8002cec <HAL_RCC_OscConfig+0x474>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0f0      	beq.n	8002b2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d106      	bne.n	8002b62 <HAL_RCC_OscConfig+0x2ea>
 8002b54:	4b64      	ldr	r3, [pc, #400]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b58:	4a63      	ldr	r2, [pc, #396]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b60:	e01c      	b.n	8002b9c <HAL_RCC_OscConfig+0x324>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2b05      	cmp	r3, #5
 8002b68:	d10c      	bne.n	8002b84 <HAL_RCC_OscConfig+0x30c>
 8002b6a:	4b5f      	ldr	r3, [pc, #380]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6e:	4a5e      	ldr	r2, [pc, #376]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b70:	f043 0304 	orr.w	r3, r3, #4
 8002b74:	6713      	str	r3, [r2, #112]	; 0x70
 8002b76:	4b5c      	ldr	r3, [pc, #368]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7a:	4a5b      	ldr	r2, [pc, #364]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	6713      	str	r3, [r2, #112]	; 0x70
 8002b82:	e00b      	b.n	8002b9c <HAL_RCC_OscConfig+0x324>
 8002b84:	4b58      	ldr	r3, [pc, #352]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	4a57      	ldr	r2, [pc, #348]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b8a:	f023 0301 	bic.w	r3, r3, #1
 8002b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b90:	4b55      	ldr	r3, [pc, #340]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b94:	4a54      	ldr	r2, [pc, #336]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b96:	f023 0304 	bic.w	r3, r3, #4
 8002b9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d015      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba4:	f7fd ffac 	bl	8000b00 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bac:	f7fd ffa8 	bl	8000b00 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e0cb      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc2:	4b49      	ldr	r3, [pc, #292]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0ee      	beq.n	8002bac <HAL_RCC_OscConfig+0x334>
 8002bce:	e014      	b.n	8002bfa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd0:	f7fd ff96 	bl	8000b00 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd6:	e00a      	b.n	8002bee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd8:	f7fd ff92 	bl	8000b00 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e0b5      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bee:	4b3e      	ldr	r3, [pc, #248]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1ee      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bfa:	7dfb      	ldrb	r3, [r7, #23]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d105      	bne.n	8002c0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c00:	4b39      	ldr	r3, [pc, #228]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	4a38      	ldr	r2, [pc, #224]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 80a1 	beq.w	8002d58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c16:	4b34      	ldr	r3, [pc, #208]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d05c      	beq.n	8002cdc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d141      	bne.n	8002cae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2a:	4b31      	ldr	r3, [pc, #196]	; (8002cf0 <HAL_RCC_OscConfig+0x478>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c30:	f7fd ff66 	bl	8000b00 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c38:	f7fd ff62 	bl	8000b00 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e087      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4a:	4b27      	ldr	r3, [pc, #156]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f0      	bne.n	8002c38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69da      	ldr	r2, [r3, #28]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	019b      	lsls	r3, r3, #6
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6c:	085b      	lsrs	r3, r3, #1
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	061b      	lsls	r3, r3, #24
 8002c7a:	491b      	ldr	r1, [pc, #108]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c80:	4b1b      	ldr	r3, [pc, #108]	; (8002cf0 <HAL_RCC_OscConfig+0x478>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c86:	f7fd ff3b 	bl	8000b00 <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c8e:	f7fd ff37 	bl	8000b00 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e05c      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca0:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0f0      	beq.n	8002c8e <HAL_RCC_OscConfig+0x416>
 8002cac:	e054      	b.n	8002d58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cae:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <HAL_RCC_OscConfig+0x478>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb4:	f7fd ff24 	bl	8000b00 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cbc:	f7fd ff20 	bl	8000b00 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e045      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cce:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0x444>
 8002cda:	e03d      	b.n	8002d58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d107      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e038      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40007000 	.word	0x40007000
 8002cf0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cf4:	4b1b      	ldr	r3, [pc, #108]	; (8002d64 <HAL_RCC_OscConfig+0x4ec>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d028      	beq.n	8002d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d121      	bne.n	8002d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d11a      	bne.n	8002d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d24:	4013      	ands	r3, r2
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d111      	bne.n	8002d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3a:	085b      	lsrs	r3, r3, #1
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d107      	bne.n	8002d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d001      	beq.n	8002d58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40023800 	.word	0x40023800

08002d68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e0cc      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d7c:	4b68      	ldr	r3, [pc, #416]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d90c      	bls.n	8002da4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8a:	4b65      	ldr	r3, [pc, #404]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d92:	4b63      	ldr	r3, [pc, #396]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0b8      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d020      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dbc:	4b59      	ldr	r3, [pc, #356]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	4a58      	ldr	r2, [pc, #352]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dd4:	4b53      	ldr	r3, [pc, #332]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	4a52      	ldr	r2, [pc, #328]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de0:	4b50      	ldr	r3, [pc, #320]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	494d      	ldr	r1, [pc, #308]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d044      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d107      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e06:	4b47      	ldr	r3, [pc, #284]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d119      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e07f      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d003      	beq.n	8002e26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d107      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e26:	4b3f      	ldr	r3, [pc, #252]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d109      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e06f      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e36:	4b3b      	ldr	r3, [pc, #236]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e067      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e46:	4b37      	ldr	r3, [pc, #220]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f023 0203 	bic.w	r2, r3, #3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	4934      	ldr	r1, [pc, #208]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e58:	f7fd fe52 	bl	8000b00 <HAL_GetTick>
 8002e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5e:	e00a      	b.n	8002e76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e60:	f7fd fe4e 	bl	8000b00 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e04f      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e76:	4b2b      	ldr	r3, [pc, #172]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 020c 	and.w	r2, r3, #12
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d1eb      	bne.n	8002e60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e88:	4b25      	ldr	r3, [pc, #148]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d20c      	bcs.n	8002eb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e96:	4b22      	ldr	r3, [pc, #136]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9e:	4b20      	ldr	r3, [pc, #128]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e032      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d008      	beq.n	8002ece <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ebc:	4b19      	ldr	r3, [pc, #100]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	4916      	ldr	r1, [pc, #88]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d009      	beq.n	8002eee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eda:	4b12      	ldr	r3, [pc, #72]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	490e      	ldr	r1, [pc, #56]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eee:	f000 f821 	bl	8002f34 <HAL_RCC_GetSysClockFreq>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	091b      	lsrs	r3, r3, #4
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	490a      	ldr	r1, [pc, #40]	; (8002f28 <HAL_RCC_ClockConfig+0x1c0>)
 8002f00:	5ccb      	ldrb	r3, [r1, r3]
 8002f02:	fa22 f303 	lsr.w	r3, r2, r3
 8002f06:	4a09      	ldr	r2, [pc, #36]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f0a:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <HAL_RCC_ClockConfig+0x1c8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fd fdb2 	bl	8000a78 <HAL_InitTick>

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40023c00 	.word	0x40023c00
 8002f24:	40023800 	.word	0x40023800
 8002f28:	08007340 	.word	0x08007340
 8002f2c:	20000060 	.word	0x20000060
 8002f30:	20000064 	.word	0x20000064

08002f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f38:	b090      	sub	sp, #64	; 0x40
 8002f3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f40:	2300      	movs	r3, #0
 8002f42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f44:	2300      	movs	r3, #0
 8002f46:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f4c:	4b59      	ldr	r3, [pc, #356]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 030c 	and.w	r3, r3, #12
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	d00d      	beq.n	8002f74 <HAL_RCC_GetSysClockFreq+0x40>
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	f200 80a1 	bhi.w	80030a0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d002      	beq.n	8002f68 <HAL_RCC_GetSysClockFreq+0x34>
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d003      	beq.n	8002f6e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f66:	e09b      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f68:	4b53      	ldr	r3, [pc, #332]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f6a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002f6c:	e09b      	b.n	80030a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f6e:	4b53      	ldr	r3, [pc, #332]	; (80030bc <HAL_RCC_GetSysClockFreq+0x188>)
 8002f70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f72:	e098      	b.n	80030a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f74:	4b4f      	ldr	r3, [pc, #316]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f7c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f7e:	4b4d      	ldr	r3, [pc, #308]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d028      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f8a:	4b4a      	ldr	r3, [pc, #296]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	099b      	lsrs	r3, r3, #6
 8002f90:	2200      	movs	r2, #0
 8002f92:	623b      	str	r3, [r7, #32]
 8002f94:	627a      	str	r2, [r7, #36]	; 0x24
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	4b47      	ldr	r3, [pc, #284]	; (80030bc <HAL_RCC_GetSysClockFreq+0x188>)
 8002fa0:	fb03 f201 	mul.w	r2, r3, r1
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	fb00 f303 	mul.w	r3, r0, r3
 8002faa:	4413      	add	r3, r2
 8002fac:	4a43      	ldr	r2, [pc, #268]	; (80030bc <HAL_RCC_GetSysClockFreq+0x188>)
 8002fae:	fba0 1202 	umull	r1, r2, r0, r2
 8002fb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fb4:	460a      	mov	r2, r1
 8002fb6:	62ba      	str	r2, [r7, #40]	; 0x28
 8002fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fba:	4413      	add	r3, r2
 8002fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	61bb      	str	r3, [r7, #24]
 8002fc4:	61fa      	str	r2, [r7, #28]
 8002fc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002fce:	f7fd f901 	bl	80001d4 <__aeabi_uldivmod>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fda:	e053      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fdc:	4b35      	ldr	r3, [pc, #212]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	099b      	lsrs	r3, r3, #6
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	617a      	str	r2, [r7, #20]
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002fee:	f04f 0b00 	mov.w	fp, #0
 8002ff2:	4652      	mov	r2, sl
 8002ff4:	465b      	mov	r3, fp
 8002ff6:	f04f 0000 	mov.w	r0, #0
 8002ffa:	f04f 0100 	mov.w	r1, #0
 8002ffe:	0159      	lsls	r1, r3, #5
 8003000:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003004:	0150      	lsls	r0, r2, #5
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	ebb2 080a 	subs.w	r8, r2, sl
 800300e:	eb63 090b 	sbc.w	r9, r3, fp
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800301e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003022:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003026:	ebb2 0408 	subs.w	r4, r2, r8
 800302a:	eb63 0509 	sbc.w	r5, r3, r9
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	f04f 0300 	mov.w	r3, #0
 8003036:	00eb      	lsls	r3, r5, #3
 8003038:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800303c:	00e2      	lsls	r2, r4, #3
 800303e:	4614      	mov	r4, r2
 8003040:	461d      	mov	r5, r3
 8003042:	eb14 030a 	adds.w	r3, r4, sl
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	eb45 030b 	adc.w	r3, r5, fp
 800304c:	607b      	str	r3, [r7, #4]
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	e9d7 4500 	ldrd	r4, r5, [r7]
 800305a:	4629      	mov	r1, r5
 800305c:	028b      	lsls	r3, r1, #10
 800305e:	4621      	mov	r1, r4
 8003060:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003064:	4621      	mov	r1, r4
 8003066:	028a      	lsls	r2, r1, #10
 8003068:	4610      	mov	r0, r2
 800306a:	4619      	mov	r1, r3
 800306c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306e:	2200      	movs	r2, #0
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	60fa      	str	r2, [r7, #12]
 8003074:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003078:	f7fd f8ac 	bl	80001d4 <__aeabi_uldivmod>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4613      	mov	r3, r2
 8003082:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	0c1b      	lsrs	r3, r3, #16
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	3301      	adds	r3, #1
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003094:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003098:	fbb2 f3f3 	udiv	r3, r2, r3
 800309c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800309e:	e002      	b.n	80030a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030a0:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80030a2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3740      	adds	r7, #64	; 0x40
 80030ac:	46bd      	mov	sp, r7
 80030ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800
 80030b8:	00f42400 	.word	0x00f42400
 80030bc:	017d7840 	.word	0x017d7840

080030c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c4:	4b03      	ldr	r3, [pc, #12]	; (80030d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80030c6:	681b      	ldr	r3, [r3, #0]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	20000060 	.word	0x20000060

080030d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030dc:	f7ff fff0 	bl	80030c0 <HAL_RCC_GetHCLKFreq>
 80030e0:	4602      	mov	r2, r0
 80030e2:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	0a9b      	lsrs	r3, r3, #10
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	4903      	ldr	r1, [pc, #12]	; (80030fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ee:	5ccb      	ldrb	r3, [r1, r3]
 80030f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40023800 	.word	0x40023800
 80030fc:	08007350 	.word	0x08007350

08003100 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003100:	b084      	sub	sp, #16
 8003102:	b580      	push	{r7, lr}
 8003104:	b084      	sub	sp, #16
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
 800310a:	f107 001c 	add.w	r0, r7, #28
 800310e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003114:	2b01      	cmp	r3, #1
 8003116:	d122      	bne.n	800315e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800312c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003142:	2b01      	cmp	r3, #1
 8003144:	d105      	bne.n	8003152 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f001 fbee 	bl	8004934 <USB_CoreReset>
 8003158:	4603      	mov	r3, r0
 800315a:	73fb      	strb	r3, [r7, #15]
 800315c:	e01a      	b.n	8003194 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f001 fbe2 	bl	8004934 <USB_CoreReset>
 8003170:	4603      	mov	r3, r0
 8003172:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003176:	2b00      	cmp	r3, #0
 8003178:	d106      	bne.n	8003188 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	639a      	str	r2, [r3, #56]	; 0x38
 8003186:	e005      	b.n	8003194 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003196:	2b01      	cmp	r3, #1
 8003198:	d10b      	bne.n	80031b2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f043 0206 	orr.w	r2, r3, #6
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f043 0220 	orr.w	r2, r3, #32
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031be:	b004      	add	sp, #16
 80031c0:	4770      	bx	lr
	...

080031c4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	4613      	mov	r3, r2
 80031d0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80031d2:	79fb      	ldrb	r3, [r7, #7]
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d165      	bne.n	80032a4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	4a41      	ldr	r2, [pc, #260]	; (80032e0 <USB_SetTurnaroundTime+0x11c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d906      	bls.n	80031ee <USB_SetTurnaroundTime+0x2a>
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	4a40      	ldr	r2, [pc, #256]	; (80032e4 <USB_SetTurnaroundTime+0x120>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d202      	bcs.n	80031ee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80031e8:	230f      	movs	r3, #15
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	e062      	b.n	80032b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	4a3c      	ldr	r2, [pc, #240]	; (80032e4 <USB_SetTurnaroundTime+0x120>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d306      	bcc.n	8003204 <USB_SetTurnaroundTime+0x40>
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	4a3b      	ldr	r2, [pc, #236]	; (80032e8 <USB_SetTurnaroundTime+0x124>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d202      	bcs.n	8003204 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80031fe:	230e      	movs	r3, #14
 8003200:	617b      	str	r3, [r7, #20]
 8003202:	e057      	b.n	80032b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4a38      	ldr	r2, [pc, #224]	; (80032e8 <USB_SetTurnaroundTime+0x124>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d306      	bcc.n	800321a <USB_SetTurnaroundTime+0x56>
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	4a37      	ldr	r2, [pc, #220]	; (80032ec <USB_SetTurnaroundTime+0x128>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d202      	bcs.n	800321a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003214:	230d      	movs	r3, #13
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	e04c      	b.n	80032b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	4a33      	ldr	r2, [pc, #204]	; (80032ec <USB_SetTurnaroundTime+0x128>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d306      	bcc.n	8003230 <USB_SetTurnaroundTime+0x6c>
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	4a32      	ldr	r2, [pc, #200]	; (80032f0 <USB_SetTurnaroundTime+0x12c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d802      	bhi.n	8003230 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800322a:	230c      	movs	r3, #12
 800322c:	617b      	str	r3, [r7, #20]
 800322e:	e041      	b.n	80032b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	4a2f      	ldr	r2, [pc, #188]	; (80032f0 <USB_SetTurnaroundTime+0x12c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d906      	bls.n	8003246 <USB_SetTurnaroundTime+0x82>
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	4a2e      	ldr	r2, [pc, #184]	; (80032f4 <USB_SetTurnaroundTime+0x130>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d802      	bhi.n	8003246 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003240:	230b      	movs	r3, #11
 8003242:	617b      	str	r3, [r7, #20]
 8003244:	e036      	b.n	80032b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	4a2a      	ldr	r2, [pc, #168]	; (80032f4 <USB_SetTurnaroundTime+0x130>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d906      	bls.n	800325c <USB_SetTurnaroundTime+0x98>
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	4a29      	ldr	r2, [pc, #164]	; (80032f8 <USB_SetTurnaroundTime+0x134>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d802      	bhi.n	800325c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003256:	230a      	movs	r3, #10
 8003258:	617b      	str	r3, [r7, #20]
 800325a:	e02b      	b.n	80032b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	4a26      	ldr	r2, [pc, #152]	; (80032f8 <USB_SetTurnaroundTime+0x134>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d906      	bls.n	8003272 <USB_SetTurnaroundTime+0xae>
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	4a25      	ldr	r2, [pc, #148]	; (80032fc <USB_SetTurnaroundTime+0x138>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d202      	bcs.n	8003272 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800326c:	2309      	movs	r3, #9
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	e020      	b.n	80032b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	4a21      	ldr	r2, [pc, #132]	; (80032fc <USB_SetTurnaroundTime+0x138>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d306      	bcc.n	8003288 <USB_SetTurnaroundTime+0xc4>
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	4a20      	ldr	r2, [pc, #128]	; (8003300 <USB_SetTurnaroundTime+0x13c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d802      	bhi.n	8003288 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003282:	2308      	movs	r3, #8
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	e015      	b.n	80032b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	4a1d      	ldr	r2, [pc, #116]	; (8003300 <USB_SetTurnaroundTime+0x13c>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d906      	bls.n	800329e <USB_SetTurnaroundTime+0xda>
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	4a1c      	ldr	r2, [pc, #112]	; (8003304 <USB_SetTurnaroundTime+0x140>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d202      	bcs.n	800329e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003298:	2307      	movs	r3, #7
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	e00a      	b.n	80032b4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800329e:	2306      	movs	r3, #6
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	e007      	b.n	80032b4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80032a4:	79fb      	ldrb	r3, [r7, #7]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d102      	bne.n	80032b0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80032aa:	2309      	movs	r3, #9
 80032ac:	617b      	str	r3, [r7, #20]
 80032ae:	e001      	b.n	80032b4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80032b0:	2309      	movs	r3, #9
 80032b2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	029b      	lsls	r3, r3, #10
 80032c8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80032cc:	431a      	orrs	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	371c      	adds	r7, #28
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	00d8acbf 	.word	0x00d8acbf
 80032e4:	00e4e1c0 	.word	0x00e4e1c0
 80032e8:	00f42400 	.word	0x00f42400
 80032ec:	01067380 	.word	0x01067380
 80032f0:	011a499f 	.word	0x011a499f
 80032f4:	01312cff 	.word	0x01312cff
 80032f8:	014ca43f 	.word	0x014ca43f
 80032fc:	016e3600 	.word	0x016e3600
 8003300:	01a6ab1f 	.word	0x01a6ab1f
 8003304:	01e84800 	.word	0x01e84800

08003308 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f043 0201 	orr.w	r2, r3, #1
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f023 0201 	bic.w	r2, r3, #1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003358:	2300      	movs	r3, #0
 800335a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003368:	78fb      	ldrb	r3, [r7, #3]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d115      	bne.n	800339a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800337a:	2001      	movs	r0, #1
 800337c:	f7fd fbcc 	bl	8000b18 <HAL_Delay>
      ms++;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	3301      	adds	r3, #1
 8003384:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f001 fa45 	bl	8004816 <USB_GetMode>
 800338c:	4603      	mov	r3, r0
 800338e:	2b01      	cmp	r3, #1
 8003390:	d01e      	beq.n	80033d0 <USB_SetCurrentMode+0x84>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b31      	cmp	r3, #49	; 0x31
 8003396:	d9f0      	bls.n	800337a <USB_SetCurrentMode+0x2e>
 8003398:	e01a      	b.n	80033d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800339a:	78fb      	ldrb	r3, [r7, #3]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d115      	bne.n	80033cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80033ac:	2001      	movs	r0, #1
 80033ae:	f7fd fbb3 	bl	8000b18 <HAL_Delay>
      ms++;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	3301      	adds	r3, #1
 80033b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f001 fa2c 	bl	8004816 <USB_GetMode>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d005      	beq.n	80033d0 <USB_SetCurrentMode+0x84>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b31      	cmp	r3, #49	; 0x31
 80033c8:	d9f0      	bls.n	80033ac <USB_SetCurrentMode+0x60>
 80033ca:	e001      	b.n	80033d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e005      	b.n	80033dc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2b32      	cmp	r3, #50	; 0x32
 80033d4:	d101      	bne.n	80033da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80033e4:	b084      	sub	sp, #16
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b086      	sub	sp, #24
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
 80033ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80033f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80033fe:	2300      	movs	r3, #0
 8003400:	613b      	str	r3, [r7, #16]
 8003402:	e009      	b.n	8003418 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	3340      	adds	r3, #64	; 0x40
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	2200      	movs	r2, #0
 8003410:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	3301      	adds	r3, #1
 8003416:	613b      	str	r3, [r7, #16]
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	2b0e      	cmp	r3, #14
 800341c:	d9f2      	bls.n	8003404 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800341e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003420:	2b00      	cmp	r3, #0
 8003422:	d11c      	bne.n	800345e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003432:	f043 0302 	orr.w	r3, r3, #2
 8003436:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003448:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003454:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	639a      	str	r2, [r3, #56]	; 0x38
 800345c:	e00b      	b.n	8003476 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003462:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800347c:	461a      	mov	r2, r3
 800347e:	2300      	movs	r3, #0
 8003480:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003488:	4619      	mov	r1, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003490:	461a      	mov	r2, r3
 8003492:	680b      	ldr	r3, [r1, #0]
 8003494:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003498:	2b01      	cmp	r3, #1
 800349a:	d10c      	bne.n	80034b6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800349c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d104      	bne.n	80034ac <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80034a2:	2100      	movs	r1, #0
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f965 	bl	8003774 <USB_SetDevSpeed>
 80034aa:	e008      	b.n	80034be <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80034ac:	2101      	movs	r1, #1
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f960 	bl	8003774 <USB_SetDevSpeed>
 80034b4:	e003      	b.n	80034be <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80034b6:	2103      	movs	r1, #3
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f95b 	bl	8003774 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80034be:	2110      	movs	r1, #16
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f8f3 	bl	80036ac <USB_FlushTxFifo>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f91f 	bl	8003714 <USB_FlushRxFifo>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e6:	461a      	mov	r2, r3
 80034e8:	2300      	movs	r3, #0
 80034ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034f2:	461a      	mov	r2, r3
 80034f4:	2300      	movs	r3, #0
 80034f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034fe:	461a      	mov	r2, r3
 8003500:	2300      	movs	r3, #0
 8003502:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003504:	2300      	movs	r3, #0
 8003506:	613b      	str	r3, [r7, #16]
 8003508:	e043      	b.n	8003592 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	015a      	lsls	r2, r3, #5
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	4413      	add	r3, r2
 8003512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800351c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003520:	d118      	bne.n	8003554 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10a      	bne.n	800353e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4413      	add	r3, r2
 8003530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003534:	461a      	mov	r2, r3
 8003536:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800353a:	6013      	str	r3, [r2, #0]
 800353c:	e013      	b.n	8003566 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	4413      	add	r3, r2
 8003546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800354a:	461a      	mov	r2, r3
 800354c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	e008      	b.n	8003566 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4413      	add	r3, r2
 800355c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003560:	461a      	mov	r2, r3
 8003562:	2300      	movs	r3, #0
 8003564:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4413      	add	r3, r2
 800356e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003572:	461a      	mov	r2, r3
 8003574:	2300      	movs	r3, #0
 8003576:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4413      	add	r3, r2
 8003580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003584:	461a      	mov	r2, r3
 8003586:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800358a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	3301      	adds	r3, #1
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	429a      	cmp	r2, r3
 8003598:	d3b7      	bcc.n	800350a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800359a:	2300      	movs	r3, #0
 800359c:	613b      	str	r3, [r7, #16]
 800359e:	e043      	b.n	8003628 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035b6:	d118      	bne.n	80035ea <USB_DevInit+0x206>
    {
      if (i == 0U)
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10a      	bne.n	80035d4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ca:	461a      	mov	r2, r3
 80035cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	e013      	b.n	80035fc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e0:	461a      	mov	r2, r3
 80035e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	e008      	b.n	80035fc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f6:	461a      	mov	r2, r3
 80035f8:	2300      	movs	r3, #0
 80035fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4413      	add	r3, r2
 8003604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003608:	461a      	mov	r2, r3
 800360a:	2300      	movs	r3, #0
 800360c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4413      	add	r3, r2
 8003616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800361a:	461a      	mov	r2, r3
 800361c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003620:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	3301      	adds	r3, #1
 8003626:	613b      	str	r3, [r7, #16]
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	429a      	cmp	r2, r3
 800362e:	d3b7      	bcc.n	80035a0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800363e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003642:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003650:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003654:	2b00      	cmp	r3, #0
 8003656:	d105      	bne.n	8003664 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	f043 0210 	orr.w	r2, r3, #16
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	699a      	ldr	r2, [r3, #24]
 8003668:	4b0f      	ldr	r3, [pc, #60]	; (80036a8 <USB_DevInit+0x2c4>)
 800366a:	4313      	orrs	r3, r2
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003672:	2b00      	cmp	r3, #0
 8003674:	d005      	beq.n	8003682 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	f043 0208 	orr.w	r2, r3, #8
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003684:	2b01      	cmp	r3, #1
 8003686:	d107      	bne.n	8003698 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003690:	f043 0304 	orr.w	r3, r3, #4
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003698:	7dfb      	ldrb	r3, [r7, #23]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036a4:	b004      	add	sp, #16
 80036a6:	4770      	bx	lr
 80036a8:	803c3800 	.word	0x803c3800

080036ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	3301      	adds	r3, #1
 80036be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4a13      	ldr	r2, [pc, #76]	; (8003710 <USB_FlushTxFifo+0x64>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d901      	bls.n	80036cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e01b      	b.n	8003704 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	daf2      	bge.n	80036ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	019b      	lsls	r3, r3, #6
 80036dc:	f043 0220 	orr.w	r2, r3, #32
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	3301      	adds	r3, #1
 80036e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4a08      	ldr	r2, [pc, #32]	; (8003710 <USB_FlushTxFifo+0x64>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d901      	bls.n	80036f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e006      	b.n	8003704 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b20      	cmp	r3, #32
 8003700:	d0f0      	beq.n	80036e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	00030d40 	.word	0x00030d40

08003714 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3301      	adds	r3, #1
 8003724:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4a11      	ldr	r2, [pc, #68]	; (8003770 <USB_FlushRxFifo+0x5c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e018      	b.n	8003764 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	2b00      	cmp	r3, #0
 8003738:	daf2      	bge.n	8003720 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2210      	movs	r2, #16
 8003742:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	3301      	adds	r3, #1
 8003748:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	4a08      	ldr	r2, [pc, #32]	; (8003770 <USB_FlushRxFifo+0x5c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d901      	bls.n	8003756 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e006      	b.n	8003764 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	f003 0310 	and.w	r3, r3, #16
 800375e:	2b10      	cmp	r3, #16
 8003760:	d0f0      	beq.n	8003744 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	00030d40 	.word	0x00030d40

08003774 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	78fb      	ldrb	r3, [r7, #3]
 800378e:	68f9      	ldr	r1, [r7, #12]
 8003790:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003794:	4313      	orrs	r3, r2
 8003796:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b087      	sub	sp, #28
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 0306 	and.w	r3, r3, #6
 80037be:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d102      	bne.n	80037cc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80037c6:	2300      	movs	r3, #0
 80037c8:	75fb      	strb	r3, [r7, #23]
 80037ca:	e00a      	b.n	80037e2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d002      	beq.n	80037d8 <USB_GetDevSpeed+0x32>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2b06      	cmp	r3, #6
 80037d6:	d102      	bne.n	80037de <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80037d8:	2302      	movs	r3, #2
 80037da:	75fb      	strb	r3, [r7, #23]
 80037dc:	e001      	b.n	80037e2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80037de:	230f      	movs	r3, #15
 80037e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80037e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	371c      	adds	r7, #28
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	785b      	ldrb	r3, [r3, #1]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d13a      	bne.n	8003882 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003812:	69da      	ldr	r2, [r3, #28]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	2101      	movs	r1, #1
 800381e:	fa01 f303 	lsl.w	r3, r1, r3
 8003822:	b29b      	uxth	r3, r3
 8003824:	68f9      	ldr	r1, [r7, #12]
 8003826:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800382a:	4313      	orrs	r3, r2
 800382c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4413      	add	r3, r2
 8003836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d155      	bne.n	80038f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	015a      	lsls	r2, r3, #5
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4413      	add	r3, r2
 800384c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	791b      	ldrb	r3, [r3, #4]
 800385e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003860:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	059b      	lsls	r3, r3, #22
 8003866:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003868:	4313      	orrs	r3, r2
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	0151      	lsls	r1, r2, #5
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	440a      	add	r2, r1
 8003872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800387a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800387e:	6013      	str	r3, [r2, #0]
 8003880:	e036      	b.n	80038f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003888:	69da      	ldr	r2, [r3, #28]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	f003 030f 	and.w	r3, r3, #15
 8003892:	2101      	movs	r1, #1
 8003894:	fa01 f303 	lsl.w	r3, r1, r3
 8003898:	041b      	lsls	r3, r3, #16
 800389a:	68f9      	ldr	r1, [r7, #12]
 800389c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038a0:	4313      	orrs	r3, r2
 80038a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d11a      	bne.n	80038f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	015a      	lsls	r2, r3, #5
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	4413      	add	r3, r2
 80038c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	791b      	ldrb	r3, [r3, #4]
 80038d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80038d6:	430b      	orrs	r3, r1
 80038d8:	4313      	orrs	r3, r2
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	0151      	lsls	r1, r2, #5
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	440a      	add	r2, r1
 80038e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
	...

08003900 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	785b      	ldrb	r3, [r3, #1]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d161      	bne.n	80039e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	015a      	lsls	r2, r3, #5
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4413      	add	r3, r2
 8003924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800392e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003932:	d11f      	bne.n	8003974 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4413      	add	r3, r2
 800393c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	0151      	lsls	r1, r2, #5
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	440a      	add	r2, r1
 800394a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800394e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003952:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4413      	add	r3, r2
 800395c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	0151      	lsls	r1, r2, #5
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	440a      	add	r2, r1
 800396a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800396e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003972:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800397a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	f003 030f 	and.w	r3, r3, #15
 8003984:	2101      	movs	r1, #1
 8003986:	fa01 f303 	lsl.w	r3, r1, r3
 800398a:	b29b      	uxth	r3, r3
 800398c:	43db      	mvns	r3, r3
 800398e:	68f9      	ldr	r1, [r7, #12]
 8003990:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003994:	4013      	ands	r3, r2
 8003996:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800399e:	69da      	ldr	r2, [r3, #28]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	f003 030f 	and.w	r3, r3, #15
 80039a8:	2101      	movs	r1, #1
 80039aa:	fa01 f303 	lsl.w	r3, r1, r3
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	43db      	mvns	r3, r3
 80039b2:	68f9      	ldr	r1, [r7, #12]
 80039b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039b8:	4013      	ands	r3, r2
 80039ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	0159      	lsls	r1, r3, #5
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	440b      	add	r3, r1
 80039d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d6:	4619      	mov	r1, r3
 80039d8:	4b35      	ldr	r3, [pc, #212]	; (8003ab0 <USB_DeactivateEndpoint+0x1b0>)
 80039da:	4013      	ands	r3, r2
 80039dc:	600b      	str	r3, [r1, #0]
 80039de:	e060      	b.n	8003aa2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	015a      	lsls	r2, r3, #5
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039f6:	d11f      	bne.n	8003a38 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	0151      	lsls	r1, r2, #5
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	440a      	add	r2, r1
 8003a0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a16:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	0151      	lsls	r1, r2, #5
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	440a      	add	r2, r1
 8003a2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	f003 030f 	and.w	r3, r3, #15
 8003a48:	2101      	movs	r1, #1
 8003a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4e:	041b      	lsls	r3, r3, #16
 8003a50:	43db      	mvns	r3, r3
 8003a52:	68f9      	ldr	r1, [r7, #12]
 8003a54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a58:	4013      	ands	r3, r2
 8003a5a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a62:	69da      	ldr	r2, [r3, #28]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a72:	041b      	lsls	r3, r3, #16
 8003a74:	43db      	mvns	r3, r3
 8003a76:	68f9      	ldr	r1, [r7, #12]
 8003a78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	0159      	lsls	r1, r3, #5
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	440b      	add	r3, r1
 8003a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <USB_DeactivateEndpoint+0x1b4>)
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3714      	adds	r7, #20
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	ec337800 	.word	0xec337800
 8003ab4:	eff37800 	.word	0xeff37800

08003ab8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b08a      	sub	sp, #40	; 0x28
 8003abc:	af02      	add	r7, sp, #8
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	785b      	ldrb	r3, [r3, #1]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	f040 815c 	bne.w	8003d92 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d132      	bne.n	8003b48 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	015a      	lsls	r2, r3, #5
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	4413      	add	r3, r2
 8003aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	0151      	lsls	r1, r2, #5
 8003af4:	69fa      	ldr	r2, [r7, #28]
 8003af6:	440a      	add	r2, r1
 8003af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003afc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	015a      	lsls	r2, r3, #5
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	0151      	lsls	r1, r2, #5
 8003b18:	69fa      	ldr	r2, [r7, #28]
 8003b1a:	440a      	add	r2, r1
 8003b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	0151      	lsls	r1, r2, #5
 8003b38:	69fa      	ldr	r2, [r7, #28]
 8003b3a:	440a      	add	r2, r1
 8003b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b40:	0cdb      	lsrs	r3, r3, #19
 8003b42:	04db      	lsls	r3, r3, #19
 8003b44:	6113      	str	r3, [r2, #16]
 8003b46:	e074      	b.n	8003c32 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	0151      	lsls	r1, r2, #5
 8003b5a:	69fa      	ldr	r2, [r7, #28]
 8003b5c:	440a      	add	r2, r1
 8003b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b62:	0cdb      	lsrs	r3, r3, #19
 8003b64:	04db      	lsls	r3, r3, #19
 8003b66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	015a      	lsls	r2, r3, #5
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	0151      	lsls	r1, r2, #5
 8003b7a:	69fa      	ldr	r2, [r7, #28]
 8003b7c:	440a      	add	r2, r1
 8003b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b82:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b86:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b98:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	6999      	ldr	r1, [r3, #24]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	440b      	add	r3, r1
 8003ba4:	1e59      	subs	r1, r3, #1
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bae:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003bb0:	4b9d      	ldr	r3, [pc, #628]	; (8003e28 <USB_EPStartXfer+0x370>)
 8003bb2:	400b      	ands	r3, r1
 8003bb4:	69b9      	ldr	r1, [r7, #24]
 8003bb6:	0148      	lsls	r0, r1, #5
 8003bb8:	69f9      	ldr	r1, [r7, #28]
 8003bba:	4401      	add	r1, r0
 8003bbc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd0:	691a      	ldr	r2, [r3, #16]
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bda:	69b9      	ldr	r1, [r7, #24]
 8003bdc:	0148      	lsls	r0, r1, #5
 8003bde:	69f9      	ldr	r1, [r7, #28]
 8003be0:	4401      	add	r1, r0
 8003be2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003be6:	4313      	orrs	r3, r2
 8003be8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	791b      	ldrb	r3, [r3, #4]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d11f      	bne.n	8003c32 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	0151      	lsls	r1, r2, #5
 8003c04:	69fa      	ldr	r2, [r7, #28]
 8003c06:	440a      	add	r2, r1
 8003c08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c0c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003c10:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	015a      	lsls	r2, r3, #5
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	0151      	lsls	r1, r2, #5
 8003c24:	69fa      	ldr	r2, [r7, #28]
 8003c26:	440a      	add	r2, r1
 8003c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c30:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003c32:	79fb      	ldrb	r3, [r7, #7]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d14b      	bne.n	8003cd0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d009      	beq.n	8003c54 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	015a      	lsls	r2, r3, #5
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	791b      	ldrb	r3, [r3, #4]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d128      	bne.n	8003cae <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d110      	bne.n	8003c8e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	015a      	lsls	r2, r3, #5
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	0151      	lsls	r1, r2, #5
 8003c7e:	69fa      	ldr	r2, [r7, #28]
 8003c80:	440a      	add	r2, r1
 8003c82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c8a:	6013      	str	r3, [r2, #0]
 8003c8c:	e00f      	b.n	8003cae <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	015a      	lsls	r2, r3, #5
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	0151      	lsls	r1, r2, #5
 8003ca0:	69fa      	ldr	r2, [r7, #28]
 8003ca2:	440a      	add	r2, r1
 8003ca4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	015a      	lsls	r2, r3, #5
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	0151      	lsls	r1, r2, #5
 8003cc0:	69fa      	ldr	r2, [r7, #28]
 8003cc2:	440a      	add	r2, r1
 8003cc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cc8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	e133      	b.n	8003f38 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	0151      	lsls	r1, r2, #5
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	440a      	add	r2, r1
 8003ce6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003cee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	791b      	ldrb	r3, [r3, #4]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d015      	beq.n	8003d24 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 811b 	beq.w	8003f38 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	2101      	movs	r1, #1
 8003d14:	fa01 f303 	lsl.w	r3, r1, r3
 8003d18:	69f9      	ldr	r1, [r7, #28]
 8003d1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	634b      	str	r3, [r1, #52]	; 0x34
 8003d22:	e109      	b.n	8003f38 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d110      	bne.n	8003d56 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	015a      	lsls	r2, r3, #5
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	0151      	lsls	r1, r2, #5
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	440a      	add	r2, r1
 8003d4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	e00f      	b.n	8003d76 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	0151      	lsls	r1, r2, #5
 8003d68:	69fa      	ldr	r2, [r7, #28]
 8003d6a:	440a      	add	r2, r1
 8003d6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d74:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	6919      	ldr	r1, [r3, #16]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	781a      	ldrb	r2, [r3, #0]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	b298      	uxth	r0, r3
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	4603      	mov	r3, r0
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 fade 	bl	800434c <USB_WritePacket>
 8003d90:	e0d2      	b.n	8003f38 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	015a      	lsls	r2, r3, #5
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	0151      	lsls	r1, r2, #5
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	440a      	add	r2, r1
 8003da8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dac:	0cdb      	lsrs	r3, r3, #19
 8003dae:	04db      	lsls	r3, r3, #19
 8003db0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	015a      	lsls	r2, r3, #5
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	0151      	lsls	r1, r2, #5
 8003dc4:	69fa      	ldr	r2, [r7, #28]
 8003dc6:	440a      	add	r2, r1
 8003dc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dcc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003dd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003dd4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d126      	bne.n	8003e2c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dea:	691a      	ldr	r2, [r3, #16]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003df4:	69b9      	ldr	r1, [r7, #24]
 8003df6:	0148      	lsls	r0, r1, #5
 8003df8:	69f9      	ldr	r1, [r7, #28]
 8003dfa:	4401      	add	r1, r0
 8003dfc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003e00:	4313      	orrs	r3, r2
 8003e02:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	015a      	lsls	r2, r3, #5
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	0151      	lsls	r1, r2, #5
 8003e16:	69fa      	ldr	r2, [r7, #28]
 8003e18:	440a      	add	r2, r1
 8003e1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e22:	6113      	str	r3, [r2, #16]
 8003e24:	e03a      	b.n	8003e9c <USB_EPStartXfer+0x3e4>
 8003e26:	bf00      	nop
 8003e28:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	699a      	ldr	r2, [r3, #24]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	4413      	add	r3, r2
 8003e36:	1e5a      	subs	r2, r3, #1
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e40:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	8afa      	ldrh	r2, [r7, #22]
 8003e48:	fb03 f202 	mul.w	r2, r3, r2
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e5c:	691a      	ldr	r2, [r3, #16]
 8003e5e:	8afb      	ldrh	r3, [r7, #22]
 8003e60:	04d9      	lsls	r1, r3, #19
 8003e62:	4b38      	ldr	r3, [pc, #224]	; (8003f44 <USB_EPStartXfer+0x48c>)
 8003e64:	400b      	ands	r3, r1
 8003e66:	69b9      	ldr	r1, [r7, #24]
 8003e68:	0148      	lsls	r0, r1, #5
 8003e6a:	69f9      	ldr	r1, [r7, #28]
 8003e6c:	4401      	add	r1, r0
 8003e6e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003e72:	4313      	orrs	r3, r2
 8003e74:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e8c:	69b9      	ldr	r1, [r7, #24]
 8003e8e:	0148      	lsls	r0, r1, #5
 8003e90:	69f9      	ldr	r1, [r7, #28]
 8003e92:	4401      	add	r1, r0
 8003e94:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003e9c:	79fb      	ldrb	r3, [r7, #7]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d10d      	bne.n	8003ebe <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d009      	beq.n	8003ebe <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	6919      	ldr	r1, [r3, #16]
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eba:	460a      	mov	r2, r1
 8003ebc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	791b      	ldrb	r3, [r3, #4]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d128      	bne.n	8003f18 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d110      	bne.n	8003ef8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	015a      	lsls	r2, r3, #5
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	4413      	add	r3, r2
 8003ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	0151      	lsls	r1, r2, #5
 8003ee8:	69fa      	ldr	r2, [r7, #28]
 8003eea:	440a      	add	r2, r1
 8003eec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ef0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	e00f      	b.n	8003f18 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	0151      	lsls	r1, r2, #5
 8003f0a:	69fa      	ldr	r2, [r7, #28]
 8003f0c:	440a      	add	r2, r1
 8003f0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f16:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	0151      	lsls	r1, r2, #5
 8003f2a:	69fa      	ldr	r2, [r7, #28]
 8003f2c:	440a      	add	r2, r1
 8003f2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3720      	adds	r7, #32
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	1ff80000 	.word	0x1ff80000

08003f48 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	4613      	mov	r3, r2
 8003f54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	785b      	ldrb	r3, [r3, #1]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	f040 80ce 	bne.w	8004106 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d132      	bne.n	8003fd8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	015a      	lsls	r2, r3, #5
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	0151      	lsls	r1, r2, #5
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	440a      	add	r2, r1
 8003f88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	015a      	lsls	r2, r3, #5
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	0151      	lsls	r1, r2, #5
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	440a      	add	r2, r1
 8003fac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	0151      	lsls	r1, r2, #5
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	440a      	add	r2, r1
 8003fcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fd0:	0cdb      	lsrs	r3, r3, #19
 8003fd2:	04db      	lsls	r3, r3, #19
 8003fd4:	6113      	str	r3, [r2, #16]
 8003fd6:	e04e      	b.n	8004076 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	0151      	lsls	r1, r2, #5
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	440a      	add	r2, r1
 8003fee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ff2:	0cdb      	lsrs	r3, r3, #19
 8003ff4:	04db      	lsls	r3, r3, #19
 8003ff6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	015a      	lsls	r2, r3, #5
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	4413      	add	r3, r2
 8004000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	0151      	lsls	r1, r2, #5
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	440a      	add	r2, r1
 800400e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004012:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004016:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800401a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	699a      	ldr	r2, [r3, #24]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	429a      	cmp	r2, r3
 8004026:	d903      	bls.n	8004030 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	0151      	lsls	r1, r2, #5
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	440a      	add	r2, r1
 8004046:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800404a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800404e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	4413      	add	r3, r2
 8004058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004066:	6939      	ldr	r1, [r7, #16]
 8004068:	0148      	lsls	r0, r1, #5
 800406a:	6979      	ldr	r1, [r7, #20]
 800406c:	4401      	add	r1, r0
 800406e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004072:	4313      	orrs	r3, r2
 8004074:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004076:	79fb      	ldrb	r3, [r7, #7]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d11e      	bne.n	80040ba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d009      	beq.n	8004098 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	4413      	add	r3, r2
 800408c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004090:	461a      	mov	r2, r3
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	0151      	lsls	r1, r2, #5
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	440a      	add	r2, r1
 80040ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040b6:	6013      	str	r3, [r2, #0]
 80040b8:	e097      	b.n	80041ea <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	015a      	lsls	r2, r3, #5
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	4413      	add	r3, r2
 80040c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	0151      	lsls	r1, r2, #5
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	440a      	add	r2, r1
 80040d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040d8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 8083 	beq.w	80041ea <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	f003 030f 	and.w	r3, r3, #15
 80040f4:	2101      	movs	r1, #1
 80040f6:	fa01 f303 	lsl.w	r3, r1, r3
 80040fa:	6979      	ldr	r1, [r7, #20]
 80040fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004100:	4313      	orrs	r3, r2
 8004102:	634b      	str	r3, [r1, #52]	; 0x34
 8004104:	e071      	b.n	80041ea <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	4413      	add	r3, r2
 800410e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	0151      	lsls	r1, r2, #5
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	440a      	add	r2, r1
 800411c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004120:	0cdb      	lsrs	r3, r3, #19
 8004122:	04db      	lsls	r3, r3, #19
 8004124:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	4413      	add	r3, r2
 800412e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	0151      	lsls	r1, r2, #5
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	440a      	add	r2, r1
 800413c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004140:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004144:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004148:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	68da      	ldr	r2, [r3, #12]
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	4413      	add	r3, r2
 800416a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	0151      	lsls	r1, r2, #5
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	440a      	add	r2, r1
 8004178:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800417c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004180:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418e:	691a      	ldr	r2, [r3, #16]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004198:	6939      	ldr	r1, [r7, #16]
 800419a:	0148      	lsls	r0, r1, #5
 800419c:	6979      	ldr	r1, [r7, #20]
 800419e:	4401      	add	r1, r0
 80041a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041a4:	4313      	orrs	r3, r2
 80041a6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80041a8:	79fb      	ldrb	r3, [r7, #7]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d10d      	bne.n	80041ca <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d009      	beq.n	80041ca <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	6919      	ldr	r1, [r3, #16]
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c6:	460a      	mov	r2, r1
 80041c8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	0151      	lsls	r1, r2, #5
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	440a      	add	r2, r1
 80041e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	371c      	adds	r7, #28
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	785b      	ldrb	r3, [r3, #1]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d14a      	bne.n	80042ac <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	4413      	add	r3, r2
 8004220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800422a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800422e:	f040 8086 	bne.w	800433e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	4413      	add	r3, r2
 800423c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	7812      	ldrb	r2, [r2, #0]
 8004246:	0151      	lsls	r1, r2, #5
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	440a      	add	r2, r1
 800424c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004250:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004254:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	4413      	add	r3, r2
 8004260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	7812      	ldrb	r2, [r2, #0]
 800426a:	0151      	lsls	r1, r2, #5
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	440a      	add	r2, r1
 8004270:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004274:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004278:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	3301      	adds	r3, #1
 800427e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f242 7210 	movw	r2, #10000	; 0x2710
 8004286:	4293      	cmp	r3, r2
 8004288:	d902      	bls.n	8004290 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	75fb      	strb	r3, [r7, #23]
          break;
 800428e:	e056      	b.n	800433e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042a8:	d0e7      	beq.n	800427a <USB_EPStopXfer+0x82>
 80042aa:	e048      	b.n	800433e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042c4:	d13b      	bne.n	800433e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	7812      	ldrb	r2, [r2, #0]
 80042da:	0151      	lsls	r1, r2, #5
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	440a      	add	r2, r1
 80042e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042e8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	7812      	ldrb	r2, [r2, #0]
 80042fe:	0151      	lsls	r1, r2, #5
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	440a      	add	r2, r1
 8004304:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004308:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800430c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	3301      	adds	r3, #1
 8004312:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f242 7210 	movw	r2, #10000	; 0x2710
 800431a:	4293      	cmp	r3, r2
 800431c:	d902      	bls.n	8004324 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	75fb      	strb	r3, [r7, #23]
          break;
 8004322:	e00c      	b.n	800433e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004338:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800433c:	d0e7      	beq.n	800430e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800433e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004340:	4618      	mov	r0, r3
 8004342:	371c      	adds	r7, #28
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800434c:	b480      	push	{r7}
 800434e:	b089      	sub	sp, #36	; 0x24
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	4611      	mov	r1, r2
 8004358:	461a      	mov	r2, r3
 800435a:	460b      	mov	r3, r1
 800435c:	71fb      	strb	r3, [r7, #7]
 800435e:	4613      	mov	r3, r2
 8004360:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800436a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800436e:	2b00      	cmp	r3, #0
 8004370:	d123      	bne.n	80043ba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004372:	88bb      	ldrh	r3, [r7, #4]
 8004374:	3303      	adds	r3, #3
 8004376:	089b      	lsrs	r3, r3, #2
 8004378:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800437a:	2300      	movs	r3, #0
 800437c:	61bb      	str	r3, [r7, #24]
 800437e:	e018      	b.n	80043b2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004380:	79fb      	ldrb	r3, [r7, #7]
 8004382:	031a      	lsls	r2, r3, #12
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	4413      	add	r3, r2
 8004388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800438c:	461a      	mov	r2, r3
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	3301      	adds	r3, #1
 8004398:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	3301      	adds	r3, #1
 800439e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	3301      	adds	r3, #1
 80043a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	3301      	adds	r3, #1
 80043aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	3301      	adds	r3, #1
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d3e2      	bcc.n	8004380 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3724      	adds	r7, #36	; 0x24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b08b      	sub	sp, #44	; 0x2c
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	4613      	mov	r3, r2
 80043d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80043de:	88fb      	ldrh	r3, [r7, #6]
 80043e0:	089b      	lsrs	r3, r3, #2
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80043e6:	88fb      	ldrh	r3, [r7, #6]
 80043e8:	f003 0303 	and.w	r3, r3, #3
 80043ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80043ee:	2300      	movs	r3, #0
 80043f0:	623b      	str	r3, [r7, #32]
 80043f2:	e014      	b.n	800441e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	601a      	str	r2, [r3, #0]
    pDest++;
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	3301      	adds	r3, #1
 8004404:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	3301      	adds	r3, #1
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	3301      	adds	r3, #1
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	3301      	adds	r3, #1
 8004416:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	3301      	adds	r3, #1
 800441c:	623b      	str	r3, [r7, #32]
 800441e:	6a3a      	ldr	r2, [r7, #32]
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	429a      	cmp	r2, r3
 8004424:	d3e6      	bcc.n	80043f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004426:	8bfb      	ldrh	r3, [r7, #30]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d01e      	beq.n	800446a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004436:	461a      	mov	r2, r3
 8004438:	f107 0310 	add.w	r3, r7, #16
 800443c:	6812      	ldr	r2, [r2, #0]
 800443e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
 800444c:	b2da      	uxtb	r2, r3
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	701a      	strb	r2, [r3, #0]
      i++;
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	3301      	adds	r3, #1
 8004456:	623b      	str	r3, [r7, #32]
      pDest++;
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	3301      	adds	r3, #1
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800445e:	8bfb      	ldrh	r3, [r7, #30]
 8004460:	3b01      	subs	r3, #1
 8004462:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004464:	8bfb      	ldrh	r3, [r7, #30]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1ea      	bne.n	8004440 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800446c:	4618      	mov	r0, r3
 800446e:	372c      	adds	r7, #44	; 0x2c
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	785b      	ldrb	r3, [r3, #1]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d12c      	bne.n	80044ee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	db12      	blt.n	80044cc <USB_EPSetStall+0x54>
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00f      	beq.n	80044cc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	0151      	lsls	r1, r2, #5
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	440a      	add	r2, r1
 80044c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80044ca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	0151      	lsls	r1, r2, #5
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	440a      	add	r2, r1
 80044e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044ea:	6013      	str	r3, [r2, #0]
 80044ec:	e02b      	b.n	8004546 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	db12      	blt.n	8004526 <USB_EPSetStall+0xae>
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00f      	beq.n	8004526 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	4413      	add	r3, r2
 800450e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	0151      	lsls	r1, r2, #5
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	440a      	add	r2, r1
 800451c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004520:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004524:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	015a      	lsls	r2, r3, #5
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	4413      	add	r3, r2
 800452e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	0151      	lsls	r1, r2, #5
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	440a      	add	r2, r1
 800453c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004540:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004544:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	785b      	ldrb	r3, [r3, #1]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d128      	bne.n	80045c2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4413      	add	r3, r2
 8004578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	0151      	lsls	r1, r2, #5
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	440a      	add	r2, r1
 8004586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800458a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800458e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	791b      	ldrb	r3, [r3, #4]
 8004594:	2b03      	cmp	r3, #3
 8004596:	d003      	beq.n	80045a0 <USB_EPClearStall+0x4c>
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	791b      	ldrb	r3, [r3, #4]
 800459c:	2b02      	cmp	r3, #2
 800459e:	d138      	bne.n	8004612 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	015a      	lsls	r2, r3, #5
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4413      	add	r3, r2
 80045a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	0151      	lsls	r1, r2, #5
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	440a      	add	r2, r1
 80045b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045be:	6013      	str	r3, [r2, #0]
 80045c0:	e027      	b.n	8004612 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	0151      	lsls	r1, r2, #5
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	440a      	add	r2, r1
 80045d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	791b      	ldrb	r3, [r3, #4]
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	d003      	beq.n	80045f2 <USB_EPClearStall+0x9e>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	791b      	ldrb	r3, [r3, #4]
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d10f      	bne.n	8004612 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	0151      	lsls	r1, r2, #5
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	440a      	add	r2, r1
 8004608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800460c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004610:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800463e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004642:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	78fb      	ldrb	r3, [r7, #3]
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004654:	68f9      	ldr	r1, [r7, #12]
 8004656:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800465a:	4313      	orrs	r3, r2
 800465c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004686:	f023 0303 	bic.w	r3, r3, #3
 800468a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800469a:	f023 0302 	bic.w	r3, r3, #2
 800469e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b085      	sub	sp, #20
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80046c8:	f023 0303 	bic.w	r3, r3, #3
 80046cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046dc:	f043 0302 	orr.w	r3, r3, #2
 80046e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	4013      	ands	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004708:	68fb      	ldr	r3, [r7, #12]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004716:	b480      	push	{r7}
 8004718:	b085      	sub	sp, #20
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	4013      	ands	r3, r2
 8004738:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	0c1b      	lsrs	r3, r3, #16
}
 800473e:	4618      	mov	r0, r3
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800474a:	b480      	push	{r7}
 800474c:	b085      	sub	sp, #20
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004766:	69db      	ldr	r3, [r3, #28]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	4013      	ands	r3, r2
 800476c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	b29b      	uxth	r3, r3
}
 8004772:	4618      	mov	r0, r3
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800477e:	b480      	push	{r7}
 8004780:	b085      	sub	sp, #20
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	460b      	mov	r3, r1
 8004788:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800478e:	78fb      	ldrb	r3, [r7, #3]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	4013      	ands	r3, r2
 80047aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80047ac:	68bb      	ldr	r3, [r7, #8]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b087      	sub	sp, #28
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	460b      	mov	r3, r1
 80047c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047dc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80047de:	78fb      	ldrb	r3, [r7, #3]
 80047e0:	f003 030f 	and.w	r3, r3, #15
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	fa22 f303 	lsr.w	r3, r2, r3
 80047ea:	01db      	lsls	r3, r3, #7
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80047f4:	78fb      	ldrb	r3, [r7, #3]
 80047f6:	015a      	lsls	r2, r3, #5
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	4013      	ands	r3, r2
 8004806:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004808:	68bb      	ldr	r3, [r7, #8]
}
 800480a:	4618      	mov	r0, r3
 800480c:	371c      	adds	r7, #28
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	f003 0301 	and.w	r3, r3, #1
}
 8004826:	4618      	mov	r0, r3
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004832:	b480      	push	{r7}
 8004834:	b085      	sub	sp, #20
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800484c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004850:	f023 0307 	bic.w	r3, r3, #7
 8004854:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004868:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	460b      	mov	r3, r1
 8004882:	607a      	str	r2, [r7, #4]
 8004884:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	333c      	adds	r3, #60	; 0x3c
 800488e:	3304      	adds	r3, #4
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	4a26      	ldr	r2, [pc, #152]	; (8004930 <USB_EP0_OutStart+0xb8>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d90a      	bls.n	80048b2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048ac:	d101      	bne.n	80048b2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	e037      	b.n	8004922 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b8:	461a      	mov	r2, r3
 80048ba:	2300      	movs	r3, #0
 80048bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048e0:	f043 0318 	orr.w	r3, r3, #24
 80048e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048f4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80048f8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80048fa:	7afb      	ldrb	r3, [r7, #11]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d10f      	bne.n	8004920 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004906:	461a      	mov	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800491a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800491e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	371c      	adds	r7, #28
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	4f54300a 	.word	0x4f54300a

08004934 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800493c:	2300      	movs	r3, #0
 800493e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	3301      	adds	r3, #1
 8004944:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4a13      	ldr	r2, [pc, #76]	; (8004998 <USB_CoreReset+0x64>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d901      	bls.n	8004952 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e01b      	b.n	800498a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2b00      	cmp	r3, #0
 8004958:	daf2      	bge.n	8004940 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800495a:	2300      	movs	r3, #0
 800495c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f043 0201 	orr.w	r2, r3, #1
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	3301      	adds	r3, #1
 800496e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4a09      	ldr	r2, [pc, #36]	; (8004998 <USB_CoreReset+0x64>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d901      	bls.n	800497c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e006      	b.n	800498a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b01      	cmp	r3, #1
 8004986:	d0f0      	beq.n	800496a <USB_CoreReset+0x36>

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	00030d40 	.word	0x00030d40

0800499c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	460b      	mov	r3, r1
 80049a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80049a8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80049ac:	f002 fc28 	bl	8007200 <USBD_static_malloc>
 80049b0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d109      	bne.n	80049cc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	32b0      	adds	r2, #176	; 0xb0
 80049c2:	2100      	movs	r1, #0
 80049c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80049c8:	2302      	movs	r3, #2
 80049ca:	e0d4      	b.n	8004b76 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80049cc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80049d0:	2100      	movs	r1, #0
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f002 fc7c 	bl	80072d0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	32b0      	adds	r2, #176	; 0xb0
 80049e2:	68f9      	ldr	r1, [r7, #12]
 80049e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	32b0      	adds	r2, #176	; 0xb0
 80049f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	7c1b      	ldrb	r3, [r3, #16]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d138      	bne.n	8004a76 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004a04:	4b5e      	ldr	r3, [pc, #376]	; (8004b80 <USBD_CDC_Init+0x1e4>)
 8004a06:	7819      	ldrb	r1, [r3, #0]
 8004a08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f002 fad3 	bl	8006fba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004a14:	4b5a      	ldr	r3, [pc, #360]	; (8004b80 <USBD_CDC_Init+0x1e4>)
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	f003 020f 	and.w	r2, r3, #15
 8004a1c:	6879      	ldr	r1, [r7, #4]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4413      	add	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	440b      	add	r3, r1
 8004a28:	3324      	adds	r3, #36	; 0x24
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004a2e:	4b55      	ldr	r3, [pc, #340]	; (8004b84 <USBD_CDC_Init+0x1e8>)
 8004a30:	7819      	ldrb	r1, [r3, #0]
 8004a32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a36:	2202      	movs	r2, #2
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f002 fabe 	bl	8006fba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004a3e:	4b51      	ldr	r3, [pc, #324]	; (8004b84 <USBD_CDC_Init+0x1e8>)
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	f003 020f 	and.w	r2, r3, #15
 8004a46:	6879      	ldr	r1, [r7, #4]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	440b      	add	r3, r1
 8004a52:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004a56:	2201      	movs	r2, #1
 8004a58:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004a5a:	4b4b      	ldr	r3, [pc, #300]	; (8004b88 <USBD_CDC_Init+0x1ec>)
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	f003 020f 	and.w	r2, r3, #15
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	4613      	mov	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	440b      	add	r3, r1
 8004a6e:	3326      	adds	r3, #38	; 0x26
 8004a70:	2210      	movs	r2, #16
 8004a72:	801a      	strh	r2, [r3, #0]
 8004a74:	e035      	b.n	8004ae2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004a76:	4b42      	ldr	r3, [pc, #264]	; (8004b80 <USBD_CDC_Init+0x1e4>)
 8004a78:	7819      	ldrb	r1, [r3, #0]
 8004a7a:	2340      	movs	r3, #64	; 0x40
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f002 fa9b 	bl	8006fba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004a84:	4b3e      	ldr	r3, [pc, #248]	; (8004b80 <USBD_CDC_Init+0x1e4>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	f003 020f 	and.w	r2, r3, #15
 8004a8c:	6879      	ldr	r1, [r7, #4]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4413      	add	r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	440b      	add	r3, r1
 8004a98:	3324      	adds	r3, #36	; 0x24
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004a9e:	4b39      	ldr	r3, [pc, #228]	; (8004b84 <USBD_CDC_Init+0x1e8>)
 8004aa0:	7819      	ldrb	r1, [r3, #0]
 8004aa2:	2340      	movs	r3, #64	; 0x40
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f002 fa87 	bl	8006fba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004aac:	4b35      	ldr	r3, [pc, #212]	; (8004b84 <USBD_CDC_Init+0x1e8>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	f003 020f 	and.w	r2, r3, #15
 8004ab4:	6879      	ldr	r1, [r7, #4]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	440b      	add	r3, r1
 8004ac0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004ac8:	4b2f      	ldr	r3, [pc, #188]	; (8004b88 <USBD_CDC_Init+0x1ec>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	f003 020f 	and.w	r2, r3, #15
 8004ad0:	6879      	ldr	r1, [r7, #4]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	440b      	add	r3, r1
 8004adc:	3326      	adds	r3, #38	; 0x26
 8004ade:	2210      	movs	r2, #16
 8004ae0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004ae2:	4b29      	ldr	r3, [pc, #164]	; (8004b88 <USBD_CDC_Init+0x1ec>)
 8004ae4:	7819      	ldrb	r1, [r3, #0]
 8004ae6:	2308      	movs	r3, #8
 8004ae8:	2203      	movs	r2, #3
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f002 fa65 	bl	8006fba <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004af0:	4b25      	ldr	r3, [pc, #148]	; (8004b88 <USBD_CDC_Init+0x1ec>)
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	f003 020f 	and.w	r2, r3, #15
 8004af8:	6879      	ldr	r1, [r7, #4]
 8004afa:	4613      	mov	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	440b      	add	r3, r1
 8004b04:	3324      	adds	r3, #36	; 0x24
 8004b06:	2201      	movs	r2, #1
 8004b08:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	33b0      	adds	r3, #176	; 0xb0
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004b40:	2302      	movs	r3, #2
 8004b42:	e018      	b.n	8004b76 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	7c1b      	ldrb	r3, [r3, #16]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10a      	bne.n	8004b62 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004b4c:	4b0d      	ldr	r3, [pc, #52]	; (8004b84 <USBD_CDC_Init+0x1e8>)
 8004b4e:	7819      	ldrb	r1, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f002 fb1c 	bl	8007198 <USBD_LL_PrepareReceive>
 8004b60:	e008      	b.n	8004b74 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004b62:	4b08      	ldr	r3, [pc, #32]	; (8004b84 <USBD_CDC_Init+0x1e8>)
 8004b64:	7819      	ldrb	r1, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b6c:	2340      	movs	r3, #64	; 0x40
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f002 fb12 	bl	8007198 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	200000f3 	.word	0x200000f3
 8004b84:	200000f4 	.word	0x200000f4
 8004b88:	200000f5 	.word	0x200000f5

08004b8c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	460b      	mov	r3, r1
 8004b96:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004b98:	4b3a      	ldr	r3, [pc, #232]	; (8004c84 <USBD_CDC_DeInit+0xf8>)
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f002 fa31 	bl	8007006 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004ba4:	4b37      	ldr	r3, [pc, #220]	; (8004c84 <USBD_CDC_DeInit+0xf8>)
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	f003 020f 	and.w	r2, r3, #15
 8004bac:	6879      	ldr	r1, [r7, #4]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	440b      	add	r3, r1
 8004bb8:	3324      	adds	r3, #36	; 0x24
 8004bba:	2200      	movs	r2, #0
 8004bbc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004bbe:	4b32      	ldr	r3, [pc, #200]	; (8004c88 <USBD_CDC_DeInit+0xfc>)
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f002 fa1e 	bl	8007006 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004bca:	4b2f      	ldr	r3, [pc, #188]	; (8004c88 <USBD_CDC_DeInit+0xfc>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	f003 020f 	and.w	r2, r3, #15
 8004bd2:	6879      	ldr	r1, [r7, #4]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	440b      	add	r3, r1
 8004bde:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004be2:	2200      	movs	r2, #0
 8004be4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004be6:	4b29      	ldr	r3, [pc, #164]	; (8004c8c <USBD_CDC_DeInit+0x100>)
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	4619      	mov	r1, r3
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f002 fa0a 	bl	8007006 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004bf2:	4b26      	ldr	r3, [pc, #152]	; (8004c8c <USBD_CDC_DeInit+0x100>)
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	f003 020f 	and.w	r2, r3, #15
 8004bfa:	6879      	ldr	r1, [r7, #4]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	440b      	add	r3, r1
 8004c06:	3324      	adds	r3, #36	; 0x24
 8004c08:	2200      	movs	r2, #0
 8004c0a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004c0c:	4b1f      	ldr	r3, [pc, #124]	; (8004c8c <USBD_CDC_DeInit+0x100>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	f003 020f 	and.w	r2, r3, #15
 8004c14:	6879      	ldr	r1, [r7, #4]
 8004c16:	4613      	mov	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	440b      	add	r3, r1
 8004c20:	3326      	adds	r3, #38	; 0x26
 8004c22:	2200      	movs	r2, #0
 8004c24:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	32b0      	adds	r2, #176	; 0xb0
 8004c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d01f      	beq.n	8004c78 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	33b0      	adds	r3, #176	; 0xb0
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	32b0      	adds	r2, #176	; 0xb0
 8004c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f002 fade 	bl	800721c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	32b0      	adds	r2, #176	; 0xb0
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	200000f3 	.word	0x200000f3
 8004c88:	200000f4 	.word	0x200000f4
 8004c8c:	200000f5 	.word	0x200000f5

08004c90 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	32b0      	adds	r2, #176	; 0xb0
 8004ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ca8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d101      	bne.n	8004cc0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e0bf      	b.n	8004e40 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d050      	beq.n	8004d6e <USBD_CDC_Setup+0xde>
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	f040 80af 	bne.w	8004e30 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	88db      	ldrh	r3, [r3, #6]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d03a      	beq.n	8004d50 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	b25b      	sxtb	r3, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	da1b      	bge.n	8004d1c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	33b0      	adds	r3, #176	; 0xb0
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004cfa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	88d2      	ldrh	r2, [r2, #6]
 8004d00:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	88db      	ldrh	r3, [r3, #6]
 8004d06:	2b07      	cmp	r3, #7
 8004d08:	bf28      	it	cs
 8004d0a:	2307      	movcs	r3, #7
 8004d0c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	89fa      	ldrh	r2, [r7, #14]
 8004d12:	4619      	mov	r1, r3
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f001 fd43 	bl	80067a0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004d1a:	e090      	b.n	8004e3e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	785a      	ldrb	r2, [r3, #1]
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	88db      	ldrh	r3, [r3, #6]
 8004d2a:	2b3f      	cmp	r3, #63	; 0x3f
 8004d2c:	d803      	bhi.n	8004d36 <USBD_CDC_Setup+0xa6>
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	88db      	ldrh	r3, [r3, #6]
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	e000      	b.n	8004d38 <USBD_CDC_Setup+0xa8>
 8004d36:	2240      	movs	r2, #64	; 0x40
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004d3e:	6939      	ldr	r1, [r7, #16]
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004d46:	461a      	mov	r2, r3
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f001 fd55 	bl	80067f8 <USBD_CtlPrepareRx>
      break;
 8004d4e:	e076      	b.n	8004e3e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	33b0      	adds	r3, #176	; 0xb0
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	7850      	ldrb	r0, [r2, #1]
 8004d66:	2200      	movs	r2, #0
 8004d68:	6839      	ldr	r1, [r7, #0]
 8004d6a:	4798      	blx	r3
      break;
 8004d6c:	e067      	b.n	8004e3e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	785b      	ldrb	r3, [r3, #1]
 8004d72:	2b0b      	cmp	r3, #11
 8004d74:	d851      	bhi.n	8004e1a <USBD_CDC_Setup+0x18a>
 8004d76:	a201      	add	r2, pc, #4	; (adr r2, 8004d7c <USBD_CDC_Setup+0xec>)
 8004d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7c:	08004dad 	.word	0x08004dad
 8004d80:	08004e29 	.word	0x08004e29
 8004d84:	08004e1b 	.word	0x08004e1b
 8004d88:	08004e1b 	.word	0x08004e1b
 8004d8c:	08004e1b 	.word	0x08004e1b
 8004d90:	08004e1b 	.word	0x08004e1b
 8004d94:	08004e1b 	.word	0x08004e1b
 8004d98:	08004e1b 	.word	0x08004e1b
 8004d9c:	08004e1b 	.word	0x08004e1b
 8004da0:	08004e1b 	.word	0x08004e1b
 8004da4:	08004dd7 	.word	0x08004dd7
 8004da8:	08004e01 	.word	0x08004e01
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b03      	cmp	r3, #3
 8004db6:	d107      	bne.n	8004dc8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004db8:	f107 030a 	add.w	r3, r7, #10
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f001 fced 	bl	80067a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004dc6:	e032      	b.n	8004e2e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004dc8:	6839      	ldr	r1, [r7, #0]
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f001 fc77 	bl	80066be <USBD_CtlError>
            ret = USBD_FAIL;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	75fb      	strb	r3, [r7, #23]
          break;
 8004dd4:	e02b      	b.n	8004e2e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b03      	cmp	r3, #3
 8004de0:	d107      	bne.n	8004df2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004de2:	f107 030d 	add.w	r3, r7, #13
 8004de6:	2201      	movs	r2, #1
 8004de8:	4619      	mov	r1, r3
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f001 fcd8 	bl	80067a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004df0:	e01d      	b.n	8004e2e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004df2:	6839      	ldr	r1, [r7, #0]
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f001 fc62 	bl	80066be <USBD_CtlError>
            ret = USBD_FAIL;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	75fb      	strb	r3, [r7, #23]
          break;
 8004dfe:	e016      	b.n	8004e2e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b03      	cmp	r3, #3
 8004e0a:	d00f      	beq.n	8004e2c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004e0c:	6839      	ldr	r1, [r7, #0]
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f001 fc55 	bl	80066be <USBD_CtlError>
            ret = USBD_FAIL;
 8004e14:	2303      	movs	r3, #3
 8004e16:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004e18:	e008      	b.n	8004e2c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004e1a:	6839      	ldr	r1, [r7, #0]
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f001 fc4e 	bl	80066be <USBD_CtlError>
          ret = USBD_FAIL;
 8004e22:	2303      	movs	r3, #3
 8004e24:	75fb      	strb	r3, [r7, #23]
          break;
 8004e26:	e002      	b.n	8004e2e <USBD_CDC_Setup+0x19e>
          break;
 8004e28:	bf00      	nop
 8004e2a:	e008      	b.n	8004e3e <USBD_CDC_Setup+0x1ae>
          break;
 8004e2c:	bf00      	nop
      }
      break;
 8004e2e:	e006      	b.n	8004e3e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004e30:	6839      	ldr	r1, [r7, #0]
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f001 fc43 	bl	80066be <USBD_CtlError>
      ret = USBD_FAIL;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e3c:	bf00      	nop
  }

  return (uint8_t)ret;
 8004e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3718      	adds	r7, #24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	460b      	mov	r3, r1
 8004e52:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004e5a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	32b0      	adds	r2, #176	; 0xb0
 8004e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e065      	b.n	8004f3e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	32b0      	adds	r2, #176	; 0xb0
 8004e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e80:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004e82:	78fb      	ldrb	r3, [r7, #3]
 8004e84:	f003 020f 	and.w	r2, r3, #15
 8004e88:	6879      	ldr	r1, [r7, #4]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	440b      	add	r3, r1
 8004e94:	3318      	adds	r3, #24
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d02f      	beq.n	8004efc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004e9c:	78fb      	ldrb	r3, [r7, #3]
 8004e9e:	f003 020f 	and.w	r2, r3, #15
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	440b      	add	r3, r1
 8004eae:	3318      	adds	r3, #24
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	78fb      	ldrb	r3, [r7, #3]
 8004eb4:	f003 010f 	and.w	r1, r3, #15
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	460b      	mov	r3, r1
 8004ebc:	00db      	lsls	r3, r3, #3
 8004ebe:	440b      	add	r3, r1
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4403      	add	r3, r0
 8004ec4:	3348      	adds	r3, #72	; 0x48
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	fbb2 f1f3 	udiv	r1, r2, r3
 8004ecc:	fb01 f303 	mul.w	r3, r1, r3
 8004ed0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d112      	bne.n	8004efc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004ed6:	78fb      	ldrb	r3, [r7, #3]
 8004ed8:	f003 020f 	and.w	r2, r3, #15
 8004edc:	6879      	ldr	r1, [r7, #4]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	440b      	add	r3, r1
 8004ee8:	3318      	adds	r3, #24
 8004eea:	2200      	movs	r2, #0
 8004eec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004eee:	78f9      	ldrb	r1, [r7, #3]
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f002 f92e 	bl	8007156 <USBD_LL_Transmit>
 8004efa:	e01f      	b.n	8004f3c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	33b0      	adds	r3, #176	; 0xb0
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d010      	beq.n	8004f3c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	33b0      	adds	r3, #176	; 0xb0
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004f38:	78fa      	ldrb	r2, [r7, #3]
 8004f3a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b084      	sub	sp, #16
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
 8004f4e:	460b      	mov	r3, r1
 8004f50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	32b0      	adds	r2, #176	; 0xb0
 8004f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f60:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	32b0      	adds	r2, #176	; 0xb0
 8004f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e01a      	b.n	8004fae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004f78:	78fb      	ldrb	r3, [r7, #3]
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f002 f92c 	bl	80071da <USBD_LL_GetRxDataSize>
 8004f82:	4602      	mov	r2, r0
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	33b0      	adds	r3, #176	; 0xb0
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004fa8:	4611      	mov	r1, r2
 8004faa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b084      	sub	sp, #16
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	32b0      	adds	r2, #176	; 0xb0
 8004fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fcc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e025      	b.n	8005024 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	33b0      	adds	r3, #176	; 0xb0
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d01a      	beq.n	8005022 <USBD_CDC_EP0_RxReady+0x6c>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004ff2:	2bff      	cmp	r3, #255	; 0xff
 8004ff4:	d015      	beq.n	8005022 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	33b0      	adds	r3, #176	; 0xb0
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800500e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005016:	b292      	uxth	r2, r2
 8005018:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	22ff      	movs	r2, #255	; 0xff
 800501e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005034:	2182      	movs	r1, #130	; 0x82
 8005036:	4818      	ldr	r0, [pc, #96]	; (8005098 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005038:	f000 fd09 	bl	8005a4e <USBD_GetEpDesc>
 800503c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800503e:	2101      	movs	r1, #1
 8005040:	4815      	ldr	r0, [pc, #84]	; (8005098 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005042:	f000 fd04 	bl	8005a4e <USBD_GetEpDesc>
 8005046:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005048:	2181      	movs	r1, #129	; 0x81
 800504a:	4813      	ldr	r0, [pc, #76]	; (8005098 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800504c:	f000 fcff 	bl	8005a4e <USBD_GetEpDesc>
 8005050:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d002      	beq.n	800505e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	2210      	movs	r2, #16
 800505c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d006      	beq.n	8005072 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	2200      	movs	r2, #0
 8005068:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800506c:	711a      	strb	r2, [r3, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d006      	beq.n	8005086 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005080:	711a      	strb	r2, [r3, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2243      	movs	r2, #67	; 0x43
 800508a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800508c:	4b02      	ldr	r3, [pc, #8]	; (8005098 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800508e:	4618      	mov	r0, r3
 8005090:	3718      	adds	r7, #24
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	200000b0 	.word	0x200000b0

0800509c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80050a4:	2182      	movs	r1, #130	; 0x82
 80050a6:	4818      	ldr	r0, [pc, #96]	; (8005108 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80050a8:	f000 fcd1 	bl	8005a4e <USBD_GetEpDesc>
 80050ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80050ae:	2101      	movs	r1, #1
 80050b0:	4815      	ldr	r0, [pc, #84]	; (8005108 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80050b2:	f000 fccc 	bl	8005a4e <USBD_GetEpDesc>
 80050b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80050b8:	2181      	movs	r1, #129	; 0x81
 80050ba:	4813      	ldr	r0, [pc, #76]	; (8005108 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80050bc:	f000 fcc7 	bl	8005a4e <USBD_GetEpDesc>
 80050c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d002      	beq.n	80050ce <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2210      	movs	r2, #16
 80050cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d006      	beq.n	80050e2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	2200      	movs	r2, #0
 80050d8:	711a      	strb	r2, [r3, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f042 0202 	orr.w	r2, r2, #2
 80050e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d006      	beq.n	80050f6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	711a      	strb	r2, [r3, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f042 0202 	orr.w	r2, r2, #2
 80050f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2243      	movs	r2, #67	; 0x43
 80050fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80050fc:	4b02      	ldr	r3, [pc, #8]	; (8005108 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	200000b0 	.word	0x200000b0

0800510c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005114:	2182      	movs	r1, #130	; 0x82
 8005116:	4818      	ldr	r0, [pc, #96]	; (8005178 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005118:	f000 fc99 	bl	8005a4e <USBD_GetEpDesc>
 800511c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800511e:	2101      	movs	r1, #1
 8005120:	4815      	ldr	r0, [pc, #84]	; (8005178 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005122:	f000 fc94 	bl	8005a4e <USBD_GetEpDesc>
 8005126:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005128:	2181      	movs	r1, #129	; 0x81
 800512a:	4813      	ldr	r0, [pc, #76]	; (8005178 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800512c:	f000 fc8f 	bl	8005a4e <USBD_GetEpDesc>
 8005130:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	2210      	movs	r2, #16
 800513c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d006      	beq.n	8005152 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	2200      	movs	r2, #0
 8005148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800514c:	711a      	strb	r2, [r3, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d006      	beq.n	8005166 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005160:	711a      	strb	r2, [r3, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2243      	movs	r2, #67	; 0x43
 800516a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800516c:	4b02      	ldr	r3, [pc, #8]	; (8005178 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800516e:	4618      	mov	r0, r3
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	200000b0 	.word	0x200000b0

0800517c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	220a      	movs	r2, #10
 8005188:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800518a:	4b03      	ldr	r3, [pc, #12]	; (8005198 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800518c:	4618      	mov	r0, r3
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr
 8005198:	2000006c 	.word	0x2000006c

0800519c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e009      	b.n	80051c4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	33b0      	adds	r3, #176	; 0xb0
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	32b0      	adds	r2, #176	; 0xb0
 80051e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ea:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e008      	b.n	8005208 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	371c      	adds	r7, #28
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	32b0      	adds	r2, #176	; 0xb0
 8005228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800522c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005234:	2303      	movs	r3, #3
 8005236:	e004      	b.n	8005242 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
	...

08005250 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	32b0      	adds	r2, #176	; 0xb0
 8005262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005266:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	32b0      	adds	r2, #176	; 0xb0
 8005272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800527a:	2303      	movs	r3, #3
 800527c:	e018      	b.n	80052b0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	7c1b      	ldrb	r3, [r3, #16]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10a      	bne.n	800529c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005286:	4b0c      	ldr	r3, [pc, #48]	; (80052b8 <USBD_CDC_ReceivePacket+0x68>)
 8005288:	7819      	ldrb	r1, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005290:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f001 ff7f 	bl	8007198 <USBD_LL_PrepareReceive>
 800529a:	e008      	b.n	80052ae <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800529c:	4b06      	ldr	r3, [pc, #24]	; (80052b8 <USBD_CDC_ReceivePacket+0x68>)
 800529e:	7819      	ldrb	r1, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052a6:	2340      	movs	r3, #64	; 0x40
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f001 ff75 	bl	8007198 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	200000f4 	.word	0x200000f4

080052bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	4613      	mov	r3, r2
 80052c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d101      	bne.n	80052d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e01f      	b.n	8005314 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	79fa      	ldrb	r2, [r7, #7]
 8005306:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f001 fdef 	bl	8006eec <USBD_LL_Init>
 800530e:	4603      	mov	r3, r0
 8005310:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005312:	7dfb      	ldrb	r3, [r7, #23]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3718      	adds	r7, #24
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005326:	2300      	movs	r3, #0
 8005328:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005330:	2303      	movs	r3, #3
 8005332:	e025      	b.n	8005380 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	32ae      	adds	r2, #174	; 0xae
 8005346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800534a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00f      	beq.n	8005370 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	32ae      	adds	r2, #174	; 0xae
 800535a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800535e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005360:	f107 020e 	add.w	r2, r7, #14
 8005364:	4610      	mov	r0, r2
 8005366:	4798      	blx	r3
 8005368:	4602      	mov	r2, r0
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005376:	1c5a      	adds	r2, r3, #1
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f001 fdf7 	bl	8006f84 <USBD_LL_Start>
 8005396:	4603      	mov	r3, r0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80053a8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b084      	sub	sp, #16
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	460b      	mov	r3, r1
 80053c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80053c2:	2300      	movs	r3, #0
 80053c4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d009      	beq.n	80053e4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	78fa      	ldrb	r2, [r7, #3]
 80053da:	4611      	mov	r1, r2
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	4798      	blx	r3
 80053e0:	4603      	mov	r3, r0
 80053e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80053e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b084      	sub	sp, #16
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
 80053f6:	460b      	mov	r3, r1
 80053f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	78fa      	ldrb	r2, [r7, #3]
 8005408:	4611      	mov	r1, r2
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	4798      	blx	r3
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005414:	2303      	movs	r3, #3
 8005416:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005418:	7bfb      	ldrb	r3, [r7, #15]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b084      	sub	sp, #16
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
 800542a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005432:	6839      	ldr	r1, [r7, #0]
 8005434:	4618      	mov	r0, r3
 8005436:	f001 f908 	bl	800664a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005448:	461a      	mov	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005456:	f003 031f 	and.w	r3, r3, #31
 800545a:	2b02      	cmp	r3, #2
 800545c:	d01a      	beq.n	8005494 <USBD_LL_SetupStage+0x72>
 800545e:	2b02      	cmp	r3, #2
 8005460:	d822      	bhi.n	80054a8 <USBD_LL_SetupStage+0x86>
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <USBD_LL_SetupStage+0x4a>
 8005466:	2b01      	cmp	r3, #1
 8005468:	d00a      	beq.n	8005480 <USBD_LL_SetupStage+0x5e>
 800546a:	e01d      	b.n	80054a8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005472:	4619      	mov	r1, r3
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 fb5f 	bl	8005b38 <USBD_StdDevReq>
 800547a:	4603      	mov	r3, r0
 800547c:	73fb      	strb	r3, [r7, #15]
      break;
 800547e:	e020      	b.n	80054c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005486:	4619      	mov	r1, r3
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 fbc7 	bl	8005c1c <USBD_StdItfReq>
 800548e:	4603      	mov	r3, r0
 8005490:	73fb      	strb	r3, [r7, #15]
      break;
 8005492:	e016      	b.n	80054c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800549a:	4619      	mov	r1, r3
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 fc29 	bl	8005cf4 <USBD_StdEPReq>
 80054a2:	4603      	mov	r3, r0
 80054a4:	73fb      	strb	r3, [r7, #15]
      break;
 80054a6:	e00c      	b.n	80054c2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80054ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	4619      	mov	r1, r3
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f001 fdc4 	bl	8007044 <USBD_LL_StallEP>
 80054bc:	4603      	mov	r3, r0
 80054be:	73fb      	strb	r3, [r7, #15]
      break;
 80054c0:	bf00      	nop
  }

  return ret;
 80054c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	460b      	mov	r3, r1
 80054d6:	607a      	str	r2, [r7, #4]
 80054d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80054da:	2300      	movs	r3, #0
 80054dc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80054de:	7afb      	ldrb	r3, [r7, #11]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d16e      	bne.n	80055c2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80054ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80054f2:	2b03      	cmp	r3, #3
 80054f4:	f040 8098 	bne.w	8005628 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	429a      	cmp	r2, r3
 8005502:	d913      	bls.n	800552c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	1ad2      	subs	r2, r2, r3
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	68da      	ldr	r2, [r3, #12]
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	4293      	cmp	r3, r2
 800551c:	bf28      	it	cs
 800551e:	4613      	movcs	r3, r2
 8005520:	461a      	mov	r2, r3
 8005522:	6879      	ldr	r1, [r7, #4]
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f001 f984 	bl	8006832 <USBD_CtlContinueRx>
 800552a:	e07d      	b.n	8005628 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005532:	f003 031f 	and.w	r3, r3, #31
 8005536:	2b02      	cmp	r3, #2
 8005538:	d014      	beq.n	8005564 <USBD_LL_DataOutStage+0x98>
 800553a:	2b02      	cmp	r3, #2
 800553c:	d81d      	bhi.n	800557a <USBD_LL_DataOutStage+0xae>
 800553e:	2b00      	cmp	r3, #0
 8005540:	d002      	beq.n	8005548 <USBD_LL_DataOutStage+0x7c>
 8005542:	2b01      	cmp	r3, #1
 8005544:	d003      	beq.n	800554e <USBD_LL_DataOutStage+0x82>
 8005546:	e018      	b.n	800557a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005548:	2300      	movs	r3, #0
 800554a:	75bb      	strb	r3, [r7, #22]
            break;
 800554c:	e018      	b.n	8005580 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005554:	b2db      	uxtb	r3, r3
 8005556:	4619      	mov	r1, r3
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 fa5e 	bl	8005a1a <USBD_CoreFindIF>
 800555e:	4603      	mov	r3, r0
 8005560:	75bb      	strb	r3, [r7, #22]
            break;
 8005562:	e00d      	b.n	8005580 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800556a:	b2db      	uxtb	r3, r3
 800556c:	4619      	mov	r1, r3
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f000 fa60 	bl	8005a34 <USBD_CoreFindEP>
 8005574:	4603      	mov	r3, r0
 8005576:	75bb      	strb	r3, [r7, #22]
            break;
 8005578:	e002      	b.n	8005580 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800557a:	2300      	movs	r3, #0
 800557c:	75bb      	strb	r3, [r7, #22]
            break;
 800557e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005580:	7dbb      	ldrb	r3, [r7, #22]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d119      	bne.n	80055ba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b03      	cmp	r3, #3
 8005590:	d113      	bne.n	80055ba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005592:	7dba      	ldrb	r2, [r7, #22]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	32ae      	adds	r2, #174	; 0xae
 8005598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00b      	beq.n	80055ba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80055a2:	7dba      	ldrb	r2, [r7, #22]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80055aa:	7dba      	ldrb	r2, [r7, #22]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	32ae      	adds	r2, #174	; 0xae
 80055b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f001 f94a 	bl	8006854 <USBD_CtlSendStatus>
 80055c0:	e032      	b.n	8005628 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80055c2:	7afb      	ldrb	r3, [r7, #11]
 80055c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	4619      	mov	r1, r3
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 fa31 	bl	8005a34 <USBD_CoreFindEP>
 80055d2:	4603      	mov	r3, r0
 80055d4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80055d6:	7dbb      	ldrb	r3, [r7, #22]
 80055d8:	2bff      	cmp	r3, #255	; 0xff
 80055da:	d025      	beq.n	8005628 <USBD_LL_DataOutStage+0x15c>
 80055dc:	7dbb      	ldrb	r3, [r7, #22]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d122      	bne.n	8005628 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b03      	cmp	r3, #3
 80055ec:	d117      	bne.n	800561e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80055ee:	7dba      	ldrb	r2, [r7, #22]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	32ae      	adds	r2, #174	; 0xae
 80055f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00f      	beq.n	800561e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80055fe:	7dba      	ldrb	r2, [r7, #22]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005606:	7dba      	ldrb	r2, [r7, #22]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	32ae      	adds	r2, #174	; 0xae
 800560c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	7afa      	ldrb	r2, [r7, #11]
 8005614:	4611      	mov	r1, r2
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	4798      	blx	r3
 800561a:	4603      	mov	r3, r0
 800561c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800561e:	7dfb      	ldrb	r3, [r7, #23]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d001      	beq.n	8005628 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005624:	7dfb      	ldrb	r3, [r7, #23]
 8005626:	e000      	b.n	800562a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3718      	adds	r7, #24
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b086      	sub	sp, #24
 8005636:	af00      	add	r7, sp, #0
 8005638:	60f8      	str	r0, [r7, #12]
 800563a:	460b      	mov	r3, r1
 800563c:	607a      	str	r2, [r7, #4]
 800563e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005640:	7afb      	ldrb	r3, [r7, #11]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d16f      	bne.n	8005726 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	3314      	adds	r3, #20
 800564a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005652:	2b02      	cmp	r3, #2
 8005654:	d15a      	bne.n	800570c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	689a      	ldr	r2, [r3, #8]
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	429a      	cmp	r2, r3
 8005660:	d914      	bls.n	800568c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	689a      	ldr	r2, [r3, #8]
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	1ad2      	subs	r2, r2, r3
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	461a      	mov	r2, r3
 8005676:	6879      	ldr	r1, [r7, #4]
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f001 f8ac 	bl	80067d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800567e:	2300      	movs	r3, #0
 8005680:	2200      	movs	r2, #0
 8005682:	2100      	movs	r1, #0
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f001 fd87 	bl	8007198 <USBD_LL_PrepareReceive>
 800568a:	e03f      	b.n	800570c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	429a      	cmp	r2, r3
 8005696:	d11c      	bne.n	80056d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d316      	bcc.n	80056d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d20f      	bcs.n	80056d2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80056b2:	2200      	movs	r2, #0
 80056b4:	2100      	movs	r1, #0
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f001 f88d 	bl	80067d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80056c4:	2300      	movs	r3, #0
 80056c6:	2200      	movs	r2, #0
 80056c8:	2100      	movs	r1, #0
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f001 fd64 	bl	8007198 <USBD_LL_PrepareReceive>
 80056d0:	e01c      	b.n	800570c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b03      	cmp	r3, #3
 80056dc:	d10f      	bne.n	80056fe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d009      	beq.n	80056fe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80056fe:	2180      	movs	r1, #128	; 0x80
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f001 fc9f 	bl	8007044 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f001 f8b7 	bl	800687a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d03a      	beq.n	800578c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f7ff fe42 	bl	80053a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005724:	e032      	b.n	800578c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005726:	7afb      	ldrb	r3, [r7, #11]
 8005728:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800572c:	b2db      	uxtb	r3, r3
 800572e:	4619      	mov	r1, r3
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f000 f97f 	bl	8005a34 <USBD_CoreFindEP>
 8005736:	4603      	mov	r3, r0
 8005738:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800573a:	7dfb      	ldrb	r3, [r7, #23]
 800573c:	2bff      	cmp	r3, #255	; 0xff
 800573e:	d025      	beq.n	800578c <USBD_LL_DataInStage+0x15a>
 8005740:	7dfb      	ldrb	r3, [r7, #23]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d122      	bne.n	800578c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b03      	cmp	r3, #3
 8005750:	d11c      	bne.n	800578c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005752:	7dfa      	ldrb	r2, [r7, #23]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	32ae      	adds	r2, #174	; 0xae
 8005758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d014      	beq.n	800578c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005762:	7dfa      	ldrb	r2, [r7, #23]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800576a:	7dfa      	ldrb	r2, [r7, #23]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	32ae      	adds	r2, #174	; 0xae
 8005770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	7afa      	ldrb	r2, [r7, #11]
 8005778:	4611      	mov	r1, r2
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	4798      	blx	r3
 800577e:	4603      	mov	r3, r0
 8005780:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005782:	7dbb      	ldrb	r3, [r7, #22]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005788:	7dbb      	ldrb	r3, [r7, #22]
 800578a:	e000      	b.n	800578e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3718      	adds	r7, #24
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b084      	sub	sp, #16
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800579e:	2300      	movs	r3, #0
 80057a0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d014      	beq.n	80057fc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00e      	beq.n	80057fc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	6852      	ldr	r2, [r2, #4]
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	4611      	mov	r1, r2
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	4798      	blx	r3
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80057f8:	2303      	movs	r3, #3
 80057fa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80057fc:	2340      	movs	r3, #64	; 0x40
 80057fe:	2200      	movs	r2, #0
 8005800:	2100      	movs	r1, #0
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f001 fbd9 	bl	8006fba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2240      	movs	r2, #64	; 0x40
 8005814:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005818:	2340      	movs	r3, #64	; 0x40
 800581a:	2200      	movs	r2, #0
 800581c:	2180      	movs	r1, #128	; 0x80
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f001 fbcb 	bl	8006fba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2240      	movs	r2, #64	; 0x40
 800582e:	621a      	str	r2, [r3, #32]

  return ret;
 8005830:	7bfb      	ldrb	r3, [r7, #15]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800583a:	b480      	push	{r7}
 800583c:	b083      	sub	sp, #12
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
 8005842:	460b      	mov	r3, r1
 8005844:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	78fa      	ldrb	r2, [r7, #3]
 800584a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800585a:	b480      	push	{r7}
 800585c:	b083      	sub	sp, #12
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005868:	b2da      	uxtb	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2204      	movs	r2, #4
 8005874:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005886:	b480      	push	{r7}
 8005888:	b083      	sub	sp, #12
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b04      	cmp	r3, #4
 8005898:	d106      	bne.n	80058a8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80058a0:	b2da      	uxtb	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b082      	sub	sp, #8
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b03      	cmp	r3, #3
 80058c8:	d110      	bne.n	80058ec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00b      	beq.n	80058ec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d005      	beq.n	80058ec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b082      	sub	sp, #8
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
 80058fe:	460b      	mov	r3, r1
 8005900:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	32ae      	adds	r2, #174	; 0xae
 800590c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005914:	2303      	movs	r3, #3
 8005916:	e01c      	b.n	8005952 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b03      	cmp	r3, #3
 8005922:	d115      	bne.n	8005950 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	32ae      	adds	r2, #174	; 0xae
 800592e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00b      	beq.n	8005950 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	32ae      	adds	r2, #174	; 0xae
 8005942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005946:	6a1b      	ldr	r3, [r3, #32]
 8005948:	78fa      	ldrb	r2, [r7, #3]
 800594a:	4611      	mov	r1, r2
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b082      	sub	sp, #8
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
 8005962:	460b      	mov	r3, r1
 8005964:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	32ae      	adds	r2, #174	; 0xae
 8005970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005978:	2303      	movs	r3, #3
 800597a:	e01c      	b.n	80059b6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b03      	cmp	r3, #3
 8005986:	d115      	bne.n	80059b4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	32ae      	adds	r2, #174	; 0xae
 8005992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00b      	beq.n	80059b4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	32ae      	adds	r2, #174	; 0xae
 80059a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	78fa      	ldrb	r2, [r7, #3]
 80059ae:	4611      	mov	r1, r2
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80059dc:	2300      	movs	r3, #0
 80059de:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00e      	beq.n	8005a10 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	6852      	ldr	r2, [r2, #4]
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	4611      	mov	r1, r2
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	4798      	blx	r3
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	b083      	sub	sp, #12
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
 8005a22:	460b      	mov	r3, r1
 8005a24:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005a26:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005a40:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b086      	sub	sp, #24
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
 8005a56:	460b      	mov	r3, r1
 8005a58:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005a62:	2300      	movs	r3, #0
 8005a64:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	885b      	ldrh	r3, [r3, #2]
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d920      	bls.n	8005ab8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005a7e:	e013      	b.n	8005aa8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005a80:	f107 030a 	add.w	r3, r7, #10
 8005a84:	4619      	mov	r1, r3
 8005a86:	6978      	ldr	r0, [r7, #20]
 8005a88:	f000 f81b 	bl	8005ac2 <USBD_GetNextDesc>
 8005a8c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	785b      	ldrb	r3, [r3, #1]
 8005a92:	2b05      	cmp	r3, #5
 8005a94:	d108      	bne.n	8005aa8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	789b      	ldrb	r3, [r3, #2]
 8005a9e:	78fa      	ldrb	r2, [r7, #3]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d008      	beq.n	8005ab6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	885b      	ldrh	r3, [r3, #2]
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	897b      	ldrh	r3, [r7, #10]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d8e5      	bhi.n	8005a80 <USBD_GetEpDesc+0x32>
 8005ab4:	e000      	b.n	8005ab8 <USBD_GetEpDesc+0x6a>
          break;
 8005ab6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005ab8:	693b      	ldr	r3, [r7, #16]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3718      	adds	r7, #24
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b085      	sub	sp, #20
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
 8005aca:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	881a      	ldrh	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	4413      	add	r3, r2
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4413      	add	r3, r2
 8005aec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005aee:	68fb      	ldr	r3, [r7, #12]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b087      	sub	sp, #28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	3301      	adds	r3, #1
 8005b12:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005b1a:	8a3b      	ldrh	r3, [r7, #16]
 8005b1c:	021b      	lsls	r3, r3, #8
 8005b1e:	b21a      	sxth	r2, r3
 8005b20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	b21b      	sxth	r3, r3
 8005b28:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005b2a:	89fb      	ldrh	r3, [r7, #14]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	371c      	adds	r7, #28
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b42:	2300      	movs	r3, #0
 8005b44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b4e:	2b40      	cmp	r3, #64	; 0x40
 8005b50:	d005      	beq.n	8005b5e <USBD_StdDevReq+0x26>
 8005b52:	2b40      	cmp	r3, #64	; 0x40
 8005b54:	d857      	bhi.n	8005c06 <USBD_StdDevReq+0xce>
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00f      	beq.n	8005b7a <USBD_StdDevReq+0x42>
 8005b5a:	2b20      	cmp	r3, #32
 8005b5c:	d153      	bne.n	8005c06 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	32ae      	adds	r2, #174	; 0xae
 8005b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	6839      	ldr	r1, [r7, #0]
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	4798      	blx	r3
 8005b74:	4603      	mov	r3, r0
 8005b76:	73fb      	strb	r3, [r7, #15]
      break;
 8005b78:	e04a      	b.n	8005c10 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	785b      	ldrb	r3, [r3, #1]
 8005b7e:	2b09      	cmp	r3, #9
 8005b80:	d83b      	bhi.n	8005bfa <USBD_StdDevReq+0xc2>
 8005b82:	a201      	add	r2, pc, #4	; (adr r2, 8005b88 <USBD_StdDevReq+0x50>)
 8005b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b88:	08005bdd 	.word	0x08005bdd
 8005b8c:	08005bf1 	.word	0x08005bf1
 8005b90:	08005bfb 	.word	0x08005bfb
 8005b94:	08005be7 	.word	0x08005be7
 8005b98:	08005bfb 	.word	0x08005bfb
 8005b9c:	08005bbb 	.word	0x08005bbb
 8005ba0:	08005bb1 	.word	0x08005bb1
 8005ba4:	08005bfb 	.word	0x08005bfb
 8005ba8:	08005bd3 	.word	0x08005bd3
 8005bac:	08005bc5 	.word	0x08005bc5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005bb0:	6839      	ldr	r1, [r7, #0]
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fa3c 	bl	8006030 <USBD_GetDescriptor>
          break;
 8005bb8:	e024      	b.n	8005c04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005bba:	6839      	ldr	r1, [r7, #0]
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 fba1 	bl	8006304 <USBD_SetAddress>
          break;
 8005bc2:	e01f      	b.n	8005c04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005bc4:	6839      	ldr	r1, [r7, #0]
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 fbe0 	bl	800638c <USBD_SetConfig>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	73fb      	strb	r3, [r7, #15]
          break;
 8005bd0:	e018      	b.n	8005c04 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005bd2:	6839      	ldr	r1, [r7, #0]
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fc83 	bl	80064e0 <USBD_GetConfig>
          break;
 8005bda:	e013      	b.n	8005c04 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005bdc:	6839      	ldr	r1, [r7, #0]
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fcb4 	bl	800654c <USBD_GetStatus>
          break;
 8005be4:	e00e      	b.n	8005c04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005be6:	6839      	ldr	r1, [r7, #0]
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 fce3 	bl	80065b4 <USBD_SetFeature>
          break;
 8005bee:	e009      	b.n	8005c04 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005bf0:	6839      	ldr	r1, [r7, #0]
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fd07 	bl	8006606 <USBD_ClrFeature>
          break;
 8005bf8:	e004      	b.n	8005c04 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005bfa:	6839      	ldr	r1, [r7, #0]
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 fd5e 	bl	80066be <USBD_CtlError>
          break;
 8005c02:	bf00      	nop
      }
      break;
 8005c04:	e004      	b.n	8005c10 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005c06:	6839      	ldr	r1, [r7, #0]
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fd58 	bl	80066be <USBD_CtlError>
      break;
 8005c0e:	bf00      	nop
  }

  return ret;
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop

08005c1c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c32:	2b40      	cmp	r3, #64	; 0x40
 8005c34:	d005      	beq.n	8005c42 <USBD_StdItfReq+0x26>
 8005c36:	2b40      	cmp	r3, #64	; 0x40
 8005c38:	d852      	bhi.n	8005ce0 <USBD_StdItfReq+0xc4>
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <USBD_StdItfReq+0x26>
 8005c3e:	2b20      	cmp	r3, #32
 8005c40:	d14e      	bne.n	8005ce0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d840      	bhi.n	8005cd2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	889b      	ldrh	r3, [r3, #4]
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d836      	bhi.n	8005cc8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	889b      	ldrh	r3, [r3, #4]
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	4619      	mov	r1, r3
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7ff fed9 	bl	8005a1a <USBD_CoreFindIF>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c6c:	7bbb      	ldrb	r3, [r7, #14]
 8005c6e:	2bff      	cmp	r3, #255	; 0xff
 8005c70:	d01d      	beq.n	8005cae <USBD_StdItfReq+0x92>
 8005c72:	7bbb      	ldrb	r3, [r7, #14]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d11a      	bne.n	8005cae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005c78:	7bba      	ldrb	r2, [r7, #14]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	32ae      	adds	r2, #174	; 0xae
 8005c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00f      	beq.n	8005ca8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005c88:	7bba      	ldrb	r2, [r7, #14]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005c90:	7bba      	ldrb	r2, [r7, #14]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	32ae      	adds	r2, #174	; 0xae
 8005c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	6839      	ldr	r1, [r7, #0]
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	4798      	blx	r3
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005ca6:	e004      	b.n	8005cb2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005cac:	e001      	b.n	8005cb2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	88db      	ldrh	r3, [r3, #6]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d110      	bne.n	8005cdc <USBD_StdItfReq+0xc0>
 8005cba:	7bfb      	ldrb	r3, [r7, #15]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10d      	bne.n	8005cdc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 fdc7 	bl	8006854 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005cc6:	e009      	b.n	8005cdc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005cc8:	6839      	ldr	r1, [r7, #0]
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 fcf7 	bl	80066be <USBD_CtlError>
          break;
 8005cd0:	e004      	b.n	8005cdc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005cd2:	6839      	ldr	r1, [r7, #0]
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 fcf2 	bl	80066be <USBD_CtlError>
          break;
 8005cda:	e000      	b.n	8005cde <USBD_StdItfReq+0xc2>
          break;
 8005cdc:	bf00      	nop
      }
      break;
 8005cde:	e004      	b.n	8005cea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005ce0:	6839      	ldr	r1, [r7, #0]
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fceb 	bl	80066be <USBD_CtlError>
      break;
 8005ce8:	bf00      	nop
  }

  return ret;
 8005cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	889b      	ldrh	r3, [r3, #4]
 8005d06:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d10:	2b40      	cmp	r3, #64	; 0x40
 8005d12:	d007      	beq.n	8005d24 <USBD_StdEPReq+0x30>
 8005d14:	2b40      	cmp	r3, #64	; 0x40
 8005d16:	f200 817f 	bhi.w	8006018 <USBD_StdEPReq+0x324>
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d02a      	beq.n	8005d74 <USBD_StdEPReq+0x80>
 8005d1e:	2b20      	cmp	r3, #32
 8005d20:	f040 817a 	bne.w	8006018 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005d24:	7bbb      	ldrb	r3, [r7, #14]
 8005d26:	4619      	mov	r1, r3
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f7ff fe83 	bl	8005a34 <USBD_CoreFindEP>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d32:	7b7b      	ldrb	r3, [r7, #13]
 8005d34:	2bff      	cmp	r3, #255	; 0xff
 8005d36:	f000 8174 	beq.w	8006022 <USBD_StdEPReq+0x32e>
 8005d3a:	7b7b      	ldrb	r3, [r7, #13]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f040 8170 	bne.w	8006022 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005d42:	7b7a      	ldrb	r2, [r7, #13]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005d4a:	7b7a      	ldrb	r2, [r7, #13]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	32ae      	adds	r2, #174	; 0xae
 8005d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f000 8163 	beq.w	8006022 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005d5c:	7b7a      	ldrb	r2, [r7, #13]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	32ae      	adds	r2, #174	; 0xae
 8005d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	6839      	ldr	r1, [r7, #0]
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	4798      	blx	r3
 8005d6e:	4603      	mov	r3, r0
 8005d70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d72:	e156      	b.n	8006022 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	785b      	ldrb	r3, [r3, #1]
 8005d78:	2b03      	cmp	r3, #3
 8005d7a:	d008      	beq.n	8005d8e <USBD_StdEPReq+0x9a>
 8005d7c:	2b03      	cmp	r3, #3
 8005d7e:	f300 8145 	bgt.w	800600c <USBD_StdEPReq+0x318>
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f000 809b 	beq.w	8005ebe <USBD_StdEPReq+0x1ca>
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d03c      	beq.n	8005e06 <USBD_StdEPReq+0x112>
 8005d8c:	e13e      	b.n	800600c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d002      	beq.n	8005da0 <USBD_StdEPReq+0xac>
 8005d9a:	2b03      	cmp	r3, #3
 8005d9c:	d016      	beq.n	8005dcc <USBD_StdEPReq+0xd8>
 8005d9e:	e02c      	b.n	8005dfa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005da0:	7bbb      	ldrb	r3, [r7, #14]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00d      	beq.n	8005dc2 <USBD_StdEPReq+0xce>
 8005da6:	7bbb      	ldrb	r3, [r7, #14]
 8005da8:	2b80      	cmp	r3, #128	; 0x80
 8005daa:	d00a      	beq.n	8005dc2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005dac:	7bbb      	ldrb	r3, [r7, #14]
 8005dae:	4619      	mov	r1, r3
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f001 f947 	bl	8007044 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005db6:	2180      	movs	r1, #128	; 0x80
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f001 f943 	bl	8007044 <USBD_LL_StallEP>
 8005dbe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005dc0:	e020      	b.n	8005e04 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005dc2:	6839      	ldr	r1, [r7, #0]
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 fc7a 	bl	80066be <USBD_CtlError>
              break;
 8005dca:	e01b      	b.n	8005e04 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	885b      	ldrh	r3, [r3, #2]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10e      	bne.n	8005df2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005dd4:	7bbb      	ldrb	r3, [r7, #14]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00b      	beq.n	8005df2 <USBD_StdEPReq+0xfe>
 8005dda:	7bbb      	ldrb	r3, [r7, #14]
 8005ddc:	2b80      	cmp	r3, #128	; 0x80
 8005dde:	d008      	beq.n	8005df2 <USBD_StdEPReq+0xfe>
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	88db      	ldrh	r3, [r3, #6]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d104      	bne.n	8005df2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005de8:	7bbb      	ldrb	r3, [r7, #14]
 8005dea:	4619      	mov	r1, r3
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f001 f929 	bl	8007044 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fd2e 	bl	8006854 <USBD_CtlSendStatus>

              break;
 8005df8:	e004      	b.n	8005e04 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005dfa:	6839      	ldr	r1, [r7, #0]
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 fc5e 	bl	80066be <USBD_CtlError>
              break;
 8005e02:	bf00      	nop
          }
          break;
 8005e04:	e107      	b.n	8006016 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d002      	beq.n	8005e18 <USBD_StdEPReq+0x124>
 8005e12:	2b03      	cmp	r3, #3
 8005e14:	d016      	beq.n	8005e44 <USBD_StdEPReq+0x150>
 8005e16:	e04b      	b.n	8005eb0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e18:	7bbb      	ldrb	r3, [r7, #14]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00d      	beq.n	8005e3a <USBD_StdEPReq+0x146>
 8005e1e:	7bbb      	ldrb	r3, [r7, #14]
 8005e20:	2b80      	cmp	r3, #128	; 0x80
 8005e22:	d00a      	beq.n	8005e3a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005e24:	7bbb      	ldrb	r3, [r7, #14]
 8005e26:	4619      	mov	r1, r3
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f001 f90b 	bl	8007044 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e2e:	2180      	movs	r1, #128	; 0x80
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f001 f907 	bl	8007044 <USBD_LL_StallEP>
 8005e36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005e38:	e040      	b.n	8005ebc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005e3a:	6839      	ldr	r1, [r7, #0]
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 fc3e 	bl	80066be <USBD_CtlError>
              break;
 8005e42:	e03b      	b.n	8005ebc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	885b      	ldrh	r3, [r3, #2]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d136      	bne.n	8005eba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005e4c:	7bbb      	ldrb	r3, [r7, #14]
 8005e4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d004      	beq.n	8005e60 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005e56:	7bbb      	ldrb	r3, [r7, #14]
 8005e58:	4619      	mov	r1, r3
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f001 f911 	bl	8007082 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fcf7 	bl	8006854 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005e66:	7bbb      	ldrb	r3, [r7, #14]
 8005e68:	4619      	mov	r1, r3
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f7ff fde2 	bl	8005a34 <USBD_CoreFindEP>
 8005e70:	4603      	mov	r3, r0
 8005e72:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e74:	7b7b      	ldrb	r3, [r7, #13]
 8005e76:	2bff      	cmp	r3, #255	; 0xff
 8005e78:	d01f      	beq.n	8005eba <USBD_StdEPReq+0x1c6>
 8005e7a:	7b7b      	ldrb	r3, [r7, #13]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d11c      	bne.n	8005eba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005e80:	7b7a      	ldrb	r2, [r7, #13]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005e88:	7b7a      	ldrb	r2, [r7, #13]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	32ae      	adds	r2, #174	; 0xae
 8005e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d010      	beq.n	8005eba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005e98:	7b7a      	ldrb	r2, [r7, #13]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	32ae      	adds	r2, #174	; 0xae
 8005e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	6839      	ldr	r1, [r7, #0]
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	4798      	blx	r3
 8005eaa:	4603      	mov	r3, r0
 8005eac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005eae:	e004      	b.n	8005eba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005eb0:	6839      	ldr	r1, [r7, #0]
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 fc03 	bl	80066be <USBD_CtlError>
              break;
 8005eb8:	e000      	b.n	8005ebc <USBD_StdEPReq+0x1c8>
              break;
 8005eba:	bf00      	nop
          }
          break;
 8005ebc:	e0ab      	b.n	8006016 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d002      	beq.n	8005ed0 <USBD_StdEPReq+0x1dc>
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	d032      	beq.n	8005f34 <USBD_StdEPReq+0x240>
 8005ece:	e097      	b.n	8006000 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ed0:	7bbb      	ldrb	r3, [r7, #14]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d007      	beq.n	8005ee6 <USBD_StdEPReq+0x1f2>
 8005ed6:	7bbb      	ldrb	r3, [r7, #14]
 8005ed8:	2b80      	cmp	r3, #128	; 0x80
 8005eda:	d004      	beq.n	8005ee6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005edc:	6839      	ldr	r1, [r7, #0]
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 fbed 	bl	80066be <USBD_CtlError>
                break;
 8005ee4:	e091      	b.n	800600a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ee6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	da0b      	bge.n	8005f06 <USBD_StdEPReq+0x212>
 8005eee:	7bbb      	ldrb	r3, [r7, #14]
 8005ef0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	3310      	adds	r3, #16
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	4413      	add	r3, r2
 8005f02:	3304      	adds	r3, #4
 8005f04:	e00b      	b.n	8005f1e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005f06:	7bbb      	ldrb	r3, [r7, #14]
 8005f08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	4413      	add	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	3304      	adds	r3, #4
 8005f1e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	2200      	movs	r2, #0
 8005f24:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	2202      	movs	r2, #2
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 fc37 	bl	80067a0 <USBD_CtlSendData>
              break;
 8005f32:	e06a      	b.n	800600a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005f34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	da11      	bge.n	8005f60 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005f3c:	7bbb      	ldrb	r3, [r7, #14]
 8005f3e:	f003 020f 	and.w	r2, r3, #15
 8005f42:	6879      	ldr	r1, [r7, #4]
 8005f44:	4613      	mov	r3, r2
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	440b      	add	r3, r1
 8005f4e:	3324      	adds	r3, #36	; 0x24
 8005f50:	881b      	ldrh	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d117      	bne.n	8005f86 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005f56:	6839      	ldr	r1, [r7, #0]
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 fbb0 	bl	80066be <USBD_CtlError>
                  break;
 8005f5e:	e054      	b.n	800600a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005f60:	7bbb      	ldrb	r3, [r7, #14]
 8005f62:	f003 020f 	and.w	r2, r3, #15
 8005f66:	6879      	ldr	r1, [r7, #4]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	4413      	add	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	440b      	add	r3, r1
 8005f72:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d104      	bne.n	8005f86 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005f7c:	6839      	ldr	r1, [r7, #0]
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fb9d 	bl	80066be <USBD_CtlError>
                  break;
 8005f84:	e041      	b.n	800600a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	da0b      	bge.n	8005fa6 <USBD_StdEPReq+0x2b2>
 8005f8e:	7bbb      	ldrb	r3, [r7, #14]
 8005f90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f94:	4613      	mov	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	3310      	adds	r3, #16
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	3304      	adds	r3, #4
 8005fa4:	e00b      	b.n	8005fbe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005fa6:	7bbb      	ldrb	r3, [r7, #14]
 8005fa8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fac:	4613      	mov	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	4413      	add	r3, r2
 8005fbc:	3304      	adds	r3, #4
 8005fbe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005fc0:	7bbb      	ldrb	r3, [r7, #14]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d002      	beq.n	8005fcc <USBD_StdEPReq+0x2d8>
 8005fc6:	7bbb      	ldrb	r3, [r7, #14]
 8005fc8:	2b80      	cmp	r3, #128	; 0x80
 8005fca:	d103      	bne.n	8005fd4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	e00e      	b.n	8005ff2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005fd4:	7bbb      	ldrb	r3, [r7, #14]
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f001 f871 	bl	80070c0 <USBD_LL_IsStallEP>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d003      	beq.n	8005fec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	e002      	b.n	8005ff2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fbd1 	bl	80067a0 <USBD_CtlSendData>
              break;
 8005ffe:	e004      	b.n	800600a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006000:	6839      	ldr	r1, [r7, #0]
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fb5b 	bl	80066be <USBD_CtlError>
              break;
 8006008:	bf00      	nop
          }
          break;
 800600a:	e004      	b.n	8006016 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800600c:	6839      	ldr	r1, [r7, #0]
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fb55 	bl	80066be <USBD_CtlError>
          break;
 8006014:	bf00      	nop
      }
      break;
 8006016:	e005      	b.n	8006024 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006018:	6839      	ldr	r1, [r7, #0]
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fb4f 	bl	80066be <USBD_CtlError>
      break;
 8006020:	e000      	b.n	8006024 <USBD_StdEPReq+0x330>
      break;
 8006022:	bf00      	nop
  }

  return ret;
 8006024:	7bfb      	ldrb	r3, [r7, #15]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
	...

08006030 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800603a:	2300      	movs	r3, #0
 800603c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800603e:	2300      	movs	r3, #0
 8006040:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006042:	2300      	movs	r3, #0
 8006044:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	885b      	ldrh	r3, [r3, #2]
 800604a:	0a1b      	lsrs	r3, r3, #8
 800604c:	b29b      	uxth	r3, r3
 800604e:	3b01      	subs	r3, #1
 8006050:	2b06      	cmp	r3, #6
 8006052:	f200 8128 	bhi.w	80062a6 <USBD_GetDescriptor+0x276>
 8006056:	a201      	add	r2, pc, #4	; (adr r2, 800605c <USBD_GetDescriptor+0x2c>)
 8006058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605c:	08006079 	.word	0x08006079
 8006060:	08006091 	.word	0x08006091
 8006064:	080060d1 	.word	0x080060d1
 8006068:	080062a7 	.word	0x080062a7
 800606c:	080062a7 	.word	0x080062a7
 8006070:	08006247 	.word	0x08006247
 8006074:	08006273 	.word	0x08006273
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	7c12      	ldrb	r2, [r2, #16]
 8006084:	f107 0108 	add.w	r1, r7, #8
 8006088:	4610      	mov	r0, r2
 800608a:	4798      	blx	r3
 800608c:	60f8      	str	r0, [r7, #12]
      break;
 800608e:	e112      	b.n	80062b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	7c1b      	ldrb	r3, [r3, #16]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10d      	bne.n	80060b4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800609e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a0:	f107 0208 	add.w	r2, r7, #8
 80060a4:	4610      	mov	r0, r2
 80060a6:	4798      	blx	r3
 80060a8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	3301      	adds	r3, #1
 80060ae:	2202      	movs	r2, #2
 80060b0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80060b2:	e100      	b.n	80062b6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060bc:	f107 0208 	add.w	r2, r7, #8
 80060c0:	4610      	mov	r0, r2
 80060c2:	4798      	blx	r3
 80060c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	3301      	adds	r3, #1
 80060ca:	2202      	movs	r2, #2
 80060cc:	701a      	strb	r2, [r3, #0]
      break;
 80060ce:	e0f2      	b.n	80062b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	885b      	ldrh	r3, [r3, #2]
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b05      	cmp	r3, #5
 80060d8:	f200 80ac 	bhi.w	8006234 <USBD_GetDescriptor+0x204>
 80060dc:	a201      	add	r2, pc, #4	; (adr r2, 80060e4 <USBD_GetDescriptor+0xb4>)
 80060de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e2:	bf00      	nop
 80060e4:	080060fd 	.word	0x080060fd
 80060e8:	08006131 	.word	0x08006131
 80060ec:	08006165 	.word	0x08006165
 80060f0:	08006199 	.word	0x08006199
 80060f4:	080061cd 	.word	0x080061cd
 80060f8:	08006201 	.word	0x08006201
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00b      	beq.n	8006120 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	7c12      	ldrb	r2, [r2, #16]
 8006114:	f107 0108 	add.w	r1, r7, #8
 8006118:	4610      	mov	r0, r2
 800611a:	4798      	blx	r3
 800611c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800611e:	e091      	b.n	8006244 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006120:	6839      	ldr	r1, [r7, #0]
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 facb 	bl	80066be <USBD_CtlError>
            err++;
 8006128:	7afb      	ldrb	r3, [r7, #11]
 800612a:	3301      	adds	r3, #1
 800612c:	72fb      	strb	r3, [r7, #11]
          break;
 800612e:	e089      	b.n	8006244 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00b      	beq.n	8006154 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	7c12      	ldrb	r2, [r2, #16]
 8006148:	f107 0108 	add.w	r1, r7, #8
 800614c:	4610      	mov	r0, r2
 800614e:	4798      	blx	r3
 8006150:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006152:	e077      	b.n	8006244 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006154:	6839      	ldr	r1, [r7, #0]
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fab1 	bl	80066be <USBD_CtlError>
            err++;
 800615c:	7afb      	ldrb	r3, [r7, #11]
 800615e:	3301      	adds	r3, #1
 8006160:	72fb      	strb	r3, [r7, #11]
          break;
 8006162:	e06f      	b.n	8006244 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00b      	beq.n	8006188 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	7c12      	ldrb	r2, [r2, #16]
 800617c:	f107 0108 	add.w	r1, r7, #8
 8006180:	4610      	mov	r0, r2
 8006182:	4798      	blx	r3
 8006184:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006186:	e05d      	b.n	8006244 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006188:	6839      	ldr	r1, [r7, #0]
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fa97 	bl	80066be <USBD_CtlError>
            err++;
 8006190:	7afb      	ldrb	r3, [r7, #11]
 8006192:	3301      	adds	r3, #1
 8006194:	72fb      	strb	r3, [r7, #11]
          break;
 8006196:	e055      	b.n	8006244 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00b      	beq.n	80061bc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	7c12      	ldrb	r2, [r2, #16]
 80061b0:	f107 0108 	add.w	r1, r7, #8
 80061b4:	4610      	mov	r0, r2
 80061b6:	4798      	blx	r3
 80061b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061ba:	e043      	b.n	8006244 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061bc:	6839      	ldr	r1, [r7, #0]
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fa7d 	bl	80066be <USBD_CtlError>
            err++;
 80061c4:	7afb      	ldrb	r3, [r7, #11]
 80061c6:	3301      	adds	r3, #1
 80061c8:	72fb      	strb	r3, [r7, #11]
          break;
 80061ca:	e03b      	b.n	8006244 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00b      	beq.n	80061f0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	7c12      	ldrb	r2, [r2, #16]
 80061e4:	f107 0108 	add.w	r1, r7, #8
 80061e8:	4610      	mov	r0, r2
 80061ea:	4798      	blx	r3
 80061ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061ee:	e029      	b.n	8006244 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061f0:	6839      	ldr	r1, [r7, #0]
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fa63 	bl	80066be <USBD_CtlError>
            err++;
 80061f8:	7afb      	ldrb	r3, [r7, #11]
 80061fa:	3301      	adds	r3, #1
 80061fc:	72fb      	strb	r3, [r7, #11]
          break;
 80061fe:	e021      	b.n	8006244 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00b      	beq.n	8006224 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	7c12      	ldrb	r2, [r2, #16]
 8006218:	f107 0108 	add.w	r1, r7, #8
 800621c:	4610      	mov	r0, r2
 800621e:	4798      	blx	r3
 8006220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006222:	e00f      	b.n	8006244 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006224:	6839      	ldr	r1, [r7, #0]
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fa49 	bl	80066be <USBD_CtlError>
            err++;
 800622c:	7afb      	ldrb	r3, [r7, #11]
 800622e:	3301      	adds	r3, #1
 8006230:	72fb      	strb	r3, [r7, #11]
          break;
 8006232:	e007      	b.n	8006244 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006234:	6839      	ldr	r1, [r7, #0]
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fa41 	bl	80066be <USBD_CtlError>
          err++;
 800623c:	7afb      	ldrb	r3, [r7, #11]
 800623e:	3301      	adds	r3, #1
 8006240:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006242:	bf00      	nop
      }
      break;
 8006244:	e037      	b.n	80062b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	7c1b      	ldrb	r3, [r3, #16]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d109      	bne.n	8006262 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006256:	f107 0208 	add.w	r2, r7, #8
 800625a:	4610      	mov	r0, r2
 800625c:	4798      	blx	r3
 800625e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006260:	e029      	b.n	80062b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006262:	6839      	ldr	r1, [r7, #0]
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fa2a 	bl	80066be <USBD_CtlError>
        err++;
 800626a:	7afb      	ldrb	r3, [r7, #11]
 800626c:	3301      	adds	r3, #1
 800626e:	72fb      	strb	r3, [r7, #11]
      break;
 8006270:	e021      	b.n	80062b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	7c1b      	ldrb	r3, [r3, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10d      	bne.n	8006296 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006282:	f107 0208 	add.w	r2, r7, #8
 8006286:	4610      	mov	r0, r2
 8006288:	4798      	blx	r3
 800628a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	3301      	adds	r3, #1
 8006290:	2207      	movs	r2, #7
 8006292:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006294:	e00f      	b.n	80062b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006296:	6839      	ldr	r1, [r7, #0]
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fa10 	bl	80066be <USBD_CtlError>
        err++;
 800629e:	7afb      	ldrb	r3, [r7, #11]
 80062a0:	3301      	adds	r3, #1
 80062a2:	72fb      	strb	r3, [r7, #11]
      break;
 80062a4:	e007      	b.n	80062b6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80062a6:	6839      	ldr	r1, [r7, #0]
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fa08 	bl	80066be <USBD_CtlError>
      err++;
 80062ae:	7afb      	ldrb	r3, [r7, #11]
 80062b0:	3301      	adds	r3, #1
 80062b2:	72fb      	strb	r3, [r7, #11]
      break;
 80062b4:	bf00      	nop
  }

  if (err != 0U)
 80062b6:	7afb      	ldrb	r3, [r7, #11]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d11e      	bne.n	80062fa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	88db      	ldrh	r3, [r3, #6]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d016      	beq.n	80062f2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80062c4:	893b      	ldrh	r3, [r7, #8]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00e      	beq.n	80062e8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	88da      	ldrh	r2, [r3, #6]
 80062ce:	893b      	ldrh	r3, [r7, #8]
 80062d0:	4293      	cmp	r3, r2
 80062d2:	bf28      	it	cs
 80062d4:	4613      	movcs	r3, r2
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80062da:	893b      	ldrh	r3, [r7, #8]
 80062dc:	461a      	mov	r2, r3
 80062de:	68f9      	ldr	r1, [r7, #12]
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 fa5d 	bl	80067a0 <USBD_CtlSendData>
 80062e6:	e009      	b.n	80062fc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80062e8:	6839      	ldr	r1, [r7, #0]
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f9e7 	bl	80066be <USBD_CtlError>
 80062f0:	e004      	b.n	80062fc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 faae 	bl	8006854 <USBD_CtlSendStatus>
 80062f8:	e000      	b.n	80062fc <USBD_GetDescriptor+0x2cc>
    return;
 80062fa:	bf00      	nop
  }
}
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop

08006304 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	889b      	ldrh	r3, [r3, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d131      	bne.n	800637a <USBD_SetAddress+0x76>
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	88db      	ldrh	r3, [r3, #6]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d12d      	bne.n	800637a <USBD_SetAddress+0x76>
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	885b      	ldrh	r3, [r3, #2]
 8006322:	2b7f      	cmp	r3, #127	; 0x7f
 8006324:	d829      	bhi.n	800637a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	885b      	ldrh	r3, [r3, #2]
 800632a:	b2db      	uxtb	r3, r3
 800632c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006330:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b03      	cmp	r3, #3
 800633c:	d104      	bne.n	8006348 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800633e:	6839      	ldr	r1, [r7, #0]
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f9bc 	bl	80066be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006346:	e01d      	b.n	8006384 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	7bfa      	ldrb	r2, [r7, #15]
 800634c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006350:	7bfb      	ldrb	r3, [r7, #15]
 8006352:	4619      	mov	r1, r3
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fedf 	bl	8007118 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fa7a 	bl	8006854 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006360:	7bfb      	ldrb	r3, [r7, #15]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d004      	beq.n	8006370 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2202      	movs	r2, #2
 800636a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800636e:	e009      	b.n	8006384 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006378:	e004      	b.n	8006384 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800637a:	6839      	ldr	r1, [r7, #0]
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f99e 	bl	80066be <USBD_CtlError>
  }
}
 8006382:	bf00      	nop
 8006384:	bf00      	nop
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006396:	2300      	movs	r3, #0
 8006398:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	885b      	ldrh	r3, [r3, #2]
 800639e:	b2da      	uxtb	r2, r3
 80063a0:	4b4e      	ldr	r3, [pc, #312]	; (80064dc <USBD_SetConfig+0x150>)
 80063a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80063a4:	4b4d      	ldr	r3, [pc, #308]	; (80064dc <USBD_SetConfig+0x150>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d905      	bls.n	80063b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80063ac:	6839      	ldr	r1, [r7, #0]
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f985 	bl	80066be <USBD_CtlError>
    return USBD_FAIL;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e08c      	b.n	80064d2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d002      	beq.n	80063ca <USBD_SetConfig+0x3e>
 80063c4:	2b03      	cmp	r3, #3
 80063c6:	d029      	beq.n	800641c <USBD_SetConfig+0x90>
 80063c8:	e075      	b.n	80064b6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80063ca:	4b44      	ldr	r3, [pc, #272]	; (80064dc <USBD_SetConfig+0x150>)
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d020      	beq.n	8006414 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80063d2:	4b42      	ldr	r3, [pc, #264]	; (80064dc <USBD_SetConfig+0x150>)
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	461a      	mov	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80063dc:	4b3f      	ldr	r3, [pc, #252]	; (80064dc <USBD_SetConfig+0x150>)
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	4619      	mov	r1, r3
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7fe ffe7 	bl	80053b6 <USBD_SetClassConfig>
 80063e8:	4603      	mov	r3, r0
 80063ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80063ec:	7bfb      	ldrb	r3, [r7, #15]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d008      	beq.n	8006404 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 f962 	bl	80066be <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2202      	movs	r2, #2
 80063fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006402:	e065      	b.n	80064d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 fa25 	bl	8006854 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2203      	movs	r2, #3
 800640e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006412:	e05d      	b.n	80064d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fa1d 	bl	8006854 <USBD_CtlSendStatus>
      break;
 800641a:	e059      	b.n	80064d0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800641c:	4b2f      	ldr	r3, [pc, #188]	; (80064dc <USBD_SetConfig+0x150>)
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d112      	bne.n	800644a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800642c:	4b2b      	ldr	r3, [pc, #172]	; (80064dc <USBD_SetConfig+0x150>)
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	461a      	mov	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006436:	4b29      	ldr	r3, [pc, #164]	; (80064dc <USBD_SetConfig+0x150>)
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	4619      	mov	r1, r3
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f7fe ffd6 	bl	80053ee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 fa06 	bl	8006854 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006448:	e042      	b.n	80064d0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800644a:	4b24      	ldr	r3, [pc, #144]	; (80064dc <USBD_SetConfig+0x150>)
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	461a      	mov	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	429a      	cmp	r2, r3
 8006456:	d02a      	beq.n	80064ae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	b2db      	uxtb	r3, r3
 800645e:	4619      	mov	r1, r3
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f7fe ffc4 	bl	80053ee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006466:	4b1d      	ldr	r3, [pc, #116]	; (80064dc <USBD_SetConfig+0x150>)
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	461a      	mov	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006470:	4b1a      	ldr	r3, [pc, #104]	; (80064dc <USBD_SetConfig+0x150>)
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	4619      	mov	r1, r3
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7fe ff9d 	bl	80053b6 <USBD_SetClassConfig>
 800647c:	4603      	mov	r3, r0
 800647e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006480:	7bfb      	ldrb	r3, [r7, #15]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00f      	beq.n	80064a6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006486:	6839      	ldr	r1, [r7, #0]
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 f918 	bl	80066be <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	b2db      	uxtb	r3, r3
 8006494:	4619      	mov	r1, r3
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7fe ffa9 	bl	80053ee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80064a4:	e014      	b.n	80064d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f9d4 	bl	8006854 <USBD_CtlSendStatus>
      break;
 80064ac:	e010      	b.n	80064d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f9d0 	bl	8006854 <USBD_CtlSendStatus>
      break;
 80064b4:	e00c      	b.n	80064d0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80064b6:	6839      	ldr	r1, [r7, #0]
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f900 	bl	80066be <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80064be:	4b07      	ldr	r3, [pc, #28]	; (80064dc <USBD_SetConfig+0x150>)
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	4619      	mov	r1, r3
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f7fe ff92 	bl	80053ee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80064ca:	2303      	movs	r3, #3
 80064cc:	73fb      	strb	r3, [r7, #15]
      break;
 80064ce:	bf00      	nop
  }

  return ret;
 80064d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	200001d0 	.word	0x200001d0

080064e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	88db      	ldrh	r3, [r3, #6]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d004      	beq.n	80064fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80064f2:	6839      	ldr	r1, [r7, #0]
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 f8e2 	bl	80066be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80064fa:	e023      	b.n	8006544 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b02      	cmp	r3, #2
 8006506:	dc02      	bgt.n	800650e <USBD_GetConfig+0x2e>
 8006508:	2b00      	cmp	r3, #0
 800650a:	dc03      	bgt.n	8006514 <USBD_GetConfig+0x34>
 800650c:	e015      	b.n	800653a <USBD_GetConfig+0x5a>
 800650e:	2b03      	cmp	r3, #3
 8006510:	d00b      	beq.n	800652a <USBD_GetConfig+0x4a>
 8006512:	e012      	b.n	800653a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	3308      	adds	r3, #8
 800651e:	2201      	movs	r2, #1
 8006520:	4619      	mov	r1, r3
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f93c 	bl	80067a0 <USBD_CtlSendData>
        break;
 8006528:	e00c      	b.n	8006544 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	3304      	adds	r3, #4
 800652e:	2201      	movs	r2, #1
 8006530:	4619      	mov	r1, r3
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f934 	bl	80067a0 <USBD_CtlSendData>
        break;
 8006538:	e004      	b.n	8006544 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800653a:	6839      	ldr	r1, [r7, #0]
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 f8be 	bl	80066be <USBD_CtlError>
        break;
 8006542:	bf00      	nop
}
 8006544:	bf00      	nop
 8006546:	3708      	adds	r7, #8
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800655c:	b2db      	uxtb	r3, r3
 800655e:	3b01      	subs	r3, #1
 8006560:	2b02      	cmp	r3, #2
 8006562:	d81e      	bhi.n	80065a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	88db      	ldrh	r3, [r3, #6]
 8006568:	2b02      	cmp	r3, #2
 800656a:	d004      	beq.n	8006576 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800656c:	6839      	ldr	r1, [r7, #0]
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f8a5 	bl	80066be <USBD_CtlError>
        break;
 8006574:	e01a      	b.n	80065ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2201      	movs	r2, #1
 800657a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006582:	2b00      	cmp	r3, #0
 8006584:	d005      	beq.n	8006592 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	f043 0202 	orr.w	r2, r3, #2
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	330c      	adds	r3, #12
 8006596:	2202      	movs	r2, #2
 8006598:	4619      	mov	r1, r3
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f900 	bl	80067a0 <USBD_CtlSendData>
      break;
 80065a0:	e004      	b.n	80065ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80065a2:	6839      	ldr	r1, [r7, #0]
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 f88a 	bl	80066be <USBD_CtlError>
      break;
 80065aa:	bf00      	nop
  }
}
 80065ac:	bf00      	nop
 80065ae:	3708      	adds	r7, #8
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	885b      	ldrh	r3, [r3, #2]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d107      	bne.n	80065d6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f940 	bl	8006854 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80065d4:	e013      	b.n	80065fe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	885b      	ldrh	r3, [r3, #2]
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d10b      	bne.n	80065f6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	889b      	ldrh	r3, [r3, #4]
 80065e2:	0a1b      	lsrs	r3, r3, #8
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f930 	bl	8006854 <USBD_CtlSendStatus>
}
 80065f4:	e003      	b.n	80065fe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f860 	bl	80066be <USBD_CtlError>
}
 80065fe:	bf00      	nop
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b082      	sub	sp, #8
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
 800660e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006616:	b2db      	uxtb	r3, r3
 8006618:	3b01      	subs	r3, #1
 800661a:	2b02      	cmp	r3, #2
 800661c:	d80b      	bhi.n	8006636 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	885b      	ldrh	r3, [r3, #2]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d10c      	bne.n	8006640 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f910 	bl	8006854 <USBD_CtlSendStatus>
      }
      break;
 8006634:	e004      	b.n	8006640 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006636:	6839      	ldr	r1, [r7, #0]
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f840 	bl	80066be <USBD_CtlError>
      break;
 800663e:	e000      	b.n	8006642 <USBD_ClrFeature+0x3c>
      break;
 8006640:	bf00      	nop
  }
}
 8006642:	bf00      	nop
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b084      	sub	sp, #16
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
 8006652:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	781a      	ldrb	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	3301      	adds	r3, #1
 8006664:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	781a      	ldrb	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	3301      	adds	r3, #1
 8006672:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f7ff fa41 	bl	8005afc <SWAPBYTE>
 800667a:	4603      	mov	r3, r0
 800667c:	461a      	mov	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	3301      	adds	r3, #1
 8006686:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	3301      	adds	r3, #1
 800668c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f7ff fa34 	bl	8005afc <SWAPBYTE>
 8006694:	4603      	mov	r3, r0
 8006696:	461a      	mov	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	3301      	adds	r3, #1
 80066a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3301      	adds	r3, #1
 80066a6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f7ff fa27 	bl	8005afc <SWAPBYTE>
 80066ae:	4603      	mov	r3, r0
 80066b0:	461a      	mov	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	80da      	strh	r2, [r3, #6]
}
 80066b6:	bf00      	nop
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b082      	sub	sp, #8
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80066c8:	2180      	movs	r1, #128	; 0x80
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fcba 	bl	8007044 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80066d0:	2100      	movs	r1, #0
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fcb6 	bl	8007044 <USBD_LL_StallEP>
}
 80066d8:	bf00      	nop
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d036      	beq.n	8006764 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80066fa:	6938      	ldr	r0, [r7, #16]
 80066fc:	f000 f836 	bl	800676c <USBD_GetLen>
 8006700:	4603      	mov	r3, r0
 8006702:	3301      	adds	r3, #1
 8006704:	b29b      	uxth	r3, r3
 8006706:	005b      	lsls	r3, r3, #1
 8006708:	b29a      	uxth	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800670e:	7dfb      	ldrb	r3, [r7, #23]
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	4413      	add	r3, r2
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	7812      	ldrb	r2, [r2, #0]
 8006718:	701a      	strb	r2, [r3, #0]
  idx++;
 800671a:	7dfb      	ldrb	r3, [r7, #23]
 800671c:	3301      	adds	r3, #1
 800671e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006720:	7dfb      	ldrb	r3, [r7, #23]
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	4413      	add	r3, r2
 8006726:	2203      	movs	r2, #3
 8006728:	701a      	strb	r2, [r3, #0]
  idx++;
 800672a:	7dfb      	ldrb	r3, [r7, #23]
 800672c:	3301      	adds	r3, #1
 800672e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006730:	e013      	b.n	800675a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006732:	7dfb      	ldrb	r3, [r7, #23]
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	4413      	add	r3, r2
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	7812      	ldrb	r2, [r2, #0]
 800673c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	3301      	adds	r3, #1
 8006742:	613b      	str	r3, [r7, #16]
    idx++;
 8006744:	7dfb      	ldrb	r3, [r7, #23]
 8006746:	3301      	adds	r3, #1
 8006748:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800674a:	7dfb      	ldrb	r3, [r7, #23]
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	4413      	add	r3, r2
 8006750:	2200      	movs	r2, #0
 8006752:	701a      	strb	r2, [r3, #0]
    idx++;
 8006754:	7dfb      	ldrb	r3, [r7, #23]
 8006756:	3301      	adds	r3, #1
 8006758:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1e7      	bne.n	8006732 <USBD_GetString+0x52>
 8006762:	e000      	b.n	8006766 <USBD_GetString+0x86>
    return;
 8006764:	bf00      	nop
  }
}
 8006766:	3718      	adds	r7, #24
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006774:	2300      	movs	r3, #0
 8006776:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800677c:	e005      	b.n	800678a <USBD_GetLen+0x1e>
  {
    len++;
 800677e:	7bfb      	ldrb	r3, [r7, #15]
 8006780:	3301      	adds	r3, #1
 8006782:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	3301      	adds	r3, #1
 8006788:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1f5      	bne.n	800677e <USBD_GetLen+0x12>
  }

  return len;
 8006792:	7bfb      	ldrb	r3, [r7, #15]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2202      	movs	r2, #2
 80067b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	2100      	movs	r1, #0
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 fcc5 	bl	8007156 <USBD_LL_Transmit>

  return USBD_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b084      	sub	sp, #16
 80067da:	af00      	add	r7, sp, #0
 80067dc:	60f8      	str	r0, [r7, #12]
 80067de:	60b9      	str	r1, [r7, #8]
 80067e0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	2100      	movs	r1, #0
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 fcb4 	bl	8007156 <USBD_LL_Transmit>

  return USBD_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2203      	movs	r2, #3
 8006808:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	2100      	movs	r1, #0
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f000 fcb8 	bl	8007198 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b084      	sub	sp, #16
 8006836:	af00      	add	r7, sp, #0
 8006838:	60f8      	str	r0, [r7, #12]
 800683a:	60b9      	str	r1, [r7, #8]
 800683c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	2100      	movs	r1, #0
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 fca7 	bl	8007198 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2204      	movs	r2, #4
 8006860:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006864:	2300      	movs	r3, #0
 8006866:	2200      	movs	r2, #0
 8006868:	2100      	movs	r1, #0
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fc73 	bl	8007156 <USBD_LL_Transmit>

  return USBD_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3708      	adds	r7, #8
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b082      	sub	sp, #8
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2205      	movs	r2, #5
 8006886:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800688a:	2300      	movs	r3, #0
 800688c:	2200      	movs	r2, #0
 800688e:	2100      	movs	r1, #0
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fc81 	bl	8007198 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80068a4:	2200      	movs	r2, #0
 80068a6:	4912      	ldr	r1, [pc, #72]	; (80068f0 <MX_USB_DEVICE_Init+0x50>)
 80068a8:	4812      	ldr	r0, [pc, #72]	; (80068f4 <MX_USB_DEVICE_Init+0x54>)
 80068aa:	f7fe fd07 	bl	80052bc <USBD_Init>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d001      	beq.n	80068b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80068b4:	f7f9 ff80 	bl	80007b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80068b8:	490f      	ldr	r1, [pc, #60]	; (80068f8 <MX_USB_DEVICE_Init+0x58>)
 80068ba:	480e      	ldr	r0, [pc, #56]	; (80068f4 <MX_USB_DEVICE_Init+0x54>)
 80068bc:	f7fe fd2e 	bl	800531c <USBD_RegisterClass>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80068c6:	f7f9 ff77 	bl	80007b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80068ca:	490c      	ldr	r1, [pc, #48]	; (80068fc <MX_USB_DEVICE_Init+0x5c>)
 80068cc:	4809      	ldr	r0, [pc, #36]	; (80068f4 <MX_USB_DEVICE_Init+0x54>)
 80068ce:	f7fe fc65 	bl	800519c <USBD_CDC_RegisterInterface>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d001      	beq.n	80068dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80068d8:	f7f9 ff6e 	bl	80007b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80068dc:	4805      	ldr	r0, [pc, #20]	; (80068f4 <MX_USB_DEVICE_Init+0x54>)
 80068de:	f7fe fd53 	bl	8005388 <USBD_Start>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d001      	beq.n	80068ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80068e8:	f7f9 ff66 	bl	80007b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80068ec:	bf00      	nop
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	2000010c 	.word	0x2000010c
 80068f4:	200001d4 	.word	0x200001d4
 80068f8:	20000078 	.word	0x20000078
 80068fc:	200000f8 	.word	0x200000f8

08006900 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006904:	2200      	movs	r2, #0
 8006906:	4905      	ldr	r1, [pc, #20]	; (800691c <CDC_Init_FS+0x1c>)
 8006908:	4805      	ldr	r0, [pc, #20]	; (8006920 <CDC_Init_FS+0x20>)
 800690a:	f7fe fc61 	bl	80051d0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800690e:	4905      	ldr	r1, [pc, #20]	; (8006924 <CDC_Init_FS+0x24>)
 8006910:	4803      	ldr	r0, [pc, #12]	; (8006920 <CDC_Init_FS+0x20>)
 8006912:	f7fe fc7f 	bl	8005214 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006916:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006918:	4618      	mov	r0, r3
 800691a:	bd80      	pop	{r7, pc}
 800691c:	20000cb0 	.word	0x20000cb0
 8006920:	200001d4 	.word	0x200001d4
 8006924:	200004b0 	.word	0x200004b0

08006928 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006928:	b480      	push	{r7}
 800692a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800692c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800692e:	4618      	mov	r0, r3
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	4603      	mov	r3, r0
 8006940:	6039      	str	r1, [r7, #0]
 8006942:	71fb      	strb	r3, [r7, #7]
 8006944:	4613      	mov	r3, r2
 8006946:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006948:	79fb      	ldrb	r3, [r7, #7]
 800694a:	2b23      	cmp	r3, #35	; 0x23
 800694c:	d84a      	bhi.n	80069e4 <CDC_Control_FS+0xac>
 800694e:	a201      	add	r2, pc, #4	; (adr r2, 8006954 <CDC_Control_FS+0x1c>)
 8006950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006954:	080069e5 	.word	0x080069e5
 8006958:	080069e5 	.word	0x080069e5
 800695c:	080069e5 	.word	0x080069e5
 8006960:	080069e5 	.word	0x080069e5
 8006964:	080069e5 	.word	0x080069e5
 8006968:	080069e5 	.word	0x080069e5
 800696c:	080069e5 	.word	0x080069e5
 8006970:	080069e5 	.word	0x080069e5
 8006974:	080069e5 	.word	0x080069e5
 8006978:	080069e5 	.word	0x080069e5
 800697c:	080069e5 	.word	0x080069e5
 8006980:	080069e5 	.word	0x080069e5
 8006984:	080069e5 	.word	0x080069e5
 8006988:	080069e5 	.word	0x080069e5
 800698c:	080069e5 	.word	0x080069e5
 8006990:	080069e5 	.word	0x080069e5
 8006994:	080069e5 	.word	0x080069e5
 8006998:	080069e5 	.word	0x080069e5
 800699c:	080069e5 	.word	0x080069e5
 80069a0:	080069e5 	.word	0x080069e5
 80069a4:	080069e5 	.word	0x080069e5
 80069a8:	080069e5 	.word	0x080069e5
 80069ac:	080069e5 	.word	0x080069e5
 80069b0:	080069e5 	.word	0x080069e5
 80069b4:	080069e5 	.word	0x080069e5
 80069b8:	080069e5 	.word	0x080069e5
 80069bc:	080069e5 	.word	0x080069e5
 80069c0:	080069e5 	.word	0x080069e5
 80069c4:	080069e5 	.word	0x080069e5
 80069c8:	080069e5 	.word	0x080069e5
 80069cc:	080069e5 	.word	0x080069e5
 80069d0:	080069e5 	.word	0x080069e5
 80069d4:	080069e5 	.word	0x080069e5
 80069d8:	080069e5 	.word	0x080069e5
 80069dc:	080069e5 	.word	0x080069e5
 80069e0:	080069e5 	.word	0x080069e5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80069e4:	bf00      	nop
  }

  return (USBD_OK);
 80069e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80069fe:	6879      	ldr	r1, [r7, #4]
 8006a00:	4805      	ldr	r0, [pc, #20]	; (8006a18 <CDC_Receive_FS+0x24>)
 8006a02:	f7fe fc07 	bl	8005214 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006a06:	4804      	ldr	r0, [pc, #16]	; (8006a18 <CDC_Receive_FS+0x24>)
 8006a08:	f7fe fc22 	bl	8005250 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006a0c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3708      	adds	r7, #8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	200001d4 	.word	0x200001d4

08006a1c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b087      	sub	sp, #28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	4613      	mov	r3, r2
 8006a28:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006a2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	371c      	adds	r7, #28
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
	...

08006a40 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	4603      	mov	r3, r0
 8006a48:	6039      	str	r1, [r7, #0]
 8006a4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	2212      	movs	r2, #18
 8006a50:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006a52:	4b03      	ldr	r3, [pc, #12]	; (8006a60 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	20000128 	.word	0x20000128

08006a64 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	6039      	str	r1, [r7, #0]
 8006a6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	2204      	movs	r2, #4
 8006a74:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006a76:	4b03      	ldr	r3, [pc, #12]	; (8006a84 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	2000013c 	.word	0x2000013c

08006a88 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	4603      	mov	r3, r0
 8006a90:	6039      	str	r1, [r7, #0]
 8006a92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006a94:	79fb      	ldrb	r3, [r7, #7]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d105      	bne.n	8006aa6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	4907      	ldr	r1, [pc, #28]	; (8006abc <USBD_FS_ProductStrDescriptor+0x34>)
 8006a9e:	4808      	ldr	r0, [pc, #32]	; (8006ac0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006aa0:	f7ff fe1e 	bl	80066e0 <USBD_GetString>
 8006aa4:	e004      	b.n	8006ab0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	4904      	ldr	r1, [pc, #16]	; (8006abc <USBD_FS_ProductStrDescriptor+0x34>)
 8006aaa:	4805      	ldr	r0, [pc, #20]	; (8006ac0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006aac:	f7ff fe18 	bl	80066e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ab0:	4b02      	ldr	r3, [pc, #8]	; (8006abc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	200014b0 	.word	0x200014b0
 8006ac0:	080072f8 	.word	0x080072f8

08006ac4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	4603      	mov	r3, r0
 8006acc:	6039      	str	r1, [r7, #0]
 8006ace:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006ad0:	683a      	ldr	r2, [r7, #0]
 8006ad2:	4904      	ldr	r1, [pc, #16]	; (8006ae4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006ad4:	4804      	ldr	r0, [pc, #16]	; (8006ae8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006ad6:	f7ff fe03 	bl	80066e0 <USBD_GetString>
  return USBD_StrDesc;
 8006ada:	4b02      	ldr	r3, [pc, #8]	; (8006ae4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3708      	adds	r7, #8
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	200014b0 	.word	0x200014b0
 8006ae8:	08007310 	.word	0x08007310

08006aec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	4603      	mov	r3, r0
 8006af4:	6039      	str	r1, [r7, #0]
 8006af6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	221a      	movs	r2, #26
 8006afc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006afe:	f000 f843 	bl	8006b88 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006b02:	4b02      	ldr	r3, [pc, #8]	; (8006b0c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	20000140 	.word	0x20000140

08006b10 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	4603      	mov	r3, r0
 8006b18:	6039      	str	r1, [r7, #0]
 8006b1a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006b1c:	79fb      	ldrb	r3, [r7, #7]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d105      	bne.n	8006b2e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b22:	683a      	ldr	r2, [r7, #0]
 8006b24:	4907      	ldr	r1, [pc, #28]	; (8006b44 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006b26:	4808      	ldr	r0, [pc, #32]	; (8006b48 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006b28:	f7ff fdda 	bl	80066e0 <USBD_GetString>
 8006b2c:	e004      	b.n	8006b38 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b2e:	683a      	ldr	r2, [r7, #0]
 8006b30:	4904      	ldr	r1, [pc, #16]	; (8006b44 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006b32:	4805      	ldr	r0, [pc, #20]	; (8006b48 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006b34:	f7ff fdd4 	bl	80066e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b38:	4b02      	ldr	r3, [pc, #8]	; (8006b44 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3708      	adds	r7, #8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	200014b0 	.word	0x200014b0
 8006b48:	08007324 	.word	0x08007324

08006b4c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	4603      	mov	r3, r0
 8006b54:	6039      	str	r1, [r7, #0]
 8006b56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006b58:	79fb      	ldrb	r3, [r7, #7]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d105      	bne.n	8006b6a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006b5e:	683a      	ldr	r2, [r7, #0]
 8006b60:	4907      	ldr	r1, [pc, #28]	; (8006b80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006b62:	4808      	ldr	r0, [pc, #32]	; (8006b84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006b64:	f7ff fdbc 	bl	80066e0 <USBD_GetString>
 8006b68:	e004      	b.n	8006b74 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006b6a:	683a      	ldr	r2, [r7, #0]
 8006b6c:	4904      	ldr	r1, [pc, #16]	; (8006b80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006b6e:	4805      	ldr	r0, [pc, #20]	; (8006b84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006b70:	f7ff fdb6 	bl	80066e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b74:	4b02      	ldr	r3, [pc, #8]	; (8006b80 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	200014b0 	.word	0x200014b0
 8006b84:	08007330 	.word	0x08007330

08006b88 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006b8e:	4b0f      	ldr	r3, [pc, #60]	; (8006bcc <Get_SerialNum+0x44>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006b94:	4b0e      	ldr	r3, [pc, #56]	; (8006bd0 <Get_SerialNum+0x48>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006b9a:	4b0e      	ldr	r3, [pc, #56]	; (8006bd4 <Get_SerialNum+0x4c>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d009      	beq.n	8006bc2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006bae:	2208      	movs	r2, #8
 8006bb0:	4909      	ldr	r1, [pc, #36]	; (8006bd8 <Get_SerialNum+0x50>)
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f000 f814 	bl	8006be0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006bb8:	2204      	movs	r2, #4
 8006bba:	4908      	ldr	r1, [pc, #32]	; (8006bdc <Get_SerialNum+0x54>)
 8006bbc:	68b8      	ldr	r0, [r7, #8]
 8006bbe:	f000 f80f 	bl	8006be0 <IntToUnicode>
  }
}
 8006bc2:	bf00      	nop
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	1fff7a10 	.word	0x1fff7a10
 8006bd0:	1fff7a14 	.word	0x1fff7a14
 8006bd4:	1fff7a18 	.word	0x1fff7a18
 8006bd8:	20000142 	.word	0x20000142
 8006bdc:	20000152 	.word	0x20000152

08006be0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b087      	sub	sp, #28
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	4613      	mov	r3, r2
 8006bec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	75fb      	strb	r3, [r7, #23]
 8006bf6:	e027      	b.n	8006c48 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	0f1b      	lsrs	r3, r3, #28
 8006bfc:	2b09      	cmp	r3, #9
 8006bfe:	d80b      	bhi.n	8006c18 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	0f1b      	lsrs	r3, r3, #28
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	7dfb      	ldrb	r3, [r7, #23]
 8006c08:	005b      	lsls	r3, r3, #1
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	440b      	add	r3, r1
 8006c10:	3230      	adds	r2, #48	; 0x30
 8006c12:	b2d2      	uxtb	r2, r2
 8006c14:	701a      	strb	r2, [r3, #0]
 8006c16:	e00a      	b.n	8006c2e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	0f1b      	lsrs	r3, r3, #28
 8006c1c:	b2da      	uxtb	r2, r3
 8006c1e:	7dfb      	ldrb	r3, [r7, #23]
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	4619      	mov	r1, r3
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	440b      	add	r3, r1
 8006c28:	3237      	adds	r2, #55	; 0x37
 8006c2a:	b2d2      	uxtb	r2, r2
 8006c2c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	011b      	lsls	r3, r3, #4
 8006c32:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006c34:	7dfb      	ldrb	r3, [r7, #23]
 8006c36:	005b      	lsls	r3, r3, #1
 8006c38:	3301      	adds	r3, #1
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	2200      	movs	r2, #0
 8006c40:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006c42:	7dfb      	ldrb	r3, [r7, #23]
 8006c44:	3301      	adds	r3, #1
 8006c46:	75fb      	strb	r3, [r7, #23]
 8006c48:	7dfa      	ldrb	r2, [r7, #23]
 8006c4a:	79fb      	ldrb	r3, [r7, #7]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d3d3      	bcc.n	8006bf8 <IntToUnicode+0x18>
  }
}
 8006c50:	bf00      	nop
 8006c52:	bf00      	nop
 8006c54:	371c      	adds	r7, #28
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
	...

08006c60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b08a      	sub	sp, #40	; 0x28
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c68:	f107 0314 	add.w	r3, r7, #20
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	601a      	str	r2, [r3, #0]
 8006c70:	605a      	str	r2, [r3, #4]
 8006c72:	609a      	str	r2, [r3, #8]
 8006c74:	60da      	str	r2, [r3, #12]
 8006c76:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c80:	d13a      	bne.n	8006cf8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c82:	2300      	movs	r3, #0
 8006c84:	613b      	str	r3, [r7, #16]
 8006c86:	4b1e      	ldr	r3, [pc, #120]	; (8006d00 <HAL_PCD_MspInit+0xa0>)
 8006c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8a:	4a1d      	ldr	r2, [pc, #116]	; (8006d00 <HAL_PCD_MspInit+0xa0>)
 8006c8c:	f043 0301 	orr.w	r3, r3, #1
 8006c90:	6313      	str	r3, [r2, #48]	; 0x30
 8006c92:	4b1b      	ldr	r3, [pc, #108]	; (8006d00 <HAL_PCD_MspInit+0xa0>)
 8006c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c96:	f003 0301 	and.w	r3, r3, #1
 8006c9a:	613b      	str	r3, [r7, #16]
 8006c9c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006c9e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cac:	2303      	movs	r3, #3
 8006cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006cb0:	230a      	movs	r3, #10
 8006cb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cb4:	f107 0314 	add.w	r3, r7, #20
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4812      	ldr	r0, [pc, #72]	; (8006d04 <HAL_PCD_MspInit+0xa4>)
 8006cbc:	f7fa f862 	bl	8000d84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006cc0:	4b0f      	ldr	r3, [pc, #60]	; (8006d00 <HAL_PCD_MspInit+0xa0>)
 8006cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cc4:	4a0e      	ldr	r2, [pc, #56]	; (8006d00 <HAL_PCD_MspInit+0xa0>)
 8006cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cca:	6353      	str	r3, [r2, #52]	; 0x34
 8006ccc:	2300      	movs	r3, #0
 8006cce:	60fb      	str	r3, [r7, #12]
 8006cd0:	4b0b      	ldr	r3, [pc, #44]	; (8006d00 <HAL_PCD_MspInit+0xa0>)
 8006cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cd4:	4a0a      	ldr	r2, [pc, #40]	; (8006d00 <HAL_PCD_MspInit+0xa0>)
 8006cd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006cda:	6453      	str	r3, [r2, #68]	; 0x44
 8006cdc:	4b08      	ldr	r3, [pc, #32]	; (8006d00 <HAL_PCD_MspInit+0xa0>)
 8006cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ce4:	60fb      	str	r3, [r7, #12]
 8006ce6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006ce8:	2200      	movs	r2, #0
 8006cea:	2100      	movs	r1, #0
 8006cec:	2043      	movs	r0, #67	; 0x43
 8006cee:	f7fa f812 	bl	8000d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006cf2:	2043      	movs	r0, #67	; 0x43
 8006cf4:	f7fa f82b 	bl	8000d4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006cf8:	bf00      	nop
 8006cfa:	3728      	adds	r7, #40	; 0x28
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	40023800 	.word	0x40023800
 8006d04:	40020000 	.word	0x40020000

08006d08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	4610      	mov	r0, r2
 8006d20:	f7fe fb7f 	bl	8005422 <USBD_LL_SetupStage>
}
 8006d24:	bf00      	nop
 8006d26:	3708      	adds	r7, #8
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	460b      	mov	r3, r1
 8006d36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006d3e:	78fa      	ldrb	r2, [r7, #3]
 8006d40:	6879      	ldr	r1, [r7, #4]
 8006d42:	4613      	mov	r3, r2
 8006d44:	00db      	lsls	r3, r3, #3
 8006d46:	4413      	add	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	440b      	add	r3, r1
 8006d4c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	78fb      	ldrb	r3, [r7, #3]
 8006d54:	4619      	mov	r1, r3
 8006d56:	f7fe fbb9 	bl	80054cc <USBD_LL_DataOutStage>
}
 8006d5a:	bf00      	nop
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b082      	sub	sp, #8
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006d74:	78fa      	ldrb	r2, [r7, #3]
 8006d76:	6879      	ldr	r1, [r7, #4]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	00db      	lsls	r3, r3, #3
 8006d7c:	4413      	add	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	440b      	add	r3, r1
 8006d82:	334c      	adds	r3, #76	; 0x4c
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	78fb      	ldrb	r3, [r7, #3]
 8006d88:	4619      	mov	r1, r3
 8006d8a:	f7fe fc52 	bl	8005632 <USBD_LL_DataInStage>
}
 8006d8e:	bf00      	nop
 8006d90:	3708      	adds	r7, #8
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b082      	sub	sp, #8
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7fe fd86 	bl	80058b6 <USBD_LL_SOF>
}
 8006daa:	bf00      	nop
 8006dac:	3708      	adds	r7, #8
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b084      	sub	sp, #16
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d102      	bne.n	8006dcc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	73fb      	strb	r3, [r7, #15]
 8006dca:	e008      	b.n	8006dde <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d102      	bne.n	8006dda <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	73fb      	strb	r3, [r7, #15]
 8006dd8:	e001      	b.n	8006dde <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006dda:	f7f9 fced 	bl	80007b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006de4:	7bfa      	ldrb	r2, [r7, #15]
 8006de6:	4611      	mov	r1, r2
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7fe fd26 	bl	800583a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7fe fcce 	bl	8005796 <USBD_LL_Reset>
}
 8006dfa:	bf00      	nop
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
	...

08006e04 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fe fd21 	bl	800585a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	6812      	ldr	r2, [r2, #0]
 8006e26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e2a:	f043 0301 	orr.w	r3, r3, #1
 8006e2e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a1b      	ldr	r3, [r3, #32]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d005      	beq.n	8006e44 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006e38:	4b04      	ldr	r3, [pc, #16]	; (8006e4c <HAL_PCD_SuspendCallback+0x48>)
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	4a03      	ldr	r2, [pc, #12]	; (8006e4c <HAL_PCD_SuspendCallback+0x48>)
 8006e3e:	f043 0306 	orr.w	r3, r3, #6
 8006e42:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006e44:	bf00      	nop
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	e000ed00 	.word	0xe000ed00

08006e50 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fe fd11 	bl	8005886 <USBD_LL_Resume>
}
 8006e64:	bf00      	nop
 8006e66:	3708      	adds	r7, #8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	460b      	mov	r3, r1
 8006e76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e7e:	78fa      	ldrb	r2, [r7, #3]
 8006e80:	4611      	mov	r1, r2
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7fe fd69 	bl	800595a <USBD_LL_IsoOUTIncomplete>
}
 8006e88:	bf00      	nop
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	460b      	mov	r3, r1
 8006e9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ea2:	78fa      	ldrb	r2, [r7, #3]
 8006ea4:	4611      	mov	r1, r2
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7fe fd25 	bl	80058f6 <USBD_LL_IsoINIncomplete>
}
 8006eac:	bf00      	nop
 8006eae:	3708      	adds	r7, #8
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fe fd7b 	bl	80059be <USBD_LL_DevConnected>
}
 8006ec8:	bf00      	nop
 8006eca:	3708      	adds	r7, #8
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fe fd78 	bl	80059d4 <USBD_LL_DevDisconnected>
}
 8006ee4:	bf00      	nop
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d13c      	bne.n	8006f76 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006efc:	4a20      	ldr	r2, [pc, #128]	; (8006f80 <USBD_LL_Init+0x94>)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a1e      	ldr	r2, [pc, #120]	; (8006f80 <USBD_LL_Init+0x94>)
 8006f08:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006f0c:	4b1c      	ldr	r3, [pc, #112]	; (8006f80 <USBD_LL_Init+0x94>)
 8006f0e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006f12:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006f14:	4b1a      	ldr	r3, [pc, #104]	; (8006f80 <USBD_LL_Init+0x94>)
 8006f16:	2204      	movs	r2, #4
 8006f18:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006f1a:	4b19      	ldr	r3, [pc, #100]	; (8006f80 <USBD_LL_Init+0x94>)
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006f20:	4b17      	ldr	r3, [pc, #92]	; (8006f80 <USBD_LL_Init+0x94>)
 8006f22:	2200      	movs	r2, #0
 8006f24:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006f26:	4b16      	ldr	r3, [pc, #88]	; (8006f80 <USBD_LL_Init+0x94>)
 8006f28:	2202      	movs	r2, #2
 8006f2a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006f2c:	4b14      	ldr	r3, [pc, #80]	; (8006f80 <USBD_LL_Init+0x94>)
 8006f2e:	2200      	movs	r2, #0
 8006f30:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006f32:	4b13      	ldr	r3, [pc, #76]	; (8006f80 <USBD_LL_Init+0x94>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006f38:	4b11      	ldr	r3, [pc, #68]	; (8006f80 <USBD_LL_Init+0x94>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006f3e:	4b10      	ldr	r3, [pc, #64]	; (8006f80 <USBD_LL_Init+0x94>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006f44:	4b0e      	ldr	r3, [pc, #56]	; (8006f80 <USBD_LL_Init+0x94>)
 8006f46:	2200      	movs	r2, #0
 8006f48:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006f4a:	480d      	ldr	r0, [pc, #52]	; (8006f80 <USBD_LL_Init+0x94>)
 8006f4c:	f7fa fa16 	bl	800137c <HAL_PCD_Init>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d001      	beq.n	8006f5a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006f56:	f7f9 fc2f 	bl	80007b8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006f5a:	2180      	movs	r1, #128	; 0x80
 8006f5c:	4808      	ldr	r0, [pc, #32]	; (8006f80 <USBD_LL_Init+0x94>)
 8006f5e:	f7fb fc6e 	bl	800283e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006f62:	2240      	movs	r2, #64	; 0x40
 8006f64:	2100      	movs	r1, #0
 8006f66:	4806      	ldr	r0, [pc, #24]	; (8006f80 <USBD_LL_Init+0x94>)
 8006f68:	f7fb fc22 	bl	80027b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006f6c:	2280      	movs	r2, #128	; 0x80
 8006f6e:	2101      	movs	r1, #1
 8006f70:	4803      	ldr	r0, [pc, #12]	; (8006f80 <USBD_LL_Init+0x94>)
 8006f72:	f7fb fc1d 	bl	80027b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3708      	adds	r7, #8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	200016b0 	.word	0x200016b0

08006f84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f90:	2300      	movs	r3, #0
 8006f92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7fa fb0b 	bl	80015b6 <HAL_PCD_Start>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 f942 	bl	8007230 <USBD_Get_USB_Status>
 8006fac:	4603      	mov	r3, r0
 8006fae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b084      	sub	sp, #16
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
 8006fc2:	4608      	mov	r0, r1
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	4603      	mov	r3, r0
 8006fca:	70fb      	strb	r3, [r7, #3]
 8006fcc:	460b      	mov	r3, r1
 8006fce:	70bb      	strb	r3, [r7, #2]
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006fe2:	78bb      	ldrb	r3, [r7, #2]
 8006fe4:	883a      	ldrh	r2, [r7, #0]
 8006fe6:	78f9      	ldrb	r1, [r7, #3]
 8006fe8:	f7fa ffdc 	bl	8001fa4 <HAL_PCD_EP_Open>
 8006fec:	4603      	mov	r3, r0
 8006fee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f000 f91c 	bl	8007230 <USBD_Get_USB_Status>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ffc:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b084      	sub	sp, #16
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
 800700e:	460b      	mov	r3, r1
 8007010:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007012:	2300      	movs	r3, #0
 8007014:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007016:	2300      	movs	r3, #0
 8007018:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007020:	78fa      	ldrb	r2, [r7, #3]
 8007022:	4611      	mov	r1, r2
 8007024:	4618      	mov	r0, r3
 8007026:	f7fb f825 	bl	8002074 <HAL_PCD_EP_Close>
 800702a:	4603      	mov	r3, r0
 800702c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800702e:	7bfb      	ldrb	r3, [r7, #15]
 8007030:	4618      	mov	r0, r3
 8007032:	f000 f8fd 	bl	8007230 <USBD_Get_USB_Status>
 8007036:	4603      	mov	r3, r0
 8007038:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800703a:	7bbb      	ldrb	r3, [r7, #14]
}
 800703c:	4618      	mov	r0, r3
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	460b      	mov	r3, r1
 800704e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007050:	2300      	movs	r3, #0
 8007052:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007054:	2300      	movs	r3, #0
 8007056:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800705e:	78fa      	ldrb	r2, [r7, #3]
 8007060:	4611      	mov	r1, r2
 8007062:	4618      	mov	r0, r3
 8007064:	f7fb f8fd 	bl	8002262 <HAL_PCD_EP_SetStall>
 8007068:	4603      	mov	r3, r0
 800706a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800706c:	7bfb      	ldrb	r3, [r7, #15]
 800706e:	4618      	mov	r0, r3
 8007070:	f000 f8de 	bl	8007230 <USBD_Get_USB_Status>
 8007074:	4603      	mov	r3, r0
 8007076:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007078:	7bbb      	ldrb	r3, [r7, #14]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b084      	sub	sp, #16
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	460b      	mov	r3, r1
 800708c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007092:	2300      	movs	r3, #0
 8007094:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800709c:	78fa      	ldrb	r2, [r7, #3]
 800709e:	4611      	mov	r1, r2
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7fb f942 	bl	800232a <HAL_PCD_EP_ClrStall>
 80070a6:	4603      	mov	r3, r0
 80070a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070aa:	7bfb      	ldrb	r3, [r7, #15]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f000 f8bf 	bl	8007230 <USBD_Get_USB_Status>
 80070b2:	4603      	mov	r3, r0
 80070b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	460b      	mov	r3, r1
 80070ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80070d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80070d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	da0b      	bge.n	80070f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80070dc:	78fb      	ldrb	r3, [r7, #3]
 80070de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070e2:	68f9      	ldr	r1, [r7, #12]
 80070e4:	4613      	mov	r3, r2
 80070e6:	00db      	lsls	r3, r3, #3
 80070e8:	4413      	add	r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	440b      	add	r3, r1
 80070ee:	333e      	adds	r3, #62	; 0x3e
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	e00b      	b.n	800710c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80070f4:	78fb      	ldrb	r3, [r7, #3]
 80070f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070fa:	68f9      	ldr	r1, [r7, #12]
 80070fc:	4613      	mov	r3, r2
 80070fe:	00db      	lsls	r3, r3, #3
 8007100:	4413      	add	r3, r2
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	440b      	add	r3, r1
 8007106:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800710a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800710c:	4618      	mov	r0, r3
 800710e:	3714      	adds	r7, #20
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	460b      	mov	r3, r1
 8007122:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007124:	2300      	movs	r3, #0
 8007126:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007128:	2300      	movs	r3, #0
 800712a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007132:	78fa      	ldrb	r2, [r7, #3]
 8007134:	4611      	mov	r1, r2
 8007136:	4618      	mov	r0, r3
 8007138:	f7fa ff0f 	bl	8001f5a <HAL_PCD_SetAddress>
 800713c:	4603      	mov	r3, r0
 800713e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007140:	7bfb      	ldrb	r3, [r7, #15]
 8007142:	4618      	mov	r0, r3
 8007144:	f000 f874 	bl	8007230 <USBD_Get_USB_Status>
 8007148:	4603      	mov	r3, r0
 800714a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800714c:	7bbb      	ldrb	r3, [r7, #14]
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b086      	sub	sp, #24
 800715a:	af00      	add	r7, sp, #0
 800715c:	60f8      	str	r0, [r7, #12]
 800715e:	607a      	str	r2, [r7, #4]
 8007160:	603b      	str	r3, [r7, #0]
 8007162:	460b      	mov	r3, r1
 8007164:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007166:	2300      	movs	r3, #0
 8007168:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800716a:	2300      	movs	r3, #0
 800716c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007174:	7af9      	ldrb	r1, [r7, #11]
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	f7fb f828 	bl	80021ce <HAL_PCD_EP_Transmit>
 800717e:	4603      	mov	r3, r0
 8007180:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007182:	7dfb      	ldrb	r3, [r7, #23]
 8007184:	4618      	mov	r0, r3
 8007186:	f000 f853 	bl	8007230 <USBD_Get_USB_Status>
 800718a:	4603      	mov	r3, r0
 800718c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800718e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007190:	4618      	mov	r0, r3
 8007192:	3718      	adds	r7, #24
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	607a      	str	r2, [r7, #4]
 80071a2:	603b      	str	r3, [r7, #0]
 80071a4:	460b      	mov	r3, r1
 80071a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80071b6:	7af9      	ldrb	r1, [r7, #11]
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	f7fa ffa4 	bl	8002108 <HAL_PCD_EP_Receive>
 80071c0:	4603      	mov	r3, r0
 80071c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071c4:	7dfb      	ldrb	r3, [r7, #23]
 80071c6:	4618      	mov	r0, r3
 80071c8:	f000 f832 	bl	8007230 <USBD_Get_USB_Status>
 80071cc:	4603      	mov	r3, r0
 80071ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80071d0:	7dbb      	ldrb	r3, [r7, #22]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3718      	adds	r7, #24
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b082      	sub	sp, #8
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	460b      	mov	r3, r1
 80071e4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80071ec:	78fa      	ldrb	r2, [r7, #3]
 80071ee:	4611      	mov	r1, r2
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7fa ffd4 	bl	800219e <HAL_PCD_EP_GetRxCount>
 80071f6:	4603      	mov	r3, r0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007208:	4b03      	ldr	r3, [pc, #12]	; (8007218 <USBD_static_malloc+0x18>)
}
 800720a:	4618      	mov	r0, r3
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	20001bbc 	.word	0x20001bbc

0800721c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]

}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	4603      	mov	r3, r0
 8007238:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800723a:	2300      	movs	r3, #0
 800723c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800723e:	79fb      	ldrb	r3, [r7, #7]
 8007240:	2b03      	cmp	r3, #3
 8007242:	d817      	bhi.n	8007274 <USBD_Get_USB_Status+0x44>
 8007244:	a201      	add	r2, pc, #4	; (adr r2, 800724c <USBD_Get_USB_Status+0x1c>)
 8007246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724a:	bf00      	nop
 800724c:	0800725d 	.word	0x0800725d
 8007250:	08007263 	.word	0x08007263
 8007254:	08007269 	.word	0x08007269
 8007258:	0800726f 	.word	0x0800726f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	73fb      	strb	r3, [r7, #15]
    break;
 8007260:	e00b      	b.n	800727a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007262:	2303      	movs	r3, #3
 8007264:	73fb      	strb	r3, [r7, #15]
    break;
 8007266:	e008      	b.n	800727a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007268:	2301      	movs	r3, #1
 800726a:	73fb      	strb	r3, [r7, #15]
    break;
 800726c:	e005      	b.n	800727a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800726e:	2303      	movs	r3, #3
 8007270:	73fb      	strb	r3, [r7, #15]
    break;
 8007272:	e002      	b.n	800727a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007274:	2303      	movs	r3, #3
 8007276:	73fb      	strb	r3, [r7, #15]
    break;
 8007278:	bf00      	nop
  }
  return usb_status;
 800727a:	7bfb      	ldrb	r3, [r7, #15]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <__libc_init_array>:
 8007288:	b570      	push	{r4, r5, r6, lr}
 800728a:	4d0d      	ldr	r5, [pc, #52]	; (80072c0 <__libc_init_array+0x38>)
 800728c:	4c0d      	ldr	r4, [pc, #52]	; (80072c4 <__libc_init_array+0x3c>)
 800728e:	1b64      	subs	r4, r4, r5
 8007290:	10a4      	asrs	r4, r4, #2
 8007292:	2600      	movs	r6, #0
 8007294:	42a6      	cmp	r6, r4
 8007296:	d109      	bne.n	80072ac <__libc_init_array+0x24>
 8007298:	4d0b      	ldr	r5, [pc, #44]	; (80072c8 <__libc_init_array+0x40>)
 800729a:	4c0c      	ldr	r4, [pc, #48]	; (80072cc <__libc_init_array+0x44>)
 800729c:	f000 f820 	bl	80072e0 <_init>
 80072a0:	1b64      	subs	r4, r4, r5
 80072a2:	10a4      	asrs	r4, r4, #2
 80072a4:	2600      	movs	r6, #0
 80072a6:	42a6      	cmp	r6, r4
 80072a8:	d105      	bne.n	80072b6 <__libc_init_array+0x2e>
 80072aa:	bd70      	pop	{r4, r5, r6, pc}
 80072ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80072b0:	4798      	blx	r3
 80072b2:	3601      	adds	r6, #1
 80072b4:	e7ee      	b.n	8007294 <__libc_init_array+0xc>
 80072b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80072ba:	4798      	blx	r3
 80072bc:	3601      	adds	r6, #1
 80072be:	e7f2      	b.n	80072a6 <__libc_init_array+0x1e>
 80072c0:	08007360 	.word	0x08007360
 80072c4:	08007360 	.word	0x08007360
 80072c8:	08007360 	.word	0x08007360
 80072cc:	08007364 	.word	0x08007364

080072d0 <memset>:
 80072d0:	4402      	add	r2, r0
 80072d2:	4603      	mov	r3, r0
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d100      	bne.n	80072da <memset+0xa>
 80072d8:	4770      	bx	lr
 80072da:	f803 1b01 	strb.w	r1, [r3], #1
 80072de:	e7f9      	b.n	80072d4 <memset+0x4>

080072e0 <_init>:
 80072e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e2:	bf00      	nop
 80072e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072e6:	bc08      	pop	{r3}
 80072e8:	469e      	mov	lr, r3
 80072ea:	4770      	bx	lr

080072ec <_fini>:
 80072ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ee:	bf00      	nop
 80072f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072f2:	bc08      	pop	{r3}
 80072f4:	469e      	mov	lr, r3
 80072f6:	4770      	bx	lr
